/*
 * Generated by @medplum/generator
 * Do not edit manually.
 */

import { getSearchParameterDetails } from '@medplum/core';
import { readJson } from '@medplum/definitions';
import { BundleEntry, SearchParameter } from '@medplum/fhirtypes';
import { PoolClient } from 'pg';

// HumanName
const nameParams = [
  'individual-given',
  'individual-family',
  'Patient-name',
  'Person-name',
  'Practitioner-name',
  'RelatedPerson-name',
];
// Address
const addressParams = ['individual-address', 'InsurancePlan-address', 'Location-address', 'Organization-address'];

const migrationParams: SearchParameter[] = [];
for (const entry of readJson('fhir/r4/search-parameters.json').entry as BundleEntry<SearchParameter>[]) {
  if (entry.resource && paramNeedsMigration(entry.resource)) {
    migrationParams.push(entry.resource);
  }
}
for (const entry of readJson('fhir/r4/search-parameters-medplum.json').entry as BundleEntry<SearchParameter>[]) {
  if (entry.resource && paramNeedsMigration(entry.resource)) {
    migrationParams.push(entry.resource);
  }
}

function paramNeedsMigration(searchParam: SearchParameter): boolean {
  if (!searchParam) {
    return false;
  }
  if (
    nameParams.includes(searchParam.id as string) ||
    addressParams.includes(searchParam.id as string) ||
    searchParam.code?.startsWith('address-')
  ) {
    return true;
  }
  return false;
}

export async function run(client: PoolClient): Promise<void> {
  const fields: [string, string][] = [];
  for (const searchParam of migrationParams) {
    if (!searchParam.base) {
      continue;
    }
    for (const resourceType of searchParam.base) {
      const details = getSearchParameterDetails(resourceType, searchParam);
      fields.push([resourceType, details.columnName]);
    }
  }
  await client.query(
    `CREATE OR REPLACE FUNCTION medplum_join_strings(text[]) RETURNS text as $$ SELECT array_to_string($1, ' '); $$ LANGUAGE sql IMMUTABLE`
  );
  for (const [table, column] of fields) {
    await client.query(`ALTER TABLE "${table}" ADD COLUMN IF NOT EXISTS "${column}" TEXT[]`);
    await client.query(
      `CREATE INDEX IF NOT EXISTS "${table}_${column}_tsv_idx" ON "${table}" USING gin (to_tsvector('simple', medplum_join_strings("${column}")));`
    );
  }
}
