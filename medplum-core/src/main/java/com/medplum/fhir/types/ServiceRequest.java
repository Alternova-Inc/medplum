/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class ServiceRequest extends FhirResource {
    public static final String RESOURCE_TYPE = "ServiceRequest";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_INSTANTIATESCANONICAL = "instantiatesCanonical";
    public static final String PROPERTY_INSTANTIATESURI = "instantiatesUri";
    public static final String PROPERTY_BASEDON = "basedOn";
    public static final String PROPERTY_REPLACES = "replaces";
    public static final String PROPERTY_REQUISITION = "requisition";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_INTENT = "intent";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_PRIORITY = "priority";
    public static final String PROPERTY_DONOTPERFORM = "doNotPerform";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_ORDERDETAIL = "orderDetail";
    public static final String PROPERTY_QUANTITYQUANTITY = "quantityQuantity";
    public static final String PROPERTY_QUANTITYRATIO = "quantityRatio";
    public static final String PROPERTY_QUANTITYRANGE = "quantityRange";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_OCCURRENCEDATETIME = "occurrenceDateTime";
    public static final String PROPERTY_OCCURRENCEPERIOD = "occurrencePeriod";
    public static final String PROPERTY_OCCURRENCETIMING = "occurrenceTiming";
    public static final String PROPERTY_ASNEEDEDBOOLEAN = "asNeededBoolean";
    public static final String PROPERTY_ASNEEDEDCODEABLECONCEPT = "asNeededCodeableConcept";
    public static final String PROPERTY_AUTHOREDON = "authoredOn";
    public static final String PROPERTY_REQUESTER = "requester";
    public static final String PROPERTY_PERFORMERTYPE = "performerType";
    public static final String PROPERTY_PERFORMER = "performer";
    public static final String PROPERTY_LOCATIONCODE = "locationCode";
    public static final String PROPERTY_LOCATIONREFERENCE = "locationReference";
    public static final String PROPERTY_REASONCODE = "reasonCode";
    public static final String PROPERTY_REASONREFERENCE = "reasonReference";
    public static final String PROPERTY_INSURANCE = "insurance";
    public static final String PROPERTY_SUPPORTINGINFO = "supportingInfo";
    public static final String PROPERTY_SPECIMEN = "specimen";
    public static final String PROPERTY_BODYSITE = "bodySite";
    public static final String PROPERTY_NOTE = "note";
    public static final String PROPERTY_PATIENTINSTRUCTION = "patientInstruction";
    public static final String PROPERTY_RELEVANTHISTORY = "relevantHistory";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ServiceRequest(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * Identifiers assigned to this order instance by the orderer and/or the receiver and/or order fulfiller.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     */
    public java.util.List<String> instantiatesCanonical() {
        return getList(String.class, PROPERTY_INSTANTIATESCANONICAL);
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline, orderset or other definition that is adhered to in whole or in part by this ServiceRequest.
     */
    public java.util.List<String> instantiatesUri() {
        return getList(String.class, PROPERTY_INSTANTIATESURI);
    }

    /**
     * Plan/proposal/order fulfilled by this request.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASEDON);
    }

    /**
     * The request takes the place of the referenced completed or terminated request(s).
     */
    public java.util.List<Reference> replaces() {
        return getList(Reference.class, PROPERTY_REPLACES);
    }

    /**
     * A shared identifier common to all service requests that were authorized more or less simultaneously by a single author, representing the composite or group identifier.
     */
    public Identifier requisition() {
        return getObject(Identifier.class, PROPERTY_REQUISITION);
    }

    /**
     * The status of the order.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Whether the request is a proposal, plan, an original order or a reflex order.
     */
    public String intent() {
        return getString(PROPERTY_INTENT);
    }

    /**
     * A code that classifies the service for searching, sorting and display purposes (e.g. "Surgical Procedure").
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, PROPERTY_CATEGORY);
    }

    /**
     * Indicates how quickly the ServiceRequest should be addressed with respect to other requests.
     */
    public String priority() {
        return getString(PROPERTY_PRIORITY);
    }

    /**
     * Set this to true if the record is saying that the service/procedure should NOT be performed.
     */
    public Boolean doNotPerform() {
        return data.getBoolean(PROPERTY_DONOTPERFORM);
    }

    /**
     * A code that identifies a particular service (i.e., procedure, diagnostic investigation, or panel of investigations) that have been requested.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, PROPERTY_CODE);
    }

    /**
     * Additional details and instructions about the how the services are to be delivered.   For example, and order for a urinary catheter may have an order detail for an external or indwelling catheter, or an order for a bandage may require additional instructions specifying how the bandage should be applied.
     */
    public java.util.List<CodeableConcept> orderDetail() {
        return getList(CodeableConcept.class, PROPERTY_ORDERDETAIL);
    }

    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    public Quantity quantityQuantity() {
        return getObject(Quantity.class, PROPERTY_QUANTITYQUANTITY);
    }

    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    public Ratio quantityRatio() {
        return getObject(Ratio.class, PROPERTY_QUANTITYRATIO);
    }

    /**
     * An amount of service being requested which can be a quantity ( for example $1,500 home modification), a ratio ( for example, 20 half day visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    public Range quantityRange() {
        return getObject(Range.class, PROPERTY_QUANTITYRANGE);
    }

    /**
     * On whom or what the service is to be performed. This is usually a human patient, but can also be requested on animals, groups of humans or animals, devices such as dialysis machines, or even locations (typically for environmental scans).
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * An encounter that provides additional information about the healthcare context in which this request is made.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * The date/time at which the requested service should occur.
     */
    public String occurrenceDateTime() {
        return getString(PROPERTY_OCCURRENCEDATETIME);
    }

    /**
     * The date/time at which the requested service should occur.
     */
    public Period occurrencePeriod() {
        return getObject(Period.class, PROPERTY_OCCURRENCEPERIOD);
    }

    /**
     * The date/time at which the requested service should occur.
     */
    public Timing occurrenceTiming() {
        return getObject(Timing.class, PROPERTY_OCCURRENCETIMING);
    }

    /**
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    public Boolean asNeededBoolean() {
        return data.getBoolean(PROPERTY_ASNEEDEDBOOLEAN);
    }

    /**
     * If a CodeableConcept is present, it indicates the pre-condition for performing the service.  For example "pain", "on flare-up", etc.
     */
    public CodeableConcept asNeededCodeableConcept() {
        return getObject(CodeableConcept.class, PROPERTY_ASNEEDEDCODEABLECONCEPT);
    }

    /**
     * When the request transitioned to being actionable.
     */
    public java.time.Instant authoredOn() {
        return java.time.Instant.parse(data.getString(PROPERTY_AUTHOREDON));
    }

    /**
     * The individual who initiated the request and has responsibility for its activation.
     */
    public Reference requester() {
        return getObject(Reference.class, PROPERTY_REQUESTER);
    }

    /**
     * Desired type of performer for doing the requested service.
     */
    public CodeableConcept performerType() {
        return getObject(CodeableConcept.class, PROPERTY_PERFORMERTYPE);
    }

    /**
     * The desired performer for doing the requested service.  For example, the surgeon, dermatopathologist, endoscopist, etc.
     */
    public java.util.List<Reference> performer() {
        return getList(Reference.class, PROPERTY_PERFORMER);
    }

    /**
     * The preferred location(s) where the procedure should actually happen in coded or free text form. E.g. at home or nursing day care center.
     */
    public java.util.List<CodeableConcept> locationCode() {
        return getList(CodeableConcept.class, PROPERTY_LOCATIONCODE);
    }

    /**
     * A reference to the the preferred location(s) where the procedure should actually happen. E.g. at home or nursing day care center.
     */
    public java.util.List<Reference> locationReference() {
        return getList(Reference.class, PROPERTY_LOCATIONREFERENCE);
    }

    /**
     * An explanation or justification for why this service is being requested in coded or textual form.   This is often for billing purposes.  May relate to the resources referred to in `supportingInfo`.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, PROPERTY_REASONCODE);
    }

    /**
     * Indicates another resource that provides a justification for why this service is being requested.   May relate to the resources referred to in `supportingInfo`.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, PROPERTY_REASONREFERENCE);
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be needed for delivering the requested service.
     */
    public java.util.List<Reference> insurance() {
        return getList(Reference.class, PROPERTY_INSURANCE);
    }

    /**
     * Additional clinical information about the patient or specimen that may influence the services or their interpretations.     This information includes diagnosis, clinical findings and other observations.  In laboratory ordering these are typically referred to as "ask at order entry questions (AOEs)".  This includes observations explicitly requested by the producer (filler) to provide context or supporting information needed to complete the order. For example,  reporting the amount of inspired oxygen for blood gas measurements.
     */
    public java.util.List<Reference> supportingInfo() {
        return getList(Reference.class, PROPERTY_SUPPORTINGINFO);
    }

    /**
     * One or more specimens that the laboratory procedure will use.
     */
    public java.util.List<Reference> specimen() {
        return getList(Reference.class, PROPERTY_SPECIMEN);
    }

    /**
     * Anatomic location where the procedure should be performed. This is the target site.
     */
    public java.util.List<CodeableConcept> bodySite() {
        return getList(CodeableConcept.class, PROPERTY_BODYSITE);
    }

    /**
     * Any other notes and comments made about the service request. For example, internal billing notes.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    /**
     * Instructions in terms that are understood by the patient or consumer.
     */
    public String patientInstruction() {
        return getString(PROPERTY_PATIENTINSTRUCTION);
    }

    /**
     * Key events in the history of the request.
     */
    public java.util.List<Reference> relevantHistory() {
        return getList(Reference.class, PROPERTY_RELEVANTHISTORY);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
            b.add(PROPERTY_INSTANTIATESCANONICAL, FhirObject.toStringArray(instantiatesCanonical));
            return this;
        }

        public Builder instantiatesUri(final java.util.List<String> instantiatesUri) {
            b.add(PROPERTY_INSTANTIATESURI, FhirObject.toStringArray(instantiatesUri));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASEDON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder replaces(final java.util.List<Reference> replaces) {
            b.add(PROPERTY_REPLACES, FhirObject.toArray(replaces));
            return this;
        }

        public Builder requisition(final Identifier requisition) {
            b.add(PROPERTY_REQUISITION, requisition);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(PROPERTY_INTENT, intent);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder priority(final String priority) {
            b.add(PROPERTY_PRIORITY, priority);
            return this;
        }

        public Builder doNotPerform(final Boolean doNotPerform) {
            b.add(PROPERTY_DONOTPERFORM, doNotPerform);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder orderDetail(final java.util.List<CodeableConcept> orderDetail) {
            b.add(PROPERTY_ORDERDETAIL, FhirObject.toArray(orderDetail));
            return this;
        }

        public Builder quantityQuantity(final Quantity quantityQuantity) {
            b.add(PROPERTY_QUANTITYQUANTITY, quantityQuantity);
            return this;
        }

        public Builder quantityRatio(final Ratio quantityRatio) {
            b.add(PROPERTY_QUANTITYRATIO, quantityRatio);
            return this;
        }

        public Builder quantityRange(final Range quantityRange) {
            b.add(PROPERTY_QUANTITYRANGE, quantityRange);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder occurrenceDateTime(final String occurrenceDateTime) {
            b.add(PROPERTY_OCCURRENCEDATETIME, occurrenceDateTime);
            return this;
        }

        public Builder occurrencePeriod(final Period occurrencePeriod) {
            b.add(PROPERTY_OCCURRENCEPERIOD, occurrencePeriod);
            return this;
        }

        public Builder occurrenceTiming(final Timing occurrenceTiming) {
            b.add(PROPERTY_OCCURRENCETIMING, occurrenceTiming);
            return this;
        }

        public Builder asNeededBoolean(final Boolean asNeededBoolean) {
            b.add(PROPERTY_ASNEEDEDBOOLEAN, asNeededBoolean);
            return this;
        }

        public Builder asNeededCodeableConcept(final CodeableConcept asNeededCodeableConcept) {
            b.add(PROPERTY_ASNEEDEDCODEABLECONCEPT, asNeededCodeableConcept);
            return this;
        }

        public Builder authoredOn(final java.time.Instant authoredOn) {
            b.add(PROPERTY_AUTHOREDON, authoredOn.toString());
            return this;
        }

        public Builder requester(final Reference requester) {
            b.add(PROPERTY_REQUESTER, requester);
            return this;
        }

        public Builder performerType(final CodeableConcept performerType) {
            b.add(PROPERTY_PERFORMERTYPE, performerType);
            return this;
        }

        public Builder performer(final java.util.List<Reference> performer) {
            b.add(PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder locationCode(final java.util.List<CodeableConcept> locationCode) {
            b.add(PROPERTY_LOCATIONCODE, FhirObject.toArray(locationCode));
            return this;
        }

        public Builder locationReference(final java.util.List<Reference> locationReference) {
            b.add(PROPERTY_LOCATIONREFERENCE, FhirObject.toArray(locationReference));
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(PROPERTY_REASONCODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(PROPERTY_REASONREFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder insurance(final java.util.List<Reference> insurance) {
            b.add(PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder supportingInfo(final java.util.List<Reference> supportingInfo) {
            b.add(PROPERTY_SUPPORTINGINFO, FhirObject.toArray(supportingInfo));
            return this;
        }

        public Builder specimen(final java.util.List<Reference> specimen) {
            b.add(PROPERTY_SPECIMEN, FhirObject.toArray(specimen));
            return this;
        }

        public Builder bodySite(final java.util.List<CodeableConcept> bodySite) {
            b.add(PROPERTY_BODYSITE, FhirObject.toArray(bodySite));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder patientInstruction(final String patientInstruction) {
            b.add(PROPERTY_PATIENTINSTRUCTION, patientInstruction);
            return this;
        }

        public Builder relevantHistory(final java.util.List<Reference> relevantHistory) {
            b.add(PROPERTY_RELEVANTHISTORY, FhirObject.toArray(relevantHistory));
            return this;
        }

        public ServiceRequest build() {
            return new ServiceRequest(b.build());
        }
    }
}
