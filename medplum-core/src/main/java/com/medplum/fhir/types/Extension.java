/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Extension extends FhirResource {
    public static final String RESOURCE_TYPE = "Extension";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_VALUEBASE64BINARY = "valueBase64Binary";
    public static final String PROPERTY_VALUEBOOLEAN = "valueBoolean";
    public static final String PROPERTY_VALUECANONICAL = "valueCanonical";
    public static final String PROPERTY_VALUECODE = "valueCode";
    public static final String PROPERTY_VALUEDATE = "valueDate";
    public static final String PROPERTY_VALUEDATETIME = "valueDateTime";
    public static final String PROPERTY_VALUEDECIMAL = "valueDecimal";
    public static final String PROPERTY_VALUEID = "valueId";
    public static final String PROPERTY_VALUEINSTANT = "valueInstant";
    public static final String PROPERTY_VALUEINTEGER = "valueInteger";
    public static final String PROPERTY_VALUEMARKDOWN = "valueMarkdown";
    public static final String PROPERTY_VALUEOID = "valueOid";
    public static final String PROPERTY_VALUEPOSITIVEINT = "valuePositiveInt";
    public static final String PROPERTY_VALUESTRING = "valueString";
    public static final String PROPERTY_VALUETIME = "valueTime";
    public static final String PROPERTY_VALUEUNSIGNEDINT = "valueUnsignedInt";
    public static final String PROPERTY_VALUEURI = "valueUri";
    public static final String PROPERTY_VALUEURL = "valueUrl";
    public static final String PROPERTY_VALUEUUID = "valueUuid";
    public static final String PROPERTY_VALUEADDRESS = "valueAddress";
    public static final String PROPERTY_VALUEAGE = "valueAge";
    public static final String PROPERTY_VALUEANNOTATION = "valueAnnotation";
    public static final String PROPERTY_VALUEATTACHMENT = "valueAttachment";
    public static final String PROPERTY_VALUECODEABLECONCEPT = "valueCodeableConcept";
    public static final String PROPERTY_VALUECODING = "valueCoding";
    public static final String PROPERTY_VALUECONTACTPOINT = "valueContactPoint";
    public static final String PROPERTY_VALUECOUNT = "valueCount";
    public static final String PROPERTY_VALUEDISTANCE = "valueDistance";
    public static final String PROPERTY_VALUEDURATION = "valueDuration";
    public static final String PROPERTY_VALUEHUMANNAME = "valueHumanName";
    public static final String PROPERTY_VALUEIDENTIFIER = "valueIdentifier";
    public static final String PROPERTY_VALUEMONEY = "valueMoney";
    public static final String PROPERTY_VALUEPERIOD = "valuePeriod";
    public static final String PROPERTY_VALUEQUANTITY = "valueQuantity";
    public static final String PROPERTY_VALUERANGE = "valueRange";
    public static final String PROPERTY_VALUERATIO = "valueRatio";
    public static final String PROPERTY_VALUEREFERENCE = "valueReference";
    public static final String PROPERTY_VALUESAMPLEDDATA = "valueSampledData";
    public static final String PROPERTY_VALUESIGNATURE = "valueSignature";
    public static final String PROPERTY_VALUETIMING = "valueTiming";
    public static final String PROPERTY_VALUECONTACTDETAIL = "valueContactDetail";
    public static final String PROPERTY_VALUECONTRIBUTOR = "valueContributor";
    public static final String PROPERTY_VALUEDATAREQUIREMENT = "valueDataRequirement";
    public static final String PROPERTY_VALUEEXPRESSION = "valueExpression";
    public static final String PROPERTY_VALUEPARAMETERDEFINITION = "valueParameterDefinition";
    public static final String PROPERTY_VALUERELATEDARTIFACT = "valueRelatedArtifact";
    public static final String PROPERTY_VALUETRIGGERDEFINITION = "valueTriggerDefinition";
    public static final String PROPERTY_VALUEUSAGECONTEXT = "valueUsageContext";
    public static final String PROPERTY_VALUEDOSAGE = "valueDosage";
    public static final String PROPERTY_VALUEMETA = "valueMeta";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Extension(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * Source of the definition for the extension code - a logical name or a URL.
     */
    public String url() {
        return getString(PROPERTY_URL);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueBase64Binary() {
        return getString(PROPERTY_VALUEBASE64BINARY);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Boolean valueBoolean() {
        return data.getBoolean(PROPERTY_VALUEBOOLEAN);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueCanonical() {
        return getString(PROPERTY_VALUECANONICAL);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueCode() {
        return getString(PROPERTY_VALUECODE);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueDate() {
        return getString(PROPERTY_VALUEDATE);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueDateTime() {
        return getString(PROPERTY_VALUEDATETIME);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Integer valueDecimal() {
        return data.getInt(PROPERTY_VALUEDECIMAL);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueId() {
        return getString(PROPERTY_VALUEID);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueInstant() {
        return getString(PROPERTY_VALUEINSTANT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Integer valueInteger() {
        return data.getInt(PROPERTY_VALUEINTEGER);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueMarkdown() {
        return getString(PROPERTY_VALUEMARKDOWN);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueOid() {
        return getString(PROPERTY_VALUEOID);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Integer valuePositiveInt() {
        return data.getInt(PROPERTY_VALUEPOSITIVEINT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueString() {
        return getString(PROPERTY_VALUESTRING);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueTime() {
        return getString(PROPERTY_VALUETIME);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Integer valueUnsignedInt() {
        return data.getInt(PROPERTY_VALUEUNSIGNEDINT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueUri() {
        return getString(PROPERTY_VALUEURI);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueUrl() {
        return getString(PROPERTY_VALUEURL);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public String valueUuid() {
        return getString(PROPERTY_VALUEUUID);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Address valueAddress() {
        return getObject(Address.class, PROPERTY_VALUEADDRESS);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Age valueAge() {
        return getObject(Age.class, PROPERTY_VALUEAGE);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Annotation valueAnnotation() {
        return getObject(Annotation.class, PROPERTY_VALUEANNOTATION);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Attachment valueAttachment() {
        return getObject(Attachment.class, PROPERTY_VALUEATTACHMENT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public CodeableConcept valueCodeableConcept() {
        return getObject(CodeableConcept.class, PROPERTY_VALUECODEABLECONCEPT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Coding valueCoding() {
        return getObject(Coding.class, PROPERTY_VALUECODING);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public ContactPoint valueContactPoint() {
        return getObject(ContactPoint.class, PROPERTY_VALUECONTACTPOINT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Count valueCount() {
        return getObject(Count.class, PROPERTY_VALUECOUNT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Distance valueDistance() {
        return getObject(Distance.class, PROPERTY_VALUEDISTANCE);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Duration valueDuration() {
        return getObject(Duration.class, PROPERTY_VALUEDURATION);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public HumanName valueHumanName() {
        return getObject(HumanName.class, PROPERTY_VALUEHUMANNAME);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Identifier valueIdentifier() {
        return getObject(Identifier.class, PROPERTY_VALUEIDENTIFIER);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Money valueMoney() {
        return getObject(Money.class, PROPERTY_VALUEMONEY);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Period valuePeriod() {
        return getObject(Period.class, PROPERTY_VALUEPERIOD);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Quantity valueQuantity() {
        return getObject(Quantity.class, PROPERTY_VALUEQUANTITY);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Range valueRange() {
        return getObject(Range.class, PROPERTY_VALUERANGE);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Ratio valueRatio() {
        return getObject(Ratio.class, PROPERTY_VALUERATIO);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Reference valueReference() {
        return getObject(Reference.class, PROPERTY_VALUEREFERENCE);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public SampledData valueSampledData() {
        return getObject(SampledData.class, PROPERTY_VALUESAMPLEDDATA);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Signature valueSignature() {
        return getObject(Signature.class, PROPERTY_VALUESIGNATURE);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Timing valueTiming() {
        return getObject(Timing.class, PROPERTY_VALUETIMING);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public ContactDetail valueContactDetail() {
        return getObject(ContactDetail.class, PROPERTY_VALUECONTACTDETAIL);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Contributor valueContributor() {
        return getObject(Contributor.class, PROPERTY_VALUECONTRIBUTOR);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public DataRequirement valueDataRequirement() {
        return getObject(DataRequirement.class, PROPERTY_VALUEDATAREQUIREMENT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Expression valueExpression() {
        return getObject(Expression.class, PROPERTY_VALUEEXPRESSION);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public ParameterDefinition valueParameterDefinition() {
        return getObject(ParameterDefinition.class, PROPERTY_VALUEPARAMETERDEFINITION);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public RelatedArtifact valueRelatedArtifact() {
        return getObject(RelatedArtifact.class, PROPERTY_VALUERELATEDARTIFACT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public TriggerDefinition valueTriggerDefinition() {
        return getObject(TriggerDefinition.class, PROPERTY_VALUETRIGGERDEFINITION);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public UsageContext valueUsageContext() {
        return getObject(UsageContext.class, PROPERTY_VALUEUSAGECONTEXT);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Dosage valueDosage() {
        return getObject(Dosage.class, PROPERTY_VALUEDOSAGE);
    }

    /**
     * Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).
     */
    public Meta valueMeta() {
        return getObject(Meta.class, PROPERTY_VALUEMETA);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder url(final String url) {
            b.add(PROPERTY_URL, url);
            return this;
        }

        public Builder valueBase64Binary(final String valueBase64Binary) {
            b.add(PROPERTY_VALUEBASE64BINARY, valueBase64Binary);
            return this;
        }

        public Builder valueBoolean(final Boolean valueBoolean) {
            b.add(PROPERTY_VALUEBOOLEAN, valueBoolean);
            return this;
        }

        public Builder valueCanonical(final String valueCanonical) {
            b.add(PROPERTY_VALUECANONICAL, valueCanonical);
            return this;
        }

        public Builder valueCode(final String valueCode) {
            b.add(PROPERTY_VALUECODE, valueCode);
            return this;
        }

        public Builder valueDate(final String valueDate) {
            b.add(PROPERTY_VALUEDATE, valueDate);
            return this;
        }

        public Builder valueDateTime(final String valueDateTime) {
            b.add(PROPERTY_VALUEDATETIME, valueDateTime);
            return this;
        }

        public Builder valueDecimal(final Integer valueDecimal) {
            b.add(PROPERTY_VALUEDECIMAL, valueDecimal);
            return this;
        }

        public Builder valueId(final String valueId) {
            b.add(PROPERTY_VALUEID, valueId);
            return this;
        }

        public Builder valueInstant(final String valueInstant) {
            b.add(PROPERTY_VALUEINSTANT, valueInstant);
            return this;
        }

        public Builder valueInteger(final Integer valueInteger) {
            b.add(PROPERTY_VALUEINTEGER, valueInteger);
            return this;
        }

        public Builder valueMarkdown(final String valueMarkdown) {
            b.add(PROPERTY_VALUEMARKDOWN, valueMarkdown);
            return this;
        }

        public Builder valueOid(final String valueOid) {
            b.add(PROPERTY_VALUEOID, valueOid);
            return this;
        }

        public Builder valuePositiveInt(final Integer valuePositiveInt) {
            b.add(PROPERTY_VALUEPOSITIVEINT, valuePositiveInt);
            return this;
        }

        public Builder valueString(final String valueString) {
            b.add(PROPERTY_VALUESTRING, valueString);
            return this;
        }

        public Builder valueTime(final String valueTime) {
            b.add(PROPERTY_VALUETIME, valueTime);
            return this;
        }

        public Builder valueUnsignedInt(final Integer valueUnsignedInt) {
            b.add(PROPERTY_VALUEUNSIGNEDINT, valueUnsignedInt);
            return this;
        }

        public Builder valueUri(final String valueUri) {
            b.add(PROPERTY_VALUEURI, valueUri);
            return this;
        }

        public Builder valueUrl(final String valueUrl) {
            b.add(PROPERTY_VALUEURL, valueUrl);
            return this;
        }

        public Builder valueUuid(final String valueUuid) {
            b.add(PROPERTY_VALUEUUID, valueUuid);
            return this;
        }

        public Builder valueAddress(final Address valueAddress) {
            b.add(PROPERTY_VALUEADDRESS, valueAddress);
            return this;
        }

        public Builder valueAge(final Age valueAge) {
            b.add(PROPERTY_VALUEAGE, valueAge);
            return this;
        }

        public Builder valueAnnotation(final Annotation valueAnnotation) {
            b.add(PROPERTY_VALUEANNOTATION, valueAnnotation);
            return this;
        }

        public Builder valueAttachment(final Attachment valueAttachment) {
            b.add(PROPERTY_VALUEATTACHMENT, valueAttachment);
            return this;
        }

        public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
            b.add(PROPERTY_VALUECODEABLECONCEPT, valueCodeableConcept);
            return this;
        }

        public Builder valueCoding(final Coding valueCoding) {
            b.add(PROPERTY_VALUECODING, valueCoding);
            return this;
        }

        public Builder valueContactPoint(final ContactPoint valueContactPoint) {
            b.add(PROPERTY_VALUECONTACTPOINT, valueContactPoint);
            return this;
        }

        public Builder valueCount(final Count valueCount) {
            b.add(PROPERTY_VALUECOUNT, valueCount);
            return this;
        }

        public Builder valueDistance(final Distance valueDistance) {
            b.add(PROPERTY_VALUEDISTANCE, valueDistance);
            return this;
        }

        public Builder valueDuration(final Duration valueDuration) {
            b.add(PROPERTY_VALUEDURATION, valueDuration);
            return this;
        }

        public Builder valueHumanName(final HumanName valueHumanName) {
            b.add(PROPERTY_VALUEHUMANNAME, valueHumanName);
            return this;
        }

        public Builder valueIdentifier(final Identifier valueIdentifier) {
            b.add(PROPERTY_VALUEIDENTIFIER, valueIdentifier);
            return this;
        }

        public Builder valueMoney(final Money valueMoney) {
            b.add(PROPERTY_VALUEMONEY, valueMoney);
            return this;
        }

        public Builder valuePeriod(final Period valuePeriod) {
            b.add(PROPERTY_VALUEPERIOD, valuePeriod);
            return this;
        }

        public Builder valueQuantity(final Quantity valueQuantity) {
            b.add(PROPERTY_VALUEQUANTITY, valueQuantity);
            return this;
        }

        public Builder valueRange(final Range valueRange) {
            b.add(PROPERTY_VALUERANGE, valueRange);
            return this;
        }

        public Builder valueRatio(final Ratio valueRatio) {
            b.add(PROPERTY_VALUERATIO, valueRatio);
            return this;
        }

        public Builder valueReference(final Reference valueReference) {
            b.add(PROPERTY_VALUEREFERENCE, valueReference);
            return this;
        }

        public Builder valueSampledData(final SampledData valueSampledData) {
            b.add(PROPERTY_VALUESAMPLEDDATA, valueSampledData);
            return this;
        }

        public Builder valueSignature(final Signature valueSignature) {
            b.add(PROPERTY_VALUESIGNATURE, valueSignature);
            return this;
        }

        public Builder valueTiming(final Timing valueTiming) {
            b.add(PROPERTY_VALUETIMING, valueTiming);
            return this;
        }

        public Builder valueContactDetail(final ContactDetail valueContactDetail) {
            b.add(PROPERTY_VALUECONTACTDETAIL, valueContactDetail);
            return this;
        }

        public Builder valueContributor(final Contributor valueContributor) {
            b.add(PROPERTY_VALUECONTRIBUTOR, valueContributor);
            return this;
        }

        public Builder valueDataRequirement(final DataRequirement valueDataRequirement) {
            b.add(PROPERTY_VALUEDATAREQUIREMENT, valueDataRequirement);
            return this;
        }

        public Builder valueExpression(final Expression valueExpression) {
            b.add(PROPERTY_VALUEEXPRESSION, valueExpression);
            return this;
        }

        public Builder valueParameterDefinition(final ParameterDefinition valueParameterDefinition) {
            b.add(PROPERTY_VALUEPARAMETERDEFINITION, valueParameterDefinition);
            return this;
        }

        public Builder valueRelatedArtifact(final RelatedArtifact valueRelatedArtifact) {
            b.add(PROPERTY_VALUERELATEDARTIFACT, valueRelatedArtifact);
            return this;
        }

        public Builder valueTriggerDefinition(final TriggerDefinition valueTriggerDefinition) {
            b.add(PROPERTY_VALUETRIGGERDEFINITION, valueTriggerDefinition);
            return this;
        }

        public Builder valueUsageContext(final UsageContext valueUsageContext) {
            b.add(PROPERTY_VALUEUSAGECONTEXT, valueUsageContext);
            return this;
        }

        public Builder valueDosage(final Dosage valueDosage) {
            b.add(PROPERTY_VALUEDOSAGE, valueDosage);
            return this;
        }

        public Builder valueMeta(final Meta valueMeta) {
            b.add(PROPERTY_VALUEMETA, valueMeta);
            return this;
        }

        public Extension build() {
            return new Extension(b.build());
        }
    }
}
