/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class SubstanceReferenceInformation extends FhirResource {
    public static final String RESOURCE_TYPE = "SubstanceReferenceInformation";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_COMMENT = "comment";
    public static final String PROPERTY_GENE = "gene";
    public static final String PROPERTY_GENE_ELEMENT = "geneElement";
    public static final String PROPERTY_CLASSIFICATION = "classification";
    public static final String PROPERTY_TARGET = "target";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public SubstanceReferenceInformation(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Todo.
     */
    public String comment() {
        return getString(PROPERTY_COMMENT);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstanceReferenceInformationGene> gene() {
        return getList(SubstanceReferenceInformationGene.class, PROPERTY_GENE);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstanceReferenceInformationGeneElement> geneElement() {
        return getList(SubstanceReferenceInformationGeneElement.class, PROPERTY_GENE_ELEMENT);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstanceReferenceInformationClassification> classification() {
        return getList(SubstanceReferenceInformationClassification.class, PROPERTY_CLASSIFICATION);
    }

    /**
     * Todo.
     */
    public java.util.List<SubstanceReferenceInformationTarget> target() {
        return getList(SubstanceReferenceInformationTarget.class, PROPERTY_TARGET);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder comment(final String comment) {
            b.add(PROPERTY_COMMENT, comment);
            return this;
        }

        public Builder gene(final java.util.List<SubstanceReferenceInformationGene> gene) {
            b.add(PROPERTY_GENE, FhirObject.toArray(gene));
            return this;
        }

        public Builder geneElement(final java.util.List<SubstanceReferenceInformationGeneElement> geneElement) {
            b.add(PROPERTY_GENE_ELEMENT, FhirObject.toArray(geneElement));
            return this;
        }

        public Builder classification(final java.util.List<SubstanceReferenceInformationClassification> classification) {
            b.add(PROPERTY_CLASSIFICATION, FhirObject.toArray(classification));
            return this;
        }

        public Builder target(final java.util.List<SubstanceReferenceInformationTarget> target) {
            b.add(PROPERTY_TARGET, FhirObject.toArray(target));
            return this;
        }

        public SubstanceReferenceInformation build() {
            return new SubstanceReferenceInformation(b.build());
        }
    }

    public static class SubstanceReferenceInformationClassification extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceReferenceInformationClassification";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_DOMAIN = "domain";
        public static final String PROPERTY_CLASSIFICATION = "classification";
        public static final String PROPERTY_SUBTYPE = "subtype";
        public static final String PROPERTY_SOURCE = "source";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceReferenceInformationClassification(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept domain() {
            return getObject(CodeableConcept.class, PROPERTY_DOMAIN);
        }

        /**
         * Todo.
         */
        public CodeableConcept classification() {
            return getObject(CodeableConcept.class, PROPERTY_CLASSIFICATION);
        }

        /**
         * Todo.
         */
        public java.util.List<CodeableConcept> subtype() {
            return getList(CodeableConcept.class, PROPERTY_SUBTYPE);
        }

        /**
         * Todo.
         */
        public java.util.List<Reference> source() {
            return getList(Reference.class, PROPERTY_SOURCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder domain(final CodeableConcept domain) {
                b.add(PROPERTY_DOMAIN, domain);
                return this;
            }

            public Builder classification(final CodeableConcept classification) {
                b.add(PROPERTY_CLASSIFICATION, classification);
                return this;
            }

            public Builder subtype(final java.util.List<CodeableConcept> subtype) {
                b.add(PROPERTY_SUBTYPE, FhirObject.toArray(subtype));
                return this;
            }

            public Builder source(final java.util.List<Reference> source) {
                b.add(PROPERTY_SOURCE, FhirObject.toArray(source));
                return this;
            }

            public SubstanceReferenceInformationClassification build() {
                return new SubstanceReferenceInformationClassification(b.build());
            }
        }
    }

    public static class SubstanceReferenceInformationGene extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceReferenceInformationGene";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_GENE_SEQUENCE_ORIGIN = "geneSequenceOrigin";
        public static final String PROPERTY_GENE = "gene";
        public static final String PROPERTY_SOURCE = "source";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceReferenceInformationGene(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept geneSequenceOrigin() {
            return getObject(CodeableConcept.class, PROPERTY_GENE_SEQUENCE_ORIGIN);
        }

        /**
         * Todo.
         */
        public CodeableConcept gene() {
            return getObject(CodeableConcept.class, PROPERTY_GENE);
        }

        /**
         * Todo.
         */
        public java.util.List<Reference> source() {
            return getList(Reference.class, PROPERTY_SOURCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder geneSequenceOrigin(final CodeableConcept geneSequenceOrigin) {
                b.add(PROPERTY_GENE_SEQUENCE_ORIGIN, geneSequenceOrigin);
                return this;
            }

            public Builder gene(final CodeableConcept gene) {
                b.add(PROPERTY_GENE, gene);
                return this;
            }

            public Builder source(final java.util.List<Reference> source) {
                b.add(PROPERTY_SOURCE, FhirObject.toArray(source));
                return this;
            }

            public SubstanceReferenceInformationGene build() {
                return new SubstanceReferenceInformationGene(b.build());
            }
        }
    }

    public static class SubstanceReferenceInformationGeneElement extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceReferenceInformationGeneElement";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_ELEMENT = "element";
        public static final String PROPERTY_SOURCE = "source";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceReferenceInformationGeneElement(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Todo.
         */
        public Identifier element() {
            return getObject(Identifier.class, PROPERTY_ELEMENT);
        }

        /**
         * Todo.
         */
        public java.util.List<Reference> source() {
            return getList(Reference.class, PROPERTY_SOURCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder element(final Identifier element) {
                b.add(PROPERTY_ELEMENT, element);
                return this;
            }

            public Builder source(final java.util.List<Reference> source) {
                b.add(PROPERTY_SOURCE, FhirObject.toArray(source));
                return this;
            }

            public SubstanceReferenceInformationGeneElement build() {
                return new SubstanceReferenceInformationGeneElement(b.build());
            }
        }
    }

    public static class SubstanceReferenceInformationTarget extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceReferenceInformationTarget";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_TARGET = "target";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_INTERACTION = "interaction";
        public static final String PROPERTY_ORGANISM = "organism";
        public static final String PROPERTY_ORGANISM_TYPE = "organismType";
        public static final String PROPERTY_AMOUNT_QUANTITY = "amountQuantity";
        public static final String PROPERTY_AMOUNT_RANGE = "amountRange";
        public static final String PROPERTY_AMOUNT_STRING = "amountString";
        public static final String PROPERTY_AMOUNT_TYPE = "amountType";
        public static final String PROPERTY_SOURCE = "source";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceReferenceInformationTarget(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Todo.
         */
        public Identifier target() {
            return getObject(Identifier.class, PROPERTY_TARGET);
        }

        /**
         * Todo.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Todo.
         */
        public CodeableConcept interaction() {
            return getObject(CodeableConcept.class, PROPERTY_INTERACTION);
        }

        /**
         * Todo.
         */
        public CodeableConcept organism() {
            return getObject(CodeableConcept.class, PROPERTY_ORGANISM);
        }

        /**
         * Todo.
         */
        public CodeableConcept organismType() {
            return getObject(CodeableConcept.class, PROPERTY_ORGANISM_TYPE);
        }

        /**
         * Todo.
         */
        public Quantity amountQuantity() {
            return getObject(Quantity.class, PROPERTY_AMOUNT_QUANTITY);
        }

        /**
         * Todo.
         */
        public Range amountRange() {
            return getObject(Range.class, PROPERTY_AMOUNT_RANGE);
        }

        /**
         * Todo.
         */
        public String amountString() {
            return getString(PROPERTY_AMOUNT_STRING);
        }

        /**
         * Todo.
         */
        public CodeableConcept amountType() {
            return getObject(CodeableConcept.class, PROPERTY_AMOUNT_TYPE);
        }

        /**
         * Todo.
         */
        public java.util.List<Reference> source() {
            return getList(Reference.class, PROPERTY_SOURCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder target(final Identifier target) {
                b.add(PROPERTY_TARGET, target);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder interaction(final CodeableConcept interaction) {
                b.add(PROPERTY_INTERACTION, interaction);
                return this;
            }

            public Builder organism(final CodeableConcept organism) {
                b.add(PROPERTY_ORGANISM, organism);
                return this;
            }

            public Builder organismType(final CodeableConcept organismType) {
                b.add(PROPERTY_ORGANISM_TYPE, organismType);
                return this;
            }

            public Builder amountQuantity(final Quantity amountQuantity) {
                b.add(PROPERTY_AMOUNT_QUANTITY, amountQuantity);
                return this;
            }

            public Builder amountRange(final Range amountRange) {
                b.add(PROPERTY_AMOUNT_RANGE, amountRange);
                return this;
            }

            public Builder amountString(final String amountString) {
                b.add(PROPERTY_AMOUNT_STRING, amountString);
                return this;
            }

            public Builder amountType(final CodeableConcept amountType) {
                b.add(PROPERTY_AMOUNT_TYPE, amountType);
                return this;
            }

            public Builder source(final java.util.List<Reference> source) {
                b.add(PROPERTY_SOURCE, FhirObject.toArray(source));
                return this;
            }

            public SubstanceReferenceInformationTarget build() {
                return new SubstanceReferenceInformationTarget(b.build());
            }
        }
    }
}
