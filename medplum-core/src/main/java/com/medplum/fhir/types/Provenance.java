/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Provenance extends FhirResource {
    public static final String RESOURCE_TYPE = "Provenance";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_TARGET = "target";
    public static final String PROPERTY_OCCURRED_PERIOD = "occurredPeriod";
    public static final String PROPERTY_OCCURRED_DATE_TIME = "occurredDateTime";
    public static final String PROPERTY_RECORDED = "recorded";
    public static final String PROPERTY_POLICY = "policy";
    public static final String PROPERTY_LOCATION = "location";
    public static final String PROPERTY_REASON = "reason";
    public static final String PROPERTY_ACTIVITY = "activity";
    public static final String PROPERTY_AGENT = "agent";
    public static final String PROPERTY_ENTITY = "entity";
    public static final String PROPERTY_SIGNATURE = "signature";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Provenance(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * The Reference(s) that were generated or updated by  the activity
     * described in this resource. A provenance can point to more than one
     * target if multiple resources were created/updated by the same
     * activity.
     */
    public java.util.List<Reference> target() {
        return getList(Reference.class, PROPERTY_TARGET);
    }

    /**
     * The period during which the activity occurred.
     */
    public Period occurredPeriod() {
        return getObject(Period.class, PROPERTY_OCCURRED_PERIOD);
    }

    /**
     * The period during which the activity occurred.
     */
    public String occurredDateTime() {
        return getString(PROPERTY_OCCURRED_DATE_TIME);
    }

    /**
     * The instant of time at which the activity was recorded.
     */
    public java.time.Instant recorded() {
        return java.time.Instant.parse(data.getString(PROPERTY_RECORDED));
    }

    /**
     * Policy or plan the activity was defined by. Typically, a single
     * activity may have multiple applicable policy documents, such as
     * patient consent, guarantor funding, etc.
     */
    public java.util.List<String> policy() {
        return getList(String.class, PROPERTY_POLICY);
    }

    /**
     * Where the activity occurred, if relevant.
     */
    public Reference location() {
        return getObject(Reference.class, PROPERTY_LOCATION);
    }

    /**
     * The reason that the activity was taking place.
     */
    public java.util.List<CodeableConcept> reason() {
        return getList(CodeableConcept.class, PROPERTY_REASON);
    }

    /**
     * An activity is something that occurs over a period of time and acts
     * upon or with entities; it may include consuming, processing,
     * transforming, modifying, relocating, using, or generating entities.
     */
    public CodeableConcept activity() {
        return getObject(CodeableConcept.class, PROPERTY_ACTIVITY);
    }

    /**
     * An actor taking a role in an activity  for which it can be assigned
     * some degree of responsibility for the activity taking place.
     */
    public java.util.List<ProvenanceAgent> agent() {
        return getList(ProvenanceAgent.class, PROPERTY_AGENT);
    }

    /**
     * An entity used in this activity.
     */
    public java.util.List<ProvenanceEntity> entity() {
        return getList(ProvenanceEntity.class, PROPERTY_ENTITY);
    }

    /**
     * A digital signature on the target Reference(s). The signer should
     * match a Provenance.agent. The purpose of the signature is indicated.
     */
    public java.util.List<Signature> signature() {
        return getList(Signature.class, PROPERTY_SIGNATURE);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder target(final java.util.List<Reference> target) {
            b.add(PROPERTY_TARGET, FhirObject.toArray(target));
            return this;
        }

        public Builder occurredPeriod(final Period occurredPeriod) {
            b.add(PROPERTY_OCCURRED_PERIOD, occurredPeriod);
            return this;
        }

        public Builder occurredDateTime(final String occurredDateTime) {
            b.add(PROPERTY_OCCURRED_DATE_TIME, occurredDateTime);
            return this;
        }

        public Builder recorded(final java.time.Instant recorded) {
            b.add(PROPERTY_RECORDED, recorded.toString());
            return this;
        }

        public Builder policy(final java.util.List<String> policy) {
            b.add(PROPERTY_POLICY, FhirObject.toStringArray(policy));
            return this;
        }

        public Builder location(final Reference location) {
            b.add(PROPERTY_LOCATION, location);
            return this;
        }

        public Builder reason(final java.util.List<CodeableConcept> reason) {
            b.add(PROPERTY_REASON, FhirObject.toArray(reason));
            return this;
        }

        public Builder activity(final CodeableConcept activity) {
            b.add(PROPERTY_ACTIVITY, activity);
            return this;
        }

        public Builder agent(final java.util.List<ProvenanceAgent> agent) {
            b.add(PROPERTY_AGENT, FhirObject.toArray(agent));
            return this;
        }

        public Builder entity(final java.util.List<ProvenanceEntity> entity) {
            b.add(PROPERTY_ENTITY, FhirObject.toArray(entity));
            return this;
        }

        public Builder signature(final java.util.List<Signature> signature) {
            b.add(PROPERTY_SIGNATURE, FhirObject.toArray(signature));
            return this;
        }

        public Provenance build() {
            return new Provenance(b.build());
        }
    }

    public static class ProvenanceAgent extends FhirObject {
        public static final String RESOURCE_TYPE = "ProvenanceAgent";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_ROLE = "role";
        public static final String PROPERTY_WHO = "who";
        public static final String PROPERTY_ON_BEHALF_OF = "onBehalfOf";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ProvenanceAgent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The participation the agent had with respect to the activity.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * The function of the agent with respect to the activity. The security
         * role enabling the agent with respect to the activity.
         */
        public java.util.List<CodeableConcept> role() {
            return getList(CodeableConcept.class, PROPERTY_ROLE);
        }

        /**
         * The individual, device or organization that participated in the event.
         */
        public Reference who() {
            return getObject(Reference.class, PROPERTY_WHO);
        }

        /**
         * The individual, device, or organization for whom the change was made.
         */
        public Reference onBehalfOf() {
            return getObject(Reference.class, PROPERTY_ON_BEHALF_OF);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder role(final java.util.List<CodeableConcept> role) {
                b.add(PROPERTY_ROLE, FhirObject.toArray(role));
                return this;
            }

            public Builder who(final Reference who) {
                b.add(PROPERTY_WHO, who);
                return this;
            }

            public Builder onBehalfOf(final Reference onBehalfOf) {
                b.add(PROPERTY_ON_BEHALF_OF, onBehalfOf);
                return this;
            }

            public ProvenanceAgent build() {
                return new ProvenanceAgent(b.build());
            }
        }
    }

    public static class ProvenanceEntity extends FhirObject {
        public static final String RESOURCE_TYPE = "ProvenanceEntity";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_ROLE = "role";
        public static final String PROPERTY_WHAT = "what";
        public static final String PROPERTY_AGENT = "agent";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ProvenanceEntity(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * How the entity was used during the activity.
         */
        public String role() {
            return getString(PROPERTY_ROLE);
        }

        /**
         * Identity of the  Entity used. May be a logical or physical uri and
         * maybe absolute or relative.
         */
        public Reference what() {
            return getObject(Reference.class, PROPERTY_WHAT);
        }

        /**
         * The entity is attributed to an agent to express the agent's
         * responsibility for that entity, possibly along with other agents. This
         * description can be understood as shorthand for saying that the agent
         * was responsible for the activity which generated the entity.
         */
        public java.util.List<ProvenanceAgent> agent() {
            return getList(ProvenanceAgent.class, PROPERTY_AGENT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder role(final String role) {
                b.add(PROPERTY_ROLE, role);
                return this;
            }

            public Builder what(final Reference what) {
                b.add(PROPERTY_WHAT, what);
                return this;
            }

            public Builder agent(final java.util.List<ProvenanceAgent> agent) {
                b.add(PROPERTY_AGENT, FhirObject.toArray(agent));
                return this;
            }

            public ProvenanceEntity build() {
                return new ProvenanceEntity(b.build());
            }
        }
    }
}
