/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.JsonObject;

public class DeviceUseStatement extends FhirResource {
    public static final String RESOURCE_TYPE = "DeviceUseStatement";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_BASEDON = "basedOn";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_DERIVEDFROM = "derivedFrom";
    public static final String PROPERTY_TIMINGTIMING = "timingTiming";
    public static final String PROPERTY_TIMINGPERIOD = "timingPeriod";
    public static final String PROPERTY_TIMINGDATETIME = "timingDateTime";
    public static final String PROPERTY_RECORDEDON = "recordedOn";
    public static final String PROPERTY_SOURCE = "source";
    public static final String PROPERTY_DEVICE = "device";
    public static final String PROPERTY_REASONCODE = "reasonCode";
    public static final String PROPERTY_REASONREFERENCE = "reasonReference";
    public static final String PROPERTY_BODYSITE = "bodySite";
    public static final String PROPERTY_NOTE = "note";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DeviceUseStatement(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * An external identifier for this statement such as an IRI.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by
     * this DeviceUseStatement.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASEDON);
    }

    /**
     * A code representing the patient or other source's judgment about the
     * state of the device used that this statement is about.  Generally this
     * will be active or completed.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * The patient who used the device.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * Allows linking the DeviceUseStatement to the underlying Request, or to
     * other information that supports or is used to derive the
     * DeviceUseStatement.
     */
    public java.util.List<Reference> derivedFrom() {
        return getList(Reference.class, PROPERTY_DERIVEDFROM);
    }

    /**
     * How often the device was used.
     */
    public Timing timingTiming() {
        return getObject(Timing.class, PROPERTY_TIMINGTIMING);
    }

    /**
     * How often the device was used.
     */
    public Period timingPeriod() {
        return getObject(Period.class, PROPERTY_TIMINGPERIOD);
    }

    /**
     * How often the device was used.
     */
    public String timingDateTime() {
        return getString(PROPERTY_TIMINGDATETIME);
    }

    /**
     * The time at which the statement was made/recorded.
     */
    public java.time.Instant recordedOn() {
        return java.time.Instant.parse(data.getString(PROPERTY_RECORDEDON));
    }

    /**
     * Who reported the device was being used by the patient.
     */
    public Reference source() {
        return getObject(Reference.class, PROPERTY_SOURCE);
    }

    /**
     * The details of the device used.
     */
    public Reference device() {
        return getObject(Reference.class, PROPERTY_DEVICE);
    }

    /**
     * Reason or justification for the use of the device.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, PROPERTY_REASONCODE);
    }

    /**
     * Indicates another resource whose existence justifies this
     * DeviceUseStatement.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, PROPERTY_REASONREFERENCE);
    }

    /**
     * Indicates the anotomic location on the subject's body where the device
     * was used ( i.e. the target).
     */
    public CodeableConcept bodySite() {
        return getObject(CodeableConcept.class, PROPERTY_BODYSITE);
    }

    /**
     * Details about the device statement that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated
     * with the statement.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASEDON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder derivedFrom(final java.util.List<Reference> derivedFrom) {
            b.add(PROPERTY_DERIVEDFROM, FhirObject.toArray(derivedFrom));
            return this;
        }

        public Builder timingTiming(final Timing timingTiming) {
            b.add(PROPERTY_TIMINGTIMING, timingTiming);
            return this;
        }

        public Builder timingPeriod(final Period timingPeriod) {
            b.add(PROPERTY_TIMINGPERIOD, timingPeriod);
            return this;
        }

        public Builder timingDateTime(final String timingDateTime) {
            b.add(PROPERTY_TIMINGDATETIME, timingDateTime);
            return this;
        }

        public Builder recordedOn(final java.time.Instant recordedOn) {
            b.add(PROPERTY_RECORDEDON, recordedOn.toString());
            return this;
        }

        public Builder source(final Reference source) {
            b.add(PROPERTY_SOURCE, source);
            return this;
        }

        public Builder device(final Reference device) {
            b.add(PROPERTY_DEVICE, device);
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(PROPERTY_REASONCODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(PROPERTY_REASONREFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder bodySite(final CodeableConcept bodySite) {
            b.add(PROPERTY_BODYSITE, bodySite);
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public DeviceUseStatement build() {
            return new DeviceUseStatement(b.build());
        }
    }
}
