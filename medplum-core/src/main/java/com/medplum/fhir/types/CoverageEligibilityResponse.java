/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class CoverageEligibilityResponse extends FhirResource {
    public static final String RESOURCE_TYPE = "CoverageEligibilityResponse";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_PURPOSE = "purpose";
    public static final String PROPERTY_PATIENT = "patient";
    public static final String PROPERTY_SERVICEDDATE = "servicedDate";
    public static final String PROPERTY_SERVICEDPERIOD = "servicedPeriod";
    public static final String PROPERTY_CREATED = "created";
    public static final String PROPERTY_REQUESTOR = "requestor";
    public static final String PROPERTY_REQUEST = "request";
    public static final String PROPERTY_OUTCOME = "outcome";
    public static final String PROPERTY_DISPOSITION = "disposition";
    public static final String PROPERTY_INSURER = "insurer";
    public static final String PROPERTY_INSURANCE = "insurance";
    public static final String PROPERTY_PREAUTHREF = "preAuthRef";
    public static final String PROPERTY_FORM = "form";
    public static final String PROPERTY_ERROR = "error";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public CoverageEligibilityResponse(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * A unique identifier assigned to this coverage eligiblity request.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The status of the resource instance.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Code to specify whether requesting: prior authorization requirements for some service categories or billing codes; benefits for coverages specified or discovered; discovery and return of coverages for the patient; and/or validation that the specified coverage is in-force at the date/period specified or 'now' if not specified.
     */
    public java.util.List<String> purpose() {
        return getList(String.class, PROPERTY_PURPOSE);
    }

    /**
     * The party who is the beneficiary of the supplied coverage and for whom eligibility is sought.
     */
    public Reference patient() {
        return getObject(Reference.class, PROPERTY_PATIENT);
    }

    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    public String servicedDate() {
        return getString(PROPERTY_SERVICEDDATE);
    }

    /**
     * The date or dates when the enclosed suite of services were performed or completed.
     */
    public Period servicedPeriod() {
        return getObject(Period.class, PROPERTY_SERVICEDPERIOD);
    }

    /**
     * The date this resource was created.
     */
    public java.time.Instant created() {
        return java.time.Instant.parse(data.getString(PROPERTY_CREATED));
    }

    /**
     * The provider which is responsible for the request.
     */
    public Reference requestor() {
        return getObject(Reference.class, PROPERTY_REQUESTOR);
    }

    /**
     * Reference to the original request resource.
     */
    public Reference request() {
        return getObject(Reference.class, PROPERTY_REQUEST);
    }

    /**
     * The outcome of the request processing.
     */
    public String outcome() {
        return getString(PROPERTY_OUTCOME);
    }

    /**
     * A human readable description of the status of the adjudication.
     */
    public String disposition() {
        return getString(PROPERTY_DISPOSITION);
    }

    /**
     * The Insurer who issued the coverage in question and is the author of the response.
     */
    public Reference insurer() {
        return getObject(Reference.class, PROPERTY_INSURER);
    }

    /**
     * Financial instruments for reimbursement for the health care products and services.
     */
    public java.util.List<CoverageEligibilityResponseInsurance> insurance() {
        return getList(CoverageEligibilityResponseInsurance.class, PROPERTY_INSURANCE);
    }

    /**
     * A reference from the Insurer to which these services pertain to be used on further communication and as proof that the request occurred.
     */
    public String preAuthRef() {
        return getString(PROPERTY_PREAUTHREF);
    }

    /**
     * A code for the form to be used for printing the content.
     */
    public CodeableConcept form() {
        return getObject(CodeableConcept.class, PROPERTY_FORM);
    }

    /**
     * Errors encountered during the processing of the request.
     */
    public java.util.List<CoverageEligibilityResponseError> error() {
        return getList(CoverageEligibilityResponseError.class, PROPERTY_ERROR);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder purpose(final java.util.List<String> purpose) {
            b.add(PROPERTY_PURPOSE, FhirObject.toStringArray(purpose));
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder servicedDate(final String servicedDate) {
            b.add(PROPERTY_SERVICEDDATE, servicedDate);
            return this;
        }

        public Builder servicedPeriod(final Period servicedPeriod) {
            b.add(PROPERTY_SERVICEDPERIOD, servicedPeriod);
            return this;
        }

        public Builder created(final java.time.Instant created) {
            b.add(PROPERTY_CREATED, created.toString());
            return this;
        }

        public Builder requestor(final Reference requestor) {
            b.add(PROPERTY_REQUESTOR, requestor);
            return this;
        }

        public Builder request(final Reference request) {
            b.add(PROPERTY_REQUEST, request);
            return this;
        }

        public Builder outcome(final String outcome) {
            b.add(PROPERTY_OUTCOME, outcome);
            return this;
        }

        public Builder disposition(final String disposition) {
            b.add(PROPERTY_DISPOSITION, disposition);
            return this;
        }

        public Builder insurer(final Reference insurer) {
            b.add(PROPERTY_INSURER, insurer);
            return this;
        }

        public Builder insurance(final java.util.List<CoverageEligibilityResponseInsurance> insurance) {
            b.add(PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder preAuthRef(final String preAuthRef) {
            b.add(PROPERTY_PREAUTHREF, preAuthRef);
            return this;
        }

        public Builder form(final CodeableConcept form) {
            b.add(PROPERTY_FORM, form);
            return this;
        }

        public Builder error(final java.util.List<CoverageEligibilityResponseError> error) {
            b.add(PROPERTY_ERROR, FhirObject.toArray(error));
            return this;
        }

        public CoverageEligibilityResponse build() {
            return new CoverageEligibilityResponse(b.build());
        }
    }

    public static class CoverageEligibilityResponseBenefit extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageEligibilityResponseBenefit";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_ALLOWEDUNSIGNEDINT = "allowedUnsignedInt";
        public static final String PROPERTY_ALLOWEDSTRING = "allowedString";
        public static final String PROPERTY_ALLOWEDMONEY = "allowedMoney";
        public static final String PROPERTY_USEDUNSIGNEDINT = "usedUnsignedInt";
        public static final String PROPERTY_USEDSTRING = "usedString";
        public static final String PROPERTY_USEDMONEY = "usedMoney";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageEligibilityResponseBenefit(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Classification of benefit being provided.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        public Integer allowedUnsignedInt() {
            return data.getInt(PROPERTY_ALLOWEDUNSIGNEDINT);
        }

        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        public String allowedString() {
            return getString(PROPERTY_ALLOWEDSTRING);
        }

        /**
         * The quantity of the benefit which is permitted under the coverage.
         */
        public Money allowedMoney() {
            return getObject(Money.class, PROPERTY_ALLOWEDMONEY);
        }

        /**
         * The quantity of the benefit which have been consumed to date.
         */
        public Integer usedUnsignedInt() {
            return data.getInt(PROPERTY_USEDUNSIGNEDINT);
        }

        /**
         * The quantity of the benefit which have been consumed to date.
         */
        public String usedString() {
            return getString(PROPERTY_USEDSTRING);
        }

        /**
         * The quantity of the benefit which have been consumed to date.
         */
        public Money usedMoney() {
            return getObject(Money.class, PROPERTY_USEDMONEY);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder allowedUnsignedInt(final Integer allowedUnsignedInt) {
                b.add(PROPERTY_ALLOWEDUNSIGNEDINT, allowedUnsignedInt);
                return this;
            }

            public Builder allowedString(final String allowedString) {
                b.add(PROPERTY_ALLOWEDSTRING, allowedString);
                return this;
            }

            public Builder allowedMoney(final Money allowedMoney) {
                b.add(PROPERTY_ALLOWEDMONEY, allowedMoney);
                return this;
            }

            public Builder usedUnsignedInt(final Integer usedUnsignedInt) {
                b.add(PROPERTY_USEDUNSIGNEDINT, usedUnsignedInt);
                return this;
            }

            public Builder usedString(final String usedString) {
                b.add(PROPERTY_USEDSTRING, usedString);
                return this;
            }

            public Builder usedMoney(final Money usedMoney) {
                b.add(PROPERTY_USEDMONEY, usedMoney);
                return this;
            }

            public CoverageEligibilityResponseBenefit build() {
                return new CoverageEligibilityResponseBenefit(b.build());
            }
        }
    }

    public static class CoverageEligibilityResponseError extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageEligibilityResponseError";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_CODE = "code";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageEligibilityResponseError(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * An error code,from a specified code system, which details why the eligibility check could not be performed.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, PROPERTY_CODE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public CoverageEligibilityResponseError build() {
                return new CoverageEligibilityResponseError(b.build());
            }
        }
    }

    public static class CoverageEligibilityResponseInsurance extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageEligibilityResponseInsurance";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_COVERAGE = "coverage";
        public static final String PROPERTY_INFORCE = "inforce";
        public static final String PROPERTY_BENEFITPERIOD = "benefitPeriod";
        public static final String PROPERTY_ITEM = "item";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageEligibilityResponseInsurance(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
         */
        public Reference coverage() {
            return getObject(Reference.class, PROPERTY_COVERAGE);
        }

        /**
         * Flag indicating if the coverage provided is inforce currently if no service date(s) specified or for the whole duration of the service dates.
         */
        public Boolean inforce() {
            return data.getBoolean(PROPERTY_INFORCE);
        }

        /**
         * The term of the benefits documented in this response.
         */
        public Period benefitPeriod() {
            return getObject(Period.class, PROPERTY_BENEFITPERIOD);
        }

        /**
         * Benefits and optionally current balances, and authorization details by category or service.
         */
        public java.util.List<CoverageEligibilityResponseItem> item() {
            return getList(CoverageEligibilityResponseItem.class, PROPERTY_ITEM);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder coverage(final Reference coverage) {
                b.add(PROPERTY_COVERAGE, coverage);
                return this;
            }

            public Builder inforce(final Boolean inforce) {
                b.add(PROPERTY_INFORCE, inforce);
                return this;
            }

            public Builder benefitPeriod(final Period benefitPeriod) {
                b.add(PROPERTY_BENEFITPERIOD, benefitPeriod);
                return this;
            }

            public Builder item(final java.util.List<CoverageEligibilityResponseItem> item) {
                b.add(PROPERTY_ITEM, FhirObject.toArray(item));
                return this;
            }

            public CoverageEligibilityResponseInsurance build() {
                return new CoverageEligibilityResponseInsurance(b.build());
            }
        }
    }

    public static class CoverageEligibilityResponseItem extends FhirObject {
        public static final String RESOURCE_TYPE = "CoverageEligibilityResponseItem";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_CATEGORY = "category";
        public static final String PROPERTY_PRODUCTORSERVICE = "productOrService";
        public static final String PROPERTY_MODIFIER = "modifier";
        public static final String PROPERTY_PROVIDER = "provider";
        public static final String PROPERTY_EXCLUDED = "excluded";
        public static final String PROPERTY_NAME = "name";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_NETWORK = "network";
        public static final String PROPERTY_UNIT = "unit";
        public static final String PROPERTY_TERM = "term";
        public static final String PROPERTY_BENEFIT = "benefit";
        public static final String PROPERTY_AUTHORIZATIONREQUIRED = "authorizationRequired";
        public static final String PROPERTY_AUTHORIZATIONSUPPORTING = "authorizationSupporting";
        public static final String PROPERTY_AUTHORIZATIONURL = "authorizationUrl";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CoverageEligibilityResponseItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Code to identify the general type of benefits under which products and services are provided.
         */
        public CodeableConcept category() {
            return getObject(CodeableConcept.class, PROPERTY_CATEGORY);
        }

        /**
         * This contains the product, service, drug or other billing code for the item.
         */
        public CodeableConcept productOrService() {
            return getObject(CodeableConcept.class, PROPERTY_PRODUCTORSERVICE);
        }

        /**
         * Item typification or modifiers codes to convey additional context for the product or service.
         */
        public java.util.List<CodeableConcept> modifier() {
            return getList(CodeableConcept.class, PROPERTY_MODIFIER);
        }

        /**
         * The practitioner who is eligible for the provision of the product or service.
         */
        public Reference provider() {
            return getObject(Reference.class, PROPERTY_PROVIDER);
        }

        /**
         * True if the indicated class of service is excluded from the plan, missing or False indicates the product or service is included in the coverage.
         */
        public Boolean excluded() {
            return data.getBoolean(PROPERTY_EXCLUDED);
        }

        /**
         * A short name or tag for the benefit.
         */
        public String name() {
            return getString(PROPERTY_NAME);
        }

        /**
         * A richer description of the benefit or services covered.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * Is a flag to indicate whether the benefits refer to in-network providers or out-of-network providers.
         */
        public CodeableConcept network() {
            return getObject(CodeableConcept.class, PROPERTY_NETWORK);
        }

        /**
         * Indicates if the benefits apply to an individual or to the family.
         */
        public CodeableConcept unit() {
            return getObject(CodeableConcept.class, PROPERTY_UNIT);
        }

        /**
         * The term or period of the values such as 'maximum lifetime benefit' or 'maximum annual visits'.
         */
        public CodeableConcept term() {
            return getObject(CodeableConcept.class, PROPERTY_TERM);
        }

        /**
         * Benefits used to date.
         */
        public java.util.List<CoverageEligibilityResponseBenefit> benefit() {
            return getList(CoverageEligibilityResponseBenefit.class, PROPERTY_BENEFIT);
        }

        /**
         * A boolean flag indicating whether a preauthorization is required prior to actual service delivery.
         */
        public Boolean authorizationRequired() {
            return data.getBoolean(PROPERTY_AUTHORIZATIONREQUIRED);
        }

        /**
         * Codes or comments regarding information or actions associated with the preauthorization.
         */
        public java.util.List<CodeableConcept> authorizationSupporting() {
            return getList(CodeableConcept.class, PROPERTY_AUTHORIZATIONSUPPORTING);
        }

        /**
         * A web location for obtaining requirements or descriptive information regarding the preauthorization.
         */
        public String authorizationUrl() {
            return getString(PROPERTY_AUTHORIZATIONURL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder category(final CodeableConcept category) {
                b.add(PROPERTY_CATEGORY, category);
                return this;
            }

            public Builder productOrService(final CodeableConcept productOrService) {
                b.add(PROPERTY_PRODUCTORSERVICE, productOrService);
                return this;
            }

            public Builder modifier(final java.util.List<CodeableConcept> modifier) {
                b.add(PROPERTY_MODIFIER, FhirObject.toArray(modifier));
                return this;
            }

            public Builder provider(final Reference provider) {
                b.add(PROPERTY_PROVIDER, provider);
                return this;
            }

            public Builder excluded(final Boolean excluded) {
                b.add(PROPERTY_EXCLUDED, excluded);
                return this;
            }

            public Builder name(final String name) {
                b.add(PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder network(final CodeableConcept network) {
                b.add(PROPERTY_NETWORK, network);
                return this;
            }

            public Builder unit(final CodeableConcept unit) {
                b.add(PROPERTY_UNIT, unit);
                return this;
            }

            public Builder term(final CodeableConcept term) {
                b.add(PROPERTY_TERM, term);
                return this;
            }

            public Builder benefit(final java.util.List<CoverageEligibilityResponseBenefit> benefit) {
                b.add(PROPERTY_BENEFIT, FhirObject.toArray(benefit));
                return this;
            }

            public Builder authorizationRequired(final Boolean authorizationRequired) {
                b.add(PROPERTY_AUTHORIZATIONREQUIRED, authorizationRequired);
                return this;
            }

            public Builder authorizationSupporting(final java.util.List<CodeableConcept> authorizationSupporting) {
                b.add(PROPERTY_AUTHORIZATIONSUPPORTING, FhirObject.toArray(authorizationSupporting));
                return this;
            }

            public Builder authorizationUrl(final String authorizationUrl) {
                b.add(PROPERTY_AUTHORIZATIONURL, authorizationUrl);
                return this;
            }

            public CoverageEligibilityResponseItem build() {
                return new CoverageEligibilityResponseItem(b.build());
            }
        }
    }
}
