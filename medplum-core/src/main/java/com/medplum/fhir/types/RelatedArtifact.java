/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class RelatedArtifact extends FhirResource {
    public static final String RESOURCE_TYPE = "RelatedArtifact";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_LABEL = "label";
    public static final String PROPERTY_DISPLAY = "display";
    public static final String PROPERTY_CITATION = "citation";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_DOCUMENT = "document";
    public static final String PROPERTY_RESOURCE = "resource";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public RelatedArtifact(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the element. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * The type of relationship to the related artifact.
     */
    public String type() {
        return getString(PROPERTY_TYPE);
    }

    /**
     * A short label that can be used to reference the citation from
     * elsewhere in the containing artifact, such as a footnote index.
     */
    public String label() {
        return getString(PROPERTY_LABEL);
    }

    /**
     * A brief description of the document or knowledge resource being
     * referenced, suitable for display to a consumer.
     */
    public String display() {
        return getString(PROPERTY_DISPLAY);
    }

    /**
     * A bibliographic citation for the related artifact. This text SHOULD be
     * formatted according to an accepted citation format.
     */
    public String citation() {
        return getString(PROPERTY_CITATION);
    }

    /**
     * A url for the artifact that can be followed to access the actual
     * content.
     */
    public String url() {
        return getString(PROPERTY_URL);
    }

    /**
     * The document being referenced, represented as an attachment. This is
     * exclusive with the resource element.
     */
    public Attachment document() {
        return getObject(Attachment.class, PROPERTY_DOCUMENT);
    }

    /**
     * The related resource, such as a library, value set, profile, or other
     * knowledge resource.
     */
    public String resource() {
        return getString(PROPERTY_RESOURCE);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder type(final String type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder label(final String label) {
            b.add(PROPERTY_LABEL, label);
            return this;
        }

        public Builder display(final String display) {
            b.add(PROPERTY_DISPLAY, display);
            return this;
        }

        public Builder citation(final String citation) {
            b.add(PROPERTY_CITATION, citation);
            return this;
        }

        public Builder url(final String url) {
            b.add(PROPERTY_URL, url);
            return this;
        }

        public Builder document(final Attachment document) {
            b.add(PROPERTY_DOCUMENT, document);
            return this;
        }

        public Builder resource(final String resource) {
            b.add(PROPERTY_RESOURCE, resource);
            return this;
        }

        public RelatedArtifact build() {
            return new RelatedArtifact(b.build());
        }
    }
}
