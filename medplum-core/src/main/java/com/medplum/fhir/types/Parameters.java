/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Parameters extends FhirResource {
    public static final String RESOURCE_TYPE = "Parameters";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_PARAMETER = "parameter";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Parameters(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A parameter passed to or received from the operation.
     */
    public java.util.List<ParametersParameter> parameter() {
        return getList(ParametersParameter.class, PROPERTY_PARAMETER);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder parameter(final java.util.List<ParametersParameter> parameter) {
            b.add(PROPERTY_PARAMETER, FhirObject.toArray(parameter));
            return this;
        }

        public Parameters build() {
            return new Parameters(b.build());
        }
    }

    public static class ParametersParameter extends FhirObject {
        public static final String RESOURCE_TYPE = "ParametersParameter";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_NAME = "name";
        public static final String PROPERTY_VALUEBASE64BINARY = "valueBase64Binary";
        public static final String PROPERTY_VALUEBOOLEAN = "valueBoolean";
        public static final String PROPERTY_VALUECANONICAL = "valueCanonical";
        public static final String PROPERTY_VALUECODE = "valueCode";
        public static final String PROPERTY_VALUEDATE = "valueDate";
        public static final String PROPERTY_VALUEDATETIME = "valueDateTime";
        public static final String PROPERTY_VALUEDECIMAL = "valueDecimal";
        public static final String PROPERTY_VALUEID = "valueId";
        public static final String PROPERTY_VALUEINSTANT = "valueInstant";
        public static final String PROPERTY_VALUEINTEGER = "valueInteger";
        public static final String PROPERTY_VALUEMARKDOWN = "valueMarkdown";
        public static final String PROPERTY_VALUEOID = "valueOid";
        public static final String PROPERTY_VALUEPOSITIVEINT = "valuePositiveInt";
        public static final String PROPERTY_VALUESTRING = "valueString";
        public static final String PROPERTY_VALUETIME = "valueTime";
        public static final String PROPERTY_VALUEUNSIGNEDINT = "valueUnsignedInt";
        public static final String PROPERTY_VALUEURI = "valueUri";
        public static final String PROPERTY_VALUEURL = "valueUrl";
        public static final String PROPERTY_VALUEUUID = "valueUuid";
        public static final String PROPERTY_VALUEADDRESS = "valueAddress";
        public static final String PROPERTY_VALUEAGE = "valueAge";
        public static final String PROPERTY_VALUEANNOTATION = "valueAnnotation";
        public static final String PROPERTY_VALUEATTACHMENT = "valueAttachment";
        public static final String PROPERTY_VALUECODEABLECONCEPT = "valueCodeableConcept";
        public static final String PROPERTY_VALUECODING = "valueCoding";
        public static final String PROPERTY_VALUECONTACTPOINT = "valueContactPoint";
        public static final String PROPERTY_VALUECOUNT = "valueCount";
        public static final String PROPERTY_VALUEDISTANCE = "valueDistance";
        public static final String PROPERTY_VALUEDURATION = "valueDuration";
        public static final String PROPERTY_VALUEHUMANNAME = "valueHumanName";
        public static final String PROPERTY_VALUEIDENTIFIER = "valueIdentifier";
        public static final String PROPERTY_VALUEMONEY = "valueMoney";
        public static final String PROPERTY_VALUEPERIOD = "valuePeriod";
        public static final String PROPERTY_VALUEQUANTITY = "valueQuantity";
        public static final String PROPERTY_VALUERANGE = "valueRange";
        public static final String PROPERTY_VALUERATIO = "valueRatio";
        public static final String PROPERTY_VALUEREFERENCE = "valueReference";
        public static final String PROPERTY_VALUESAMPLEDDATA = "valueSampledData";
        public static final String PROPERTY_VALUESIGNATURE = "valueSignature";
        public static final String PROPERTY_VALUETIMING = "valueTiming";
        public static final String PROPERTY_VALUECONTACTDETAIL = "valueContactDetail";
        public static final String PROPERTY_VALUECONTRIBUTOR = "valueContributor";
        public static final String PROPERTY_VALUEDATAREQUIREMENT = "valueDataRequirement";
        public static final String PROPERTY_VALUEEXPRESSION = "valueExpression";
        public static final String PROPERTY_VALUEPARAMETERDEFINITION = "valueParameterDefinition";
        public static final String PROPERTY_VALUERELATEDARTIFACT = "valueRelatedArtifact";
        public static final String PROPERTY_VALUETRIGGERDEFINITION = "valueTriggerDefinition";
        public static final String PROPERTY_VALUEUSAGECONTEXT = "valueUsageContext";
        public static final String PROPERTY_VALUEDOSAGE = "valueDosage";
        public static final String PROPERTY_VALUEMETA = "valueMeta";
        public static final String PROPERTY_RESOURCE = "resource";
        public static final String PROPERTY_PART = "part";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ParametersParameter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The name of the parameter (reference to the operation definition).
         */
        public String name() {
            return getString(PROPERTY_NAME);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueBase64Binary() {
            return getString(PROPERTY_VALUEBASE64BINARY);
        }

        /**
         * If the parameter is a data type.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(PROPERTY_VALUEBOOLEAN);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueCanonical() {
            return getString(PROPERTY_VALUECANONICAL);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueCode() {
            return getString(PROPERTY_VALUECODE);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueDate() {
            return getString(PROPERTY_VALUEDATE);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueDateTime() {
            return getString(PROPERTY_VALUEDATETIME);
        }

        /**
         * If the parameter is a data type.
         */
        public Integer valueDecimal() {
            return data.getInt(PROPERTY_VALUEDECIMAL);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueId() {
            return getString(PROPERTY_VALUEID);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueInstant() {
            return getString(PROPERTY_VALUEINSTANT);
        }

        /**
         * If the parameter is a data type.
         */
        public Integer valueInteger() {
            return data.getInt(PROPERTY_VALUEINTEGER);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueMarkdown() {
            return getString(PROPERTY_VALUEMARKDOWN);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueOid() {
            return getString(PROPERTY_VALUEOID);
        }

        /**
         * If the parameter is a data type.
         */
        public Integer valuePositiveInt() {
            return data.getInt(PROPERTY_VALUEPOSITIVEINT);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueString() {
            return getString(PROPERTY_VALUESTRING);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueTime() {
            return getString(PROPERTY_VALUETIME);
        }

        /**
         * If the parameter is a data type.
         */
        public Integer valueUnsignedInt() {
            return data.getInt(PROPERTY_VALUEUNSIGNEDINT);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueUri() {
            return getString(PROPERTY_VALUEURI);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueUrl() {
            return getString(PROPERTY_VALUEURL);
        }

        /**
         * If the parameter is a data type.
         */
        public String valueUuid() {
            return getString(PROPERTY_VALUEUUID);
        }

        /**
         * If the parameter is a data type.
         */
        public Address valueAddress() {
            return getObject(Address.class, PROPERTY_VALUEADDRESS);
        }

        /**
         * If the parameter is a data type.
         */
        public Age valueAge() {
            return getObject(Age.class, PROPERTY_VALUEAGE);
        }

        /**
         * If the parameter is a data type.
         */
        public Annotation valueAnnotation() {
            return getObject(Annotation.class, PROPERTY_VALUEANNOTATION);
        }

        /**
         * If the parameter is a data type.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, PROPERTY_VALUEATTACHMENT);
        }

        /**
         * If the parameter is a data type.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_VALUECODEABLECONCEPT);
        }

        /**
         * If the parameter is a data type.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, PROPERTY_VALUECODING);
        }

        /**
         * If the parameter is a data type.
         */
        public ContactPoint valueContactPoint() {
            return getObject(ContactPoint.class, PROPERTY_VALUECONTACTPOINT);
        }

        /**
         * If the parameter is a data type.
         */
        public Count valueCount() {
            return getObject(Count.class, PROPERTY_VALUECOUNT);
        }

        /**
         * If the parameter is a data type.
         */
        public Distance valueDistance() {
            return getObject(Distance.class, PROPERTY_VALUEDISTANCE);
        }

        /**
         * If the parameter is a data type.
         */
        public Duration valueDuration() {
            return getObject(Duration.class, PROPERTY_VALUEDURATION);
        }

        /**
         * If the parameter is a data type.
         */
        public HumanName valueHumanName() {
            return getObject(HumanName.class, PROPERTY_VALUEHUMANNAME);
        }

        /**
         * If the parameter is a data type.
         */
        public Identifier valueIdentifier() {
            return getObject(Identifier.class, PROPERTY_VALUEIDENTIFIER);
        }

        /**
         * If the parameter is a data type.
         */
        public Money valueMoney() {
            return getObject(Money.class, PROPERTY_VALUEMONEY);
        }

        /**
         * If the parameter is a data type.
         */
        public Period valuePeriod() {
            return getObject(Period.class, PROPERTY_VALUEPERIOD);
        }

        /**
         * If the parameter is a data type.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, PROPERTY_VALUEQUANTITY);
        }

        /**
         * If the parameter is a data type.
         */
        public Range valueRange() {
            return getObject(Range.class, PROPERTY_VALUERANGE);
        }

        /**
         * If the parameter is a data type.
         */
        public Ratio valueRatio() {
            return getObject(Ratio.class, PROPERTY_VALUERATIO);
        }

        /**
         * If the parameter is a data type.
         */
        public Reference valueReference() {
            return getObject(Reference.class, PROPERTY_VALUEREFERENCE);
        }

        /**
         * If the parameter is a data type.
         */
        public SampledData valueSampledData() {
            return getObject(SampledData.class, PROPERTY_VALUESAMPLEDDATA);
        }

        /**
         * If the parameter is a data type.
         */
        public Signature valueSignature() {
            return getObject(Signature.class, PROPERTY_VALUESIGNATURE);
        }

        /**
         * If the parameter is a data type.
         */
        public Timing valueTiming() {
            return getObject(Timing.class, PROPERTY_VALUETIMING);
        }

        /**
         * If the parameter is a data type.
         */
        public ContactDetail valueContactDetail() {
            return getObject(ContactDetail.class, PROPERTY_VALUECONTACTDETAIL);
        }

        /**
         * If the parameter is a data type.
         */
        public Contributor valueContributor() {
            return getObject(Contributor.class, PROPERTY_VALUECONTRIBUTOR);
        }

        /**
         * If the parameter is a data type.
         */
        public DataRequirement valueDataRequirement() {
            return getObject(DataRequirement.class, PROPERTY_VALUEDATAREQUIREMENT);
        }

        /**
         * If the parameter is a data type.
         */
        public Expression valueExpression() {
            return getObject(Expression.class, PROPERTY_VALUEEXPRESSION);
        }

        /**
         * If the parameter is a data type.
         */
        public ParameterDefinition valueParameterDefinition() {
            return getObject(ParameterDefinition.class, PROPERTY_VALUEPARAMETERDEFINITION);
        }

        /**
         * If the parameter is a data type.
         */
        public RelatedArtifact valueRelatedArtifact() {
            return getObject(RelatedArtifact.class, PROPERTY_VALUERELATEDARTIFACT);
        }

        /**
         * If the parameter is a data type.
         */
        public TriggerDefinition valueTriggerDefinition() {
            return getObject(TriggerDefinition.class, PROPERTY_VALUETRIGGERDEFINITION);
        }

        /**
         * If the parameter is a data type.
         */
        public UsageContext valueUsageContext() {
            return getObject(UsageContext.class, PROPERTY_VALUEUSAGECONTEXT);
        }

        /**
         * If the parameter is a data type.
         */
        public Dosage valueDosage() {
            return getObject(Dosage.class, PROPERTY_VALUEDOSAGE);
        }

        /**
         * If the parameter is a data type.
         */
        public Meta valueMeta() {
            return getObject(Meta.class, PROPERTY_VALUEMETA);
        }

        /**
         * If the parameter is a whole resource.
         */
        public FhirResource resource() {
            return getObject(FhirResource.class, PROPERTY_RESOURCE);
        }

        public <T extends FhirResource> T resource(final Class<T> c) {
            return getObject(c, PROPERTY_RESOURCE);
        }

        /**
         * A named part of a multi-part parameter.
         */
        public java.util.List<ParametersParameter> part() {
            return getList(ParametersParameter.class, PROPERTY_PART);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(PROPERTY_NAME, name);
                return this;
            }

            public Builder valueBase64Binary(final String valueBase64Binary) {
                b.add(PROPERTY_VALUEBASE64BINARY, valueBase64Binary);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(PROPERTY_VALUEBOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueCanonical(final String valueCanonical) {
                b.add(PROPERTY_VALUECANONICAL, valueCanonical);
                return this;
            }

            public Builder valueCode(final String valueCode) {
                b.add(PROPERTY_VALUECODE, valueCode);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(PROPERTY_VALUEDATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(PROPERTY_VALUEDATETIME, valueDateTime);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(PROPERTY_VALUEDECIMAL, valueDecimal);
                return this;
            }

            public Builder valueId(final String valueId) {
                b.add(PROPERTY_VALUEID, valueId);
                return this;
            }

            public Builder valueInstant(final String valueInstant) {
                b.add(PROPERTY_VALUEINSTANT, valueInstant);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(PROPERTY_VALUEINTEGER, valueInteger);
                return this;
            }

            public Builder valueMarkdown(final String valueMarkdown) {
                b.add(PROPERTY_VALUEMARKDOWN, valueMarkdown);
                return this;
            }

            public Builder valueOid(final String valueOid) {
                b.add(PROPERTY_VALUEOID, valueOid);
                return this;
            }

            public Builder valuePositiveInt(final Integer valuePositiveInt) {
                b.add(PROPERTY_VALUEPOSITIVEINT, valuePositiveInt);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(PROPERTY_VALUESTRING, valueString);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(PROPERTY_VALUETIME, valueTime);
                return this;
            }

            public Builder valueUnsignedInt(final Integer valueUnsignedInt) {
                b.add(PROPERTY_VALUEUNSIGNEDINT, valueUnsignedInt);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(PROPERTY_VALUEURI, valueUri);
                return this;
            }

            public Builder valueUrl(final String valueUrl) {
                b.add(PROPERTY_VALUEURL, valueUrl);
                return this;
            }

            public Builder valueUuid(final String valueUuid) {
                b.add(PROPERTY_VALUEUUID, valueUuid);
                return this;
            }

            public Builder valueAddress(final Address valueAddress) {
                b.add(PROPERTY_VALUEADDRESS, valueAddress);
                return this;
            }

            public Builder valueAge(final Age valueAge) {
                b.add(PROPERTY_VALUEAGE, valueAge);
                return this;
            }

            public Builder valueAnnotation(final Annotation valueAnnotation) {
                b.add(PROPERTY_VALUEANNOTATION, valueAnnotation);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(PROPERTY_VALUEATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(PROPERTY_VALUECODEABLECONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(PROPERTY_VALUECODING, valueCoding);
                return this;
            }

            public Builder valueContactPoint(final ContactPoint valueContactPoint) {
                b.add(PROPERTY_VALUECONTACTPOINT, valueContactPoint);
                return this;
            }

            public Builder valueCount(final Count valueCount) {
                b.add(PROPERTY_VALUECOUNT, valueCount);
                return this;
            }

            public Builder valueDistance(final Distance valueDistance) {
                b.add(PROPERTY_VALUEDISTANCE, valueDistance);
                return this;
            }

            public Builder valueDuration(final Duration valueDuration) {
                b.add(PROPERTY_VALUEDURATION, valueDuration);
                return this;
            }

            public Builder valueHumanName(final HumanName valueHumanName) {
                b.add(PROPERTY_VALUEHUMANNAME, valueHumanName);
                return this;
            }

            public Builder valueIdentifier(final Identifier valueIdentifier) {
                b.add(PROPERTY_VALUEIDENTIFIER, valueIdentifier);
                return this;
            }

            public Builder valueMoney(final Money valueMoney) {
                b.add(PROPERTY_VALUEMONEY, valueMoney);
                return this;
            }

            public Builder valuePeriod(final Period valuePeriod) {
                b.add(PROPERTY_VALUEPERIOD, valuePeriod);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(PROPERTY_VALUEQUANTITY, valueQuantity);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(PROPERTY_VALUERANGE, valueRange);
                return this;
            }

            public Builder valueRatio(final Ratio valueRatio) {
                b.add(PROPERTY_VALUERATIO, valueRatio);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(PROPERTY_VALUEREFERENCE, valueReference);
                return this;
            }

            public Builder valueSampledData(final SampledData valueSampledData) {
                b.add(PROPERTY_VALUESAMPLEDDATA, valueSampledData);
                return this;
            }

            public Builder valueSignature(final Signature valueSignature) {
                b.add(PROPERTY_VALUESIGNATURE, valueSignature);
                return this;
            }

            public Builder valueTiming(final Timing valueTiming) {
                b.add(PROPERTY_VALUETIMING, valueTiming);
                return this;
            }

            public Builder valueContactDetail(final ContactDetail valueContactDetail) {
                b.add(PROPERTY_VALUECONTACTDETAIL, valueContactDetail);
                return this;
            }

            public Builder valueContributor(final Contributor valueContributor) {
                b.add(PROPERTY_VALUECONTRIBUTOR, valueContributor);
                return this;
            }

            public Builder valueDataRequirement(final DataRequirement valueDataRequirement) {
                b.add(PROPERTY_VALUEDATAREQUIREMENT, valueDataRequirement);
                return this;
            }

            public Builder valueExpression(final Expression valueExpression) {
                b.add(PROPERTY_VALUEEXPRESSION, valueExpression);
                return this;
            }

            public Builder valueParameterDefinition(final ParameterDefinition valueParameterDefinition) {
                b.add(PROPERTY_VALUEPARAMETERDEFINITION, valueParameterDefinition);
                return this;
            }

            public Builder valueRelatedArtifact(final RelatedArtifact valueRelatedArtifact) {
                b.add(PROPERTY_VALUERELATEDARTIFACT, valueRelatedArtifact);
                return this;
            }

            public Builder valueTriggerDefinition(final TriggerDefinition valueTriggerDefinition) {
                b.add(PROPERTY_VALUETRIGGERDEFINITION, valueTriggerDefinition);
                return this;
            }

            public Builder valueUsageContext(final UsageContext valueUsageContext) {
                b.add(PROPERTY_VALUEUSAGECONTEXT, valueUsageContext);
                return this;
            }

            public Builder valueDosage(final Dosage valueDosage) {
                b.add(PROPERTY_VALUEDOSAGE, valueDosage);
                return this;
            }

            public Builder valueMeta(final Meta valueMeta) {
                b.add(PROPERTY_VALUEMETA, valueMeta);
                return this;
            }

            public Builder resource(final JsonObject resource) {
                b.add(PROPERTY_RESOURCE, resource);
                return this;
            }

            public Builder part(final java.util.List<ParametersParameter> part) {
                b.add(PROPERTY_PART, FhirObject.toArray(part));
                return this;
            }

            public ParametersParameter build() {
                return new ParametersParameter(b.build());
            }
        }
    }
}
