/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class ExampleScenario extends FhirResource {
    public static final String RESOURCE_TYPE = "ExampleScenario";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_VERSION = "version";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_EXPERIMENTAL = "experimental";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_PUBLISHER = "publisher";
    public static final String PROPERTY_CONTACT = "contact";
    public static final String PROPERTY_USECONTEXT = "useContext";
    public static final String PROPERTY_JURISDICTION = "jurisdiction";
    public static final String PROPERTY_COPYRIGHT = "copyright";
    public static final String PROPERTY_PURPOSE = "purpose";
    public static final String PROPERTY_ACTOR = "actor";
    public static final String PROPERTY_INSTANCE = "instance";
    public static final String PROPERTY_PROCESS = "process";
    public static final String PROPERTY_WORKFLOW = "workflow";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ExampleScenario(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * An absolute URI that is used to identify this example scenario when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this example scenario is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the example scenario is stored on different servers.
     */
    public String url() {
        return getString(PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this example scenario when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the example scenario when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the example scenario author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    public String version() {
        return getString(PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the example scenario. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * The status of this example scenario. Enables tracking the life-cycle of the content.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this example scenario is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the example scenario was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the example scenario changes. (e.g. the 'content logical definition').
     */
    public java.time.Instant date() {
        return java.time.Instant.parse(data.getString(PROPERTY_DATE));
    }

    /**
     * The name of the organization or individual that published the example scenario.
     */
    public String publisher() {
        return getString(PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, PROPERTY_CONTACT);
    }

    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate example scenario instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, PROPERTY_USECONTEXT);
    }

    /**
     * A legal or geographic region in which the example scenario is intended to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, PROPERTY_JURISDICTION);
    }

    /**
     * A copyright statement relating to the example scenario and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the example scenario.
     */
    public String copyright() {
        return getString(PROPERTY_COPYRIGHT);
    }

    /**
     * What the example scenario resource is created for. This should not be used to show the business purpose of the scenario itself, but the purpose of documenting a scenario.
     */
    public String purpose() {
        return getString(PROPERTY_PURPOSE);
    }

    /**
     * Actor participating in the resource.
     */
    public java.util.List<ExampleScenarioActor> actor() {
        return getList(ExampleScenarioActor.class, PROPERTY_ACTOR);
    }

    /**
     * Each resource and each version that is present in the workflow.
     */
    public java.util.List<ExampleScenarioInstance> instance() {
        return getList(ExampleScenarioInstance.class, PROPERTY_INSTANCE);
    }

    /**
     * Each major process - a group of operations.
     */
    public java.util.List<ExampleScenarioProcess> process() {
        return getList(ExampleScenarioProcess.class, PROPERTY_PROCESS);
    }

    /**
     * Another nested workflow.
     */
    public java.util.List<String> workflow() {
        return getList(String.class, PROPERTY_WORKFLOW);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder url(final String url) {
            b.add(PROPERTY_URL, url);
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(PROPERTY_USECONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder actor(final java.util.List<ExampleScenarioActor> actor) {
            b.add(PROPERTY_ACTOR, FhirObject.toArray(actor));
            return this;
        }

        public Builder instance(final java.util.List<ExampleScenarioInstance> instance) {
            b.add(PROPERTY_INSTANCE, FhirObject.toArray(instance));
            return this;
        }

        public Builder process(final java.util.List<ExampleScenarioProcess> process) {
            b.add(PROPERTY_PROCESS, FhirObject.toArray(process));
            return this;
        }

        public Builder workflow(final java.util.List<String> workflow) {
            b.add(PROPERTY_WORKFLOW, FhirObject.toStringArray(workflow));
            return this;
        }

        public ExampleScenario build() {
            return new ExampleScenario(b.build());
        }
    }

    public static class ExampleScenarioActor extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioActor";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_ACTORID = "actorId";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_NAME = "name";
        public static final String PROPERTY_DESCRIPTION = "description";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioActor(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * ID or acronym of actor.
         */
        public String actorId() {
            return getString(PROPERTY_ACTORID);
        }

        /**
         * The type of actor - person or system.
         */
        public String type() {
            return getString(PROPERTY_TYPE);
        }

        /**
         * The name of the actor as shown in the page.
         */
        public String name() {
            return getString(PROPERTY_NAME);
        }

        /**
         * The description of the actor.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder actorId(final String actorId) {
                b.add(PROPERTY_ACTORID, actorId);
                return this;
            }

            public Builder type(final String type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder name(final String name) {
                b.add(PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public ExampleScenarioActor build() {
                return new ExampleScenarioActor(b.build());
            }
        }
    }

    public static class ExampleScenarioAlternative extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioAlternative";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_TITLE = "title";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_STEP = "step";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioAlternative(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The label to display for the alternative that gives a sense of the circumstance in which the alternative should be invoked.
         */
        public String title() {
            return getString(PROPERTY_TITLE);
        }

        /**
         * A human-readable description of the alternative explaining when the alternative should occur rather than the base step.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * What happens in each alternative option.
         */
        public java.util.List<ExampleScenarioStep> step() {
            return getList(ExampleScenarioStep.class, PROPERTY_STEP);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder title(final String title) {
                b.add(PROPERTY_TITLE, title);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder step(final java.util.List<ExampleScenarioStep> step) {
                b.add(PROPERTY_STEP, FhirObject.toArray(step));
                return this;
            }

            public ExampleScenarioAlternative build() {
                return new ExampleScenarioAlternative(b.build());
            }
        }
    }

    public static class ExampleScenarioContainedInstance extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioContainedInstance";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_RESOURCEID = "resourceId";
        public static final String PROPERTY_VERSIONID = "versionId";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioContainedInstance(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Each resource contained in the instance.
         */
        public String resourceId() {
            return getString(PROPERTY_RESOURCEID);
        }

        /**
         * A specific version of a resource contained in the instance.
         */
        public String versionId() {
            return getString(PROPERTY_VERSIONID);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder resourceId(final String resourceId) {
                b.add(PROPERTY_RESOURCEID, resourceId);
                return this;
            }

            public Builder versionId(final String versionId) {
                b.add(PROPERTY_VERSIONID, versionId);
                return this;
            }

            public ExampleScenarioContainedInstance build() {
                return new ExampleScenarioContainedInstance(b.build());
            }
        }
    }

    public static class ExampleScenarioInstance extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioInstance";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_RESOURCEID = "resourceId";
        public static final String PROPERTY_RESOURCETYPE = "resourceType";
        public static final String PROPERTY_NAME = "name";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_VERSION = "version";
        public static final String PROPERTY_CONTAINEDINSTANCE = "containedInstance";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioInstance(final JsonObject data) {
            super(data);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The id of the resource for referencing.
         */
        public String resourceId() {
            return getString(PROPERTY_RESOURCEID);
        }

        /**
         * A short name for the resource instance.
         */
        public String name() {
            return getString(PROPERTY_NAME);
        }

        /**
         * Human-friendly description of the resource instance.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * A specific version of the resource.
         */
        public java.util.List<ExampleScenarioVersion> version() {
            return getList(ExampleScenarioVersion.class, PROPERTY_VERSION);
        }

        /**
         * Resources contained in the instance (e.g. the observations contained in a bundle).
         */
        public java.util.List<ExampleScenarioContainedInstance> containedInstance() {
            return getList(ExampleScenarioContainedInstance.class, PROPERTY_CONTAINEDINSTANCE);
        }

        public static class Builder extends FhirResource.Builder {

            private Builder() {
                super(RESOURCE_TYPE);
            }

            private Builder(final JsonObject data) {
                super(RESOURCE_TYPE, data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder resourceId(final String resourceId) {
                b.add(PROPERTY_RESOURCEID, resourceId);
                return this;
            }

            public Builder resourceType(final String resourceType) {
                b.add(PROPERTY_RESOURCETYPE, resourceType);
                return this;
            }

            public Builder name(final String name) {
                b.add(PROPERTY_NAME, name);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder version(final java.util.List<ExampleScenarioVersion> version) {
                b.add(PROPERTY_VERSION, FhirObject.toArray(version));
                return this;
            }

            public Builder containedInstance(final java.util.List<ExampleScenarioContainedInstance> containedInstance) {
                b.add(PROPERTY_CONTAINEDINSTANCE, FhirObject.toArray(containedInstance));
                return this;
            }

            public ExampleScenarioInstance build() {
                return new ExampleScenarioInstance(b.build());
            }
        }
    }

    public static class ExampleScenarioOperation extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioOperation";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_NUMBER = "number";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_NAME = "name";
        public static final String PROPERTY_INITIATOR = "initiator";
        public static final String PROPERTY_RECEIVER = "receiver";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_INITIATORACTIVE = "initiatorActive";
        public static final String PROPERTY_RECEIVERACTIVE = "receiverActive";
        public static final String PROPERTY_REQUEST = "request";
        public static final String PROPERTY_RESPONSE = "response";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioOperation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The sequential number of the interaction, e.g. 1.2.5.
         */
        public String number() {
            return getString(PROPERTY_NUMBER);
        }

        /**
         * The type of operation - CRUD.
         */
        public String type() {
            return getString(PROPERTY_TYPE);
        }

        /**
         * The human-friendly name of the interaction.
         */
        public String name() {
            return getString(PROPERTY_NAME);
        }

        /**
         * Who starts the transaction.
         */
        public String initiator() {
            return getString(PROPERTY_INITIATOR);
        }

        /**
         * Who receives the transaction.
         */
        public String receiver() {
            return getString(PROPERTY_RECEIVER);
        }

        /**
         * A comment to be inserted in the diagram.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * Whether the initiator is deactivated right after the transaction.
         */
        public Boolean initiatorActive() {
            return data.getBoolean(PROPERTY_INITIATORACTIVE);
        }

        /**
         * Whether the receiver is deactivated right after the transaction.
         */
        public Boolean receiverActive() {
            return data.getBoolean(PROPERTY_RECEIVERACTIVE);
        }

        /**
         * Each resource instance used by the initiator.
         */
        public ExampleScenarioContainedInstance request() {
            return getObject(ExampleScenarioContainedInstance.class, PROPERTY_REQUEST);
        }

        /**
         * Each resource instance used by the responder.
         */
        public ExampleScenarioContainedInstance response() {
            return getObject(ExampleScenarioContainedInstance.class, PROPERTY_RESPONSE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder number(final String number) {
                b.add(PROPERTY_NUMBER, number);
                return this;
            }

            public Builder type(final String type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder name(final String name) {
                b.add(PROPERTY_NAME, name);
                return this;
            }

            public Builder initiator(final String initiator) {
                b.add(PROPERTY_INITIATOR, initiator);
                return this;
            }

            public Builder receiver(final String receiver) {
                b.add(PROPERTY_RECEIVER, receiver);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder initiatorActive(final Boolean initiatorActive) {
                b.add(PROPERTY_INITIATORACTIVE, initiatorActive);
                return this;
            }

            public Builder receiverActive(final Boolean receiverActive) {
                b.add(PROPERTY_RECEIVERACTIVE, receiverActive);
                return this;
            }

            public Builder request(final ExampleScenarioContainedInstance request) {
                b.add(PROPERTY_REQUEST, request);
                return this;
            }

            public Builder response(final ExampleScenarioContainedInstance response) {
                b.add(PROPERTY_RESPONSE, response);
                return this;
            }

            public ExampleScenarioOperation build() {
                return new ExampleScenarioOperation(b.build());
            }
        }
    }

    public static class ExampleScenarioProcess extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioProcess";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_TITLE = "title";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_PRECONDITIONS = "preConditions";
        public static final String PROPERTY_POSTCONDITIONS = "postConditions";
        public static final String PROPERTY_STEP = "step";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioProcess(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The diagram title of the group of operations.
         */
        public String title() {
            return getString(PROPERTY_TITLE);
        }

        /**
         * A longer description of the group of operations.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * Description of initial status before the process starts.
         */
        public String preConditions() {
            return getString(PROPERTY_PRECONDITIONS);
        }

        /**
         * Description of final status after the process ends.
         */
        public String postConditions() {
            return getString(PROPERTY_POSTCONDITIONS);
        }

        /**
         * Each step of the process.
         */
        public java.util.List<ExampleScenarioStep> step() {
            return getList(ExampleScenarioStep.class, PROPERTY_STEP);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder title(final String title) {
                b.add(PROPERTY_TITLE, title);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder preConditions(final String preConditions) {
                b.add(PROPERTY_PRECONDITIONS, preConditions);
                return this;
            }

            public Builder postConditions(final String postConditions) {
                b.add(PROPERTY_POSTCONDITIONS, postConditions);
                return this;
            }

            public Builder step(final java.util.List<ExampleScenarioStep> step) {
                b.add(PROPERTY_STEP, FhirObject.toArray(step));
                return this;
            }

            public ExampleScenarioProcess build() {
                return new ExampleScenarioProcess(b.build());
            }
        }
    }

    public static class ExampleScenarioStep extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioStep";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_PROCESS = "process";
        public static final String PROPERTY_PAUSE = "pause";
        public static final String PROPERTY_OPERATION = "operation";
        public static final String PROPERTY_ALTERNATIVE = "alternative";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioStep(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Nested process.
         */
        public java.util.List<ExampleScenarioProcess> process() {
            return getList(ExampleScenarioProcess.class, PROPERTY_PROCESS);
        }

        /**
         * If there is a pause in the flow.
         */
        public Boolean pause() {
            return data.getBoolean(PROPERTY_PAUSE);
        }

        /**
         * Each interaction or action.
         */
        public ExampleScenarioOperation operation() {
            return getObject(ExampleScenarioOperation.class, PROPERTY_OPERATION);
        }

        /**
         * Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
         */
        public java.util.List<ExampleScenarioAlternative> alternative() {
            return getList(ExampleScenarioAlternative.class, PROPERTY_ALTERNATIVE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder process(final java.util.List<ExampleScenarioProcess> process) {
                b.add(PROPERTY_PROCESS, FhirObject.toArray(process));
                return this;
            }

            public Builder pause(final Boolean pause) {
                b.add(PROPERTY_PAUSE, pause);
                return this;
            }

            public Builder operation(final ExampleScenarioOperation operation) {
                b.add(PROPERTY_OPERATION, operation);
                return this;
            }

            public Builder alternative(final java.util.List<ExampleScenarioAlternative> alternative) {
                b.add(PROPERTY_ALTERNATIVE, FhirObject.toArray(alternative));
                return this;
            }

            public ExampleScenarioStep build() {
                return new ExampleScenarioStep(b.build());
            }
        }
    }

    public static class ExampleScenarioVersion extends FhirObject {
        public static final String RESOURCE_TYPE = "ExampleScenarioVersion";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_VERSIONID = "versionId";
        public static final String PROPERTY_DESCRIPTION = "description";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ExampleScenarioVersion(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The identifier of a specific version of a resource.
         */
        public String versionId() {
            return getString(PROPERTY_VERSIONID);
        }

        /**
         * The description of the resource version.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder versionId(final String versionId) {
                b.add(PROPERTY_VERSIONID, versionId);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public ExampleScenarioVersion build() {
                return new ExampleScenarioVersion(b.build());
            }
        }
    }
}
