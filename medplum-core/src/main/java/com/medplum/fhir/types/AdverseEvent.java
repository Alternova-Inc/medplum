/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class AdverseEvent extends FhirResource {
    public static final String RESOURCE_TYPE = "AdverseEvent";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_ACTUALITY = "actuality";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_EVENT = "event";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_DETECTED = "detected";
    public static final String PROPERTY_RECORDEDDATE = "recordedDate";
    public static final String PROPERTY_RESULTINGCONDITION = "resultingCondition";
    public static final String PROPERTY_LOCATION = "location";
    public static final String PROPERTY_SERIOUSNESS = "seriousness";
    public static final String PROPERTY_SEVERITY = "severity";
    public static final String PROPERTY_OUTCOME = "outcome";
    public static final String PROPERTY_RECORDER = "recorder";
    public static final String PROPERTY_CONTRIBUTOR = "contributor";
    public static final String PROPERTY_SUSPECTENTITY = "suspectEntity";
    public static final String PROPERTY_SUBJECTMEDICALHISTORY = "subjectMedicalHistory";
    public static final String PROPERTY_REFERENCEDOCUMENT = "referenceDocument";
    public static final String PROPERTY_STUDY = "study";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public AdverseEvent(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * Business identifiers assigned to this adverse event by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    public Identifier identifier() {
        return getObject(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Whether the event actually happened, or just had the potential to. Note that this is independent of whether anyone was affected or harmed or how severely.
     */
    public String actuality() {
        return getString(PROPERTY_ACTUALITY);
    }

    /**
     * The overall type of event, intended for search and filtering purposes.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, PROPERTY_CATEGORY);
    }

    /**
     * This element defines the specific type of event that occurred or that was prevented from occurring.
     */
    public CodeableConcept event() {
        return getObject(CodeableConcept.class, PROPERTY_EVENT);
    }

    /**
     * This subject or group impacted by the event.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * The Encounter during which AdverseEvent was created or to which the creation of this record is tightly associated.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * The date (and perhaps time) when the adverse event occurred.
     */
    public java.time.Instant date() {
        return java.time.Instant.parse(data.getString(PROPERTY_DATE));
    }

    /**
     * Estimated or actual date the AdverseEvent began, in the opinion of the reporter.
     */
    public java.time.Instant detected() {
        return java.time.Instant.parse(data.getString(PROPERTY_DETECTED));
    }

    /**
     * The date on which the existence of the AdverseEvent was first recorded.
     */
    public java.time.Instant recordedDate() {
        return java.time.Instant.parse(data.getString(PROPERTY_RECORDEDDATE));
    }

    /**
     * Includes information about the reaction that occurred as a result of exposure to a substance (for example, a drug or a chemical).
     */
    public java.util.List<Reference> resultingCondition() {
        return getList(Reference.class, PROPERTY_RESULTINGCONDITION);
    }

    /**
     * The information about where the adverse event occurred.
     */
    public Reference location() {
        return getObject(Reference.class, PROPERTY_LOCATION);
    }

    /**
     * Assessment whether this event was of real importance.
     */
    public CodeableConcept seriousness() {
        return getObject(CodeableConcept.class, PROPERTY_SERIOUSNESS);
    }

    /**
     * Describes the severity of the adverse event, in relation to the subject. Contrast to AdverseEvent.seriousness - a severe rash might not be serious, but a mild heart problem is.
     */
    public CodeableConcept severity() {
        return getObject(CodeableConcept.class, PROPERTY_SEVERITY);
    }

    /**
     * Describes the type of outcome from the adverse event.
     */
    public CodeableConcept outcome() {
        return getObject(CodeableConcept.class, PROPERTY_OUTCOME);
    }

    /**
     * Information on who recorded the adverse event.  May be the patient or a practitioner.
     */
    public Reference recorder() {
        return getObject(Reference.class, PROPERTY_RECORDER);
    }

    /**
     * Parties that may or should contribute or have contributed information to the adverse event, which can consist of one or more activities.  Such information includes information leading to the decision to perform the activity and how to perform the activity (e.g. consultant), information that the activity itself seeks to reveal (e.g. informant of clinical history), or information about what activity was performed (e.g. informant witness).
     */
    public java.util.List<Reference> contributor() {
        return getList(Reference.class, PROPERTY_CONTRIBUTOR);
    }

    /**
     * Describes the entity that is suspected to have caused the adverse event.
     */
    public java.util.List<AdverseEventSuspectEntity> suspectEntity() {
        return getList(AdverseEventSuspectEntity.class, PROPERTY_SUSPECTENTITY);
    }

    /**
     * AdverseEvent.subjectMedicalHistory.
     */
    public java.util.List<Reference> subjectMedicalHistory() {
        return getList(Reference.class, PROPERTY_SUBJECTMEDICALHISTORY);
    }

    /**
     * AdverseEvent.referenceDocument.
     */
    public java.util.List<Reference> referenceDocument() {
        return getList(Reference.class, PROPERTY_REFERENCEDOCUMENT);
    }

    /**
     * AdverseEvent.study.
     */
    public java.util.List<Reference> study() {
        return getList(Reference.class, PROPERTY_STUDY);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final Identifier identifier) {
            b.add(PROPERTY_IDENTIFIER, identifier);
            return this;
        }

        public Builder actuality(final String actuality) {
            b.add(PROPERTY_ACTUALITY, actuality);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder event(final CodeableConcept event) {
            b.add(PROPERTY_EVENT, event);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder detected(final java.time.Instant detected) {
            b.add(PROPERTY_DETECTED, detected.toString());
            return this;
        }

        public Builder recordedDate(final java.time.Instant recordedDate) {
            b.add(PROPERTY_RECORDEDDATE, recordedDate.toString());
            return this;
        }

        public Builder resultingCondition(final java.util.List<Reference> resultingCondition) {
            b.add(PROPERTY_RESULTINGCONDITION, FhirObject.toArray(resultingCondition));
            return this;
        }

        public Builder location(final Reference location) {
            b.add(PROPERTY_LOCATION, location);
            return this;
        }

        public Builder seriousness(final CodeableConcept seriousness) {
            b.add(PROPERTY_SERIOUSNESS, seriousness);
            return this;
        }

        public Builder severity(final CodeableConcept severity) {
            b.add(PROPERTY_SEVERITY, severity);
            return this;
        }

        public Builder outcome(final CodeableConcept outcome) {
            b.add(PROPERTY_OUTCOME, outcome);
            return this;
        }

        public Builder recorder(final Reference recorder) {
            b.add(PROPERTY_RECORDER, recorder);
            return this;
        }

        public Builder contributor(final java.util.List<Reference> contributor) {
            b.add(PROPERTY_CONTRIBUTOR, FhirObject.toArray(contributor));
            return this;
        }

        public Builder suspectEntity(final java.util.List<AdverseEventSuspectEntity> suspectEntity) {
            b.add(PROPERTY_SUSPECTENTITY, FhirObject.toArray(suspectEntity));
            return this;
        }

        public Builder subjectMedicalHistory(final java.util.List<Reference> subjectMedicalHistory) {
            b.add(PROPERTY_SUBJECTMEDICALHISTORY, FhirObject.toArray(subjectMedicalHistory));
            return this;
        }

        public Builder referenceDocument(final java.util.List<Reference> referenceDocument) {
            b.add(PROPERTY_REFERENCEDOCUMENT, FhirObject.toArray(referenceDocument));
            return this;
        }

        public Builder study(final java.util.List<Reference> study) {
            b.add(PROPERTY_STUDY, FhirObject.toArray(study));
            return this;
        }

        public AdverseEvent build() {
            return new AdverseEvent(b.build());
        }
    }

    public static class AdverseEventCausality extends FhirObject {
        public static final String RESOURCE_TYPE = "AdverseEventCausality";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_ASSESSMENT = "assessment";
        public static final String PROPERTY_PRODUCTRELATEDNESS = "productRelatedness";
        public static final String PROPERTY_AUTHOR = "author";
        public static final String PROPERTY_METHOD = "method";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public AdverseEventCausality(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Assessment of if the entity caused the event.
         */
        public CodeableConcept assessment() {
            return getObject(CodeableConcept.class, PROPERTY_ASSESSMENT);
        }

        /**
         * AdverseEvent.suspectEntity.causalityProductRelatedness.
         */
        public String productRelatedness() {
            return getString(PROPERTY_PRODUCTRELATEDNESS);
        }

        /**
         * AdverseEvent.suspectEntity.causalityAuthor.
         */
        public Reference author() {
            return getObject(Reference.class, PROPERTY_AUTHOR);
        }

        /**
         * ProbabilityScale | Bayesian | Checklist.
         */
        public CodeableConcept method() {
            return getObject(CodeableConcept.class, PROPERTY_METHOD);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder assessment(final CodeableConcept assessment) {
                b.add(PROPERTY_ASSESSMENT, assessment);
                return this;
            }

            public Builder productRelatedness(final String productRelatedness) {
                b.add(PROPERTY_PRODUCTRELATEDNESS, productRelatedness);
                return this;
            }

            public Builder author(final Reference author) {
                b.add(PROPERTY_AUTHOR, author);
                return this;
            }

            public Builder method(final CodeableConcept method) {
                b.add(PROPERTY_METHOD, method);
                return this;
            }

            public AdverseEventCausality build() {
                return new AdverseEventCausality(b.build());
            }
        }
    }

    public static class AdverseEventSuspectEntity extends FhirObject {
        public static final String RESOURCE_TYPE = "AdverseEventSuspectEntity";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_INSTANCE = "instance";
        public static final String PROPERTY_CAUSALITY = "causality";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public AdverseEventSuspectEntity(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Identifies the actual instance of what caused the adverse event.  May be a substance, medication, medication administration, medication statement or a device.
         */
        public Reference instance() {
            return getObject(Reference.class, PROPERTY_INSTANCE);
        }

        /**
         * Information on the possible cause of the event.
         */
        public java.util.List<AdverseEventCausality> causality() {
            return getList(AdverseEventCausality.class, PROPERTY_CAUSALITY);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder instance(final Reference instance) {
                b.add(PROPERTY_INSTANCE, instance);
                return this;
            }

            public Builder causality(final java.util.List<AdverseEventCausality> causality) {
                b.add(PROPERTY_CAUSALITY, FhirObject.toArray(causality));
                return this;
            }

            public AdverseEventSuspectEntity build() {
                return new AdverseEventSuspectEntity(b.build());
            }
        }
    }
}
