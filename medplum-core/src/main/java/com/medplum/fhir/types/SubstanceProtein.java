/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class SubstanceProtein extends FhirResource {
    public static final String RESOURCE_TYPE = "SubstanceProtein";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_SEQUENCETYPE = "sequenceType";
    public static final String PROPERTY_NUMBEROFSUBUNITS = "numberOfSubunits";
    public static final String PROPERTY_DISULFIDELINKAGE = "disulfideLinkage";
    public static final String PROPERTY_SUBUNIT = "subunit";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public SubstanceProtein(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * The SubstanceProtein descriptive elements will only be used when a complete or partial amino acid sequence is available or derivable from a nucleic acid sequence.
     */
    public CodeableConcept sequenceType() {
        return getObject(CodeableConcept.class, PROPERTY_SEQUENCETYPE);
    }

    /**
     * Number of linear sequences of amino acids linked through peptide bonds. The number of subunits constituting the SubstanceProtein shall be described. It is possible that the number of subunits can be variable.
     */
    public Integer numberOfSubunits() {
        return data.getInt(PROPERTY_NUMBEROFSUBUNITS);
    }

    /**
     * The disulphide bond between two cysteine residues either on the same subunit or on two different subunits shall be described. The position of the disulfide bonds in the SubstanceProtein shall be listed in increasing order of subunit number and position within subunit followed by the abbreviation of the amino acids involved. The disulfide linkage positions shall actually contain the amino acid Cysteine at the respective positions.
     */
    public java.util.List<String> disulfideLinkage() {
        return getList(String.class, PROPERTY_DISULFIDELINKAGE);
    }

    /**
     * This subclause refers to the description of each subunit constituting the SubstanceProtein. A subunit is a linear sequence of amino acids linked through peptide bonds. The Subunit information shall be provided when the finished SubstanceProtein is a complex of multiple sequences; subunits are not used to delineate domains within a single sequence. Subunits are listed in order of decreasing length; sequences of the same length will be ordered by decreasing molecular weight; subunits that have identical sequences will be repeated multiple times.
     */
    public java.util.List<SubstanceProteinSubunit> subunit() {
        return getList(SubstanceProteinSubunit.class, PROPERTY_SUBUNIT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder sequenceType(final CodeableConcept sequenceType) {
            b.add(PROPERTY_SEQUENCETYPE, sequenceType);
            return this;
        }

        public Builder numberOfSubunits(final Integer numberOfSubunits) {
            b.add(PROPERTY_NUMBEROFSUBUNITS, numberOfSubunits);
            return this;
        }

        public Builder disulfideLinkage(final java.util.List<String> disulfideLinkage) {
            b.add(PROPERTY_DISULFIDELINKAGE, FhirObject.toStringArray(disulfideLinkage));
            return this;
        }

        public Builder subunit(final java.util.List<SubstanceProteinSubunit> subunit) {
            b.add(PROPERTY_SUBUNIT, FhirObject.toArray(subunit));
            return this;
        }

        public SubstanceProtein build() {
            return new SubstanceProtein(b.build());
        }
    }

    public static class SubstanceProteinSubunit extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceProteinSubunit";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_SUBUNIT = "subunit";
        public static final String PROPERTY_SEQUENCE = "sequence";
        public static final String PROPERTY_LENGTH = "length";
        public static final String PROPERTY_SEQUENCEATTACHMENT = "sequenceAttachment";
        public static final String PROPERTY_NTERMINALMODIFICATIONID = "nTerminalModificationId";
        public static final String PROPERTY_NTERMINALMODIFICATION = "nTerminalModification";
        public static final String PROPERTY_CTERMINALMODIFICATIONID = "cTerminalModificationId";
        public static final String PROPERTY_CTERMINALMODIFICATION = "cTerminalModification";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceProteinSubunit(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Index of primary sequences of amino acids linked through peptide bonds in order of decreasing length. Sequences of the same length will be ordered by molecular weight. Subunits that have identical sequences will be repeated and have sequential subscripts.
         */
        public Integer subunit() {
            return data.getInt(PROPERTY_SUBUNIT);
        }

        /**
         * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
         */
        public String sequence() {
            return getString(PROPERTY_SEQUENCE);
        }

        /**
         * Length of linear sequences of amino acids contained in the subunit.
         */
        public Integer length() {
            return data.getInt(PROPERTY_LENGTH);
        }

        /**
         * The sequence information shall be provided enumerating the amino acids from N- to C-terminal end using standard single-letter amino acid codes. Uppercase shall be used for L-amino acids and lowercase for D-amino acids. Transcribed SubstanceProteins will always be described using the translated sequence; for synthetic peptide containing amino acids that are not represented with a single letter code an X should be used within the sequence. The modified amino acids will be distinguished by their position in the sequence.
         */
        public Attachment sequenceAttachment() {
            return getObject(Attachment.class, PROPERTY_SEQUENCEATTACHMENT);
        }

        /**
         * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
         */
        public Identifier nTerminalModificationId() {
            return getObject(Identifier.class, PROPERTY_NTERMINALMODIFICATIONID);
        }

        /**
         * The name of the fragment modified at the N-terminal of the SubstanceProtein shall be specified.
         */
        public String nTerminalModification() {
            return getString(PROPERTY_NTERMINALMODIFICATION);
        }

        /**
         * Unique identifier for molecular fragment modification based on the ISO 11238 Substance ID.
         */
        public Identifier cTerminalModificationId() {
            return getObject(Identifier.class, PROPERTY_CTERMINALMODIFICATIONID);
        }

        /**
         * The modification at the C-terminal shall be specified.
         */
        public String cTerminalModification() {
            return getString(PROPERTY_CTERMINALMODIFICATION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder subunit(final Integer subunit) {
                b.add(PROPERTY_SUBUNIT, subunit);
                return this;
            }

            public Builder sequence(final String sequence) {
                b.add(PROPERTY_SEQUENCE, sequence);
                return this;
            }

            public Builder length(final Integer length) {
                b.add(PROPERTY_LENGTH, length);
                return this;
            }

            public Builder sequenceAttachment(final Attachment sequenceAttachment) {
                b.add(PROPERTY_SEQUENCEATTACHMENT, sequenceAttachment);
                return this;
            }

            public Builder nTerminalModificationId(final Identifier nTerminalModificationId) {
                b.add(PROPERTY_NTERMINALMODIFICATIONID, nTerminalModificationId);
                return this;
            }

            public Builder nTerminalModification(final String nTerminalModification) {
                b.add(PROPERTY_NTERMINALMODIFICATION, nTerminalModification);
                return this;
            }

            public Builder cTerminalModificationId(final Identifier cTerminalModificationId) {
                b.add(PROPERTY_CTERMINALMODIFICATIONID, cTerminalModificationId);
                return this;
            }

            public Builder cTerminalModification(final String cTerminalModification) {
                b.add(PROPERTY_CTERMINALMODIFICATION, cTerminalModification);
                return this;
            }

            public SubstanceProteinSubunit build() {
                return new SubstanceProteinSubunit(b.build());
            }
        }
    }
}
