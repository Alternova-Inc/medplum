/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class AppointmentResponse extends FhirResource {
    public static final String RESOURCE_TYPE = "AppointmentResponse";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_APPOINTMENT = "appointment";
    public static final String PROPERTY_START = "start";
    public static final String PROPERTY_END = "end";
    public static final String PROPERTY_PARTICIPANTTYPE = "participantType";
    public static final String PROPERTY_ACTOR = "actor";
    public static final String PROPERTY_PARTICIPANTSTATUS = "participantStatus";
    public static final String PROPERTY_COMMENT = "comment";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public AppointmentResponse(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Appointment that this response is replying to.
     */
    public Reference appointment() {
        return getObject(Reference.class, PROPERTY_APPOINTMENT);
    }

    /**
     * Date/Time that the appointment is to take place, or requested new start time.
     */
    public java.time.Instant start() {
        return java.time.Instant.parse(data.getString(PROPERTY_START));
    }

    /**
     * This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
     */
    public java.time.Instant end() {
        return java.time.Instant.parse(data.getString(PROPERTY_END));
    }

    /**
     * Role of participant in the appointment.
     */
    public java.util.List<CodeableConcept> participantType() {
        return getList(CodeableConcept.class, PROPERTY_PARTICIPANTTYPE);
    }

    /**
     * A Person, Location, HealthcareService, or Device that is participating in the appointment.
     */
    public Reference actor() {
        return getObject(Reference.class, PROPERTY_ACTOR);
    }

    /**
     * Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
     */
    public String participantStatus() {
        return getString(PROPERTY_PARTICIPANTSTATUS);
    }

    /**
     * Additional comments about the appointment.
     */
    public String comment() {
        return getString(PROPERTY_COMMENT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder appointment(final Reference appointment) {
            b.add(PROPERTY_APPOINTMENT, appointment);
            return this;
        }

        public Builder start(final java.time.Instant start) {
            b.add(PROPERTY_START, start.toString());
            return this;
        }

        public Builder end(final java.time.Instant end) {
            b.add(PROPERTY_END, end.toString());
            return this;
        }

        public Builder participantType(final java.util.List<CodeableConcept> participantType) {
            b.add(PROPERTY_PARTICIPANTTYPE, FhirObject.toArray(participantType));
            return this;
        }

        public Builder actor(final Reference actor) {
            b.add(PROPERTY_ACTOR, actor);
            return this;
        }

        public Builder participantStatus(final String participantStatus) {
            b.add(PROPERTY_PARTICIPANTSTATUS, participantStatus);
            return this;
        }

        public Builder comment(final String comment) {
            b.add(PROPERTY_COMMENT, comment);
            return this;
        }

        public AppointmentResponse build() {
            return new AppointmentResponse(b.build());
        }
    }
}
