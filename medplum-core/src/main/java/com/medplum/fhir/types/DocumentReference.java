/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

/**
 * A reference to a document of any kind for any purpose. Provides
 * metadata about the document so that the document can be discovered and
 * managed. The scope of a document is any seralized object with a
 * mime-type, so includes formal patient centric documents (CDA), cliical
 * notes, scanned paper, and non-patient specific documents like policy
 * text.
 */
public class DocumentReference extends FhirResource {
    public static final String RESOURCE_TYPE = "DocumentReference";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_MASTER_IDENTIFIER = "masterIdentifier";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_DOC_STATUS = "docStatus";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_AUTHOR = "author";
    public static final String PROPERTY_AUTHENTICATOR = "authenticator";
    public static final String PROPERTY_CUSTODIAN = "custodian";
    public static final String PROPERTY_RELATES_TO = "relatesTo";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_SECURITY_LABEL = "securityLabel";
    public static final String PROPERTY_CONTENT = "content";
    public static final String PROPERTY_CONTEXT = "context";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DocumentReference(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Document identifier as assigned by the source of the document. This
     * identifier is specific to this version of the document. This unique
     * identifier may be used elsewhere to identify this version of the
     * document.
     */
    public Identifier masterIdentifier() {
        return getObject(Identifier.class, PROPERTY_MASTER_IDENTIFIER);
    }

    /**
     * Other identifiers associated with the document, including version
     * independent identifiers.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The status of this document reference.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * The status of the underlying document.
     */
    public String docStatus() {
        return getString(PROPERTY_DOC_STATUS);
    }

    /**
     * Specifies the particular kind of document referenced  (e.g. History
     * and Physical, Discharge Summary, Progress Note). This usually equates
     * to the purpose of making the document referenced.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, PROPERTY_TYPE);
    }

    /**
     * A categorization for the type of document referenced - helps for
     * indexing and searching. This may be implied by or derived from the
     * code specified in the DocumentReference.type.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, PROPERTY_CATEGORY);
    }

    /**
     * Who or what the document is about. The document can be about a person,
     * (patient or healthcare practitioner), a device (e.g. a machine) or
     * even a group of subjects (such as a document about a herd of farm
     * animals, or a set of patients that share a common exposure).
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * When the document reference was created.
     */
    public java.time.Instant date() {
        return getInstant(PROPERTY_DATE);
    }

    /**
     * Identifies who is responsible for adding the information to the
     * document.
     */
    public java.util.List<Reference> author() {
        return getList(Reference.class, PROPERTY_AUTHOR);
    }

    /**
     * Which person or organization authenticates that this document is
     * valid.
     */
    public Reference authenticator() {
        return getObject(Reference.class, PROPERTY_AUTHENTICATOR);
    }

    /**
     * Identifies the organization or group who is responsible for ongoing
     * maintenance of and access to the document.
     */
    public Reference custodian() {
        return getObject(Reference.class, PROPERTY_CUSTODIAN);
    }

    /**
     * Relationships that this document has with other document references
     * that already exist.
     */
    public java.util.List<DocumentReferenceRelatesTo> relatesTo() {
        return getList(DocumentReferenceRelatesTo.class, PROPERTY_RELATES_TO);
    }

    /**
     * Human-readable description of the source document.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * A set of Security-Tag codes specifying the level of privacy/security
     * of the Document. Note that DocumentReference.meta.security contains
     * the security labels of the &quot;reference&quot; to the document, while
     * DocumentReference.securityLabel contains a snapshot of the security
     * labels on the document the reference refers to.
     */
    public java.util.List<CodeableConcept> securityLabel() {
        return getList(CodeableConcept.class, PROPERTY_SECURITY_LABEL);
    }

    /**
     * The document and format referenced. There may be multiple content
     * element repetitions, each with a different format.
     */
    public java.util.List<DocumentReferenceContent> content() {
        return getList(DocumentReferenceContent.class, PROPERTY_CONTENT);
    }

    /**
     * The clinical context in which the document was prepared.
     */
    public DocumentReferenceContext context() {
        return getObject(DocumentReferenceContext.class, PROPERTY_CONTEXT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder masterIdentifier(final Identifier masterIdentifier) {
            b.add(PROPERTY_MASTER_IDENTIFIER, masterIdentifier);
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder docStatus(final String docStatus) {
            b.add(PROPERTY_DOC_STATUS, docStatus);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder author(final java.util.List<Reference> author) {
            b.add(PROPERTY_AUTHOR, FhirObject.toArray(author));
            return this;
        }

        public Builder authenticator(final Reference authenticator) {
            b.add(PROPERTY_AUTHENTICATOR, authenticator);
            return this;
        }

        public Builder custodian(final Reference custodian) {
            b.add(PROPERTY_CUSTODIAN, custodian);
            return this;
        }

        public Builder relatesTo(final java.util.List<DocumentReferenceRelatesTo> relatesTo) {
            b.add(PROPERTY_RELATES_TO, FhirObject.toArray(relatesTo));
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder securityLabel(final java.util.List<CodeableConcept> securityLabel) {
            b.add(PROPERTY_SECURITY_LABEL, FhirObject.toArray(securityLabel));
            return this;
        }

        public Builder content(final java.util.List<DocumentReferenceContent> content) {
            b.add(PROPERTY_CONTENT, FhirObject.toArray(content));
            return this;
        }

        public Builder context(final DocumentReferenceContext context) {
            b.add(PROPERTY_CONTEXT, context);
            return this;
        }

        public DocumentReference build() {
            return new DocumentReference(b.build());
        }
    }

    /**
     * A reference to a document of any kind for any purpose. Provides
     * metadata about the document so that the document can be discovered and
     * managed. The scope of a document is any seralized object with a
     * mime-type, so includes formal patient centric documents (CDA), cliical
     * notes, scanned paper, and non-patient specific documents like policy
     * text.
     */
    public static class DocumentReferenceContent extends FhirObject {
        public static final String RESOURCE_TYPE = "DocumentReferenceContent";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_ATTACHMENT = "attachment";
        public static final String PROPERTY_FORMAT = "format";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DocumentReferenceContent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The document or URL of the document along with critical metadata to
         * prove content has integrity.
         */
        public Attachment attachment() {
            return getObject(Attachment.class, PROPERTY_ATTACHMENT);
        }

        /**
         * An identifier of the document encoding, structure, and template that
         * the document conforms to beyond the base format indicated in the
         * mimeType.
         */
        public Coding format() {
            return getObject(Coding.class, PROPERTY_FORMAT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder attachment(final Attachment attachment) {
                b.add(PROPERTY_ATTACHMENT, attachment);
                return this;
            }

            public Builder format(final Coding format) {
                b.add(PROPERTY_FORMAT, format);
                return this;
            }

            public DocumentReferenceContent build() {
                return new DocumentReferenceContent(b.build());
            }
        }
    }

    /**
     * A reference to a document of any kind for any purpose. Provides
     * metadata about the document so that the document can be discovered and
     * managed. The scope of a document is any seralized object with a
     * mime-type, so includes formal patient centric documents (CDA), cliical
     * notes, scanned paper, and non-patient specific documents like policy
     * text.
     */
    public static class DocumentReferenceContext extends FhirObject {
        public static final String RESOURCE_TYPE = "DocumentReferenceContext";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_ENCOUNTER = "encounter";
        public static final String PROPERTY_EVENT = "event";
        public static final String PROPERTY_PERIOD = "period";
        public static final String PROPERTY_FACILITY_TYPE = "facilityType";
        public static final String PROPERTY_PRACTICE_SETTING = "practiceSetting";
        public static final String PROPERTY_SOURCE_PATIENT_INFO = "sourcePatientInfo";
        public static final String PROPERTY_RELATED = "related";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DocumentReferenceContext(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Describes the clinical encounter or type of care that the document
         * content is associated with.
         */
        public java.util.List<Reference> encounter() {
            return getList(Reference.class, PROPERTY_ENCOUNTER);
        }

        /**
         * This list of codes represents the main clinical acts, such as a
         * colonoscopy or an appendectomy, being documented. In some cases, the
         * event is inherent in the type Code, such as a &quot;History and Physical
         * Report&quot; in which the procedure being documented is necessarily a
         * &quot;History and Physical&quot; act.
         */
        public java.util.List<CodeableConcept> event() {
            return getList(CodeableConcept.class, PROPERTY_EVENT);
        }

        /**
         * The time period over which the service that is described by the
         * document was provided.
         */
        public Period period() {
            return getObject(Period.class, PROPERTY_PERIOD);
        }

        /**
         * The kind of facility where the patient was seen.
         */
        public CodeableConcept facilityType() {
            return getObject(CodeableConcept.class, PROPERTY_FACILITY_TYPE);
        }

        /**
         * This property may convey specifics about the practice setting where
         * the content was created, often reflecting the clinical specialty.
         */
        public CodeableConcept practiceSetting() {
            return getObject(CodeableConcept.class, PROPERTY_PRACTICE_SETTING);
        }

        /**
         * The Patient Information as known when the document was published. May
         * be a reference to a version specific, or contained.
         */
        public Reference sourcePatientInfo() {
            return getObject(Reference.class, PROPERTY_SOURCE_PATIENT_INFO);
        }

        /**
         * Related identifiers or resources associated with the
         * DocumentReference.
         */
        public java.util.List<Reference> related() {
            return getList(Reference.class, PROPERTY_RELATED);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder encounter(final java.util.List<Reference> encounter) {
                b.add(PROPERTY_ENCOUNTER, FhirObject.toArray(encounter));
                return this;
            }

            public Builder event(final java.util.List<CodeableConcept> event) {
                b.add(PROPERTY_EVENT, FhirObject.toArray(event));
                return this;
            }

            public Builder period(final Period period) {
                b.add(PROPERTY_PERIOD, period);
                return this;
            }

            public Builder facilityType(final CodeableConcept facilityType) {
                b.add(PROPERTY_FACILITY_TYPE, facilityType);
                return this;
            }

            public Builder practiceSetting(final CodeableConcept practiceSetting) {
                b.add(PROPERTY_PRACTICE_SETTING, practiceSetting);
                return this;
            }

            public Builder sourcePatientInfo(final Reference sourcePatientInfo) {
                b.add(PROPERTY_SOURCE_PATIENT_INFO, sourcePatientInfo);
                return this;
            }

            public Builder related(final java.util.List<Reference> related) {
                b.add(PROPERTY_RELATED, FhirObject.toArray(related));
                return this;
            }

            public DocumentReferenceContext build() {
                return new DocumentReferenceContext(b.build());
            }
        }
    }

    /**
     * A reference to a document of any kind for any purpose. Provides
     * metadata about the document so that the document can be discovered and
     * managed. The scope of a document is any seralized object with a
     * mime-type, so includes formal patient centric documents (CDA), cliical
     * notes, scanned paper, and non-patient specific documents like policy
     * text.
     */
    public static class DocumentReferenceRelatesTo extends FhirObject {
        public static final String RESOURCE_TYPE = "DocumentReferenceRelatesTo";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_TARGET = "target";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DocumentReferenceRelatesTo(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of relationship that this document has with anther document.
         */
        public String code() {
            return getString(PROPERTY_CODE);
        }

        /**
         * The target document of this relationship.
         */
        public Reference target() {
            return getObject(Reference.class, PROPERTY_TARGET);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder target(final Reference target) {
                b.add(PROPERTY_TARGET, target);
                return this;
            }

            public DocumentReferenceRelatesTo build() {
                return new DocumentReferenceRelatesTo(b.build());
            }
        }
    }
}
