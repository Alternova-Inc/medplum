/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

/**
 * A structured set of questions intended to guide the collection of
 * answers from end-users. Questionnaires provide detailed control over
 * order, presentation, phraseology and grouping to allow coherent,
 * consistent data collection.
 */
public class Questionnaire extends FhirResource {
    public static final String RESOURCE_TYPE = "Questionnaire";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_VERSION = "version";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_TITLE = "title";
    public static final String PROPERTY_DERIVED_FROM = "derivedFrom";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_EXPERIMENTAL = "experimental";
    public static final String PROPERTY_SUBJECT_TYPE = "subjectType";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_PUBLISHER = "publisher";
    public static final String PROPERTY_CONTACT = "contact";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_USE_CONTEXT = "useContext";
    public static final String PROPERTY_JURISDICTION = "jurisdiction";
    public static final String PROPERTY_PURPOSE = "purpose";
    public static final String PROPERTY_COPYRIGHT = "copyright";
    public static final String PROPERTY_APPROVAL_DATE = "approvalDate";
    public static final String PROPERTY_LAST_REVIEW_DATE = "lastReviewDate";
    public static final String PROPERTY_EFFECTIVE_PERIOD = "effectivePeriod";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_ITEM = "item";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Questionnaire(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * An absolute URI that is used to identify this questionnaire when it is
     * referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this questionnaire is (or will be) published. This URL can
     * be the target of a canonical reference. It SHALL remain the same when
     * the questionnaire is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this questionnaire when
     * it is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the
     * questionnaire when it is referenced in a specification, model, design
     * or instance. This is an arbitrary value managed by the questionnaire
     * author and is not expected to be globally unique. For example, it
     * might be a timestamp (e.g. yyyymmdd) if a managed version is not
     * available. There is also no expectation that versions can be placed in
     * a lexicographical sequence.
     */
    public String version() {
        return getString(PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the questionnaire. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the questionnaire.
     */
    public String title() {
        return getString(PROPERTY_TITLE);
    }

    /**
     * The URL of a Questionnaire that this Questionnaire is based on.
     */
    public java.util.List<String> derivedFrom() {
        return getList(String.class, PROPERTY_DERIVED_FROM);
    }

    /**
     * The status of this questionnaire. Enables tracking the life-cycle of
     * the content.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this questionnaire is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(PROPERTY_EXPERIMENTAL);
    }

    /**
     * The types of subjects that can be the subject of responses created for
     * the questionnaire.
     */
    public java.util.List<String> subjectType() {
        return getList(String.class, PROPERTY_SUBJECT_TYPE);
    }

    /**
     * The date  (and optionally time) when the questionnaire was published.
     * The date must change when the business version changes and it must
     * change if the status code changes. In addition, it should change when
     * the substantive content of the questionnaire changes.
     */
    public java.time.Instant date() {
        return getInstant(PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the
     * questionnaire.
     */
    public String publisher() {
        return getString(PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the questionnaire from a
     * consumer's perspective.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate questionnaire instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the questionnaire is intended to
     * be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this questionnaire is needed and why it has been
     * designed as it has.
     */
    public String purpose() {
        return getString(PROPERTY_PURPOSE);
    }

    /**
     * A copyright statement relating to the questionnaire and/or its
     * contents. Copyright statements are generally legal restrictions on the
     * use and publishing of the questionnaire.
     */
    public String copyright() {
        return getString(PROPERTY_COPYRIGHT);
    }

    /**
     * The date on which the resource content was approved by the publisher.
     * Approval happens once when the content is officially approved for
     * usage.
     */
    public java.time.LocalDate approvalDate() {
        return getLocalDate(PROPERTY_APPROVAL_DATE);
    }

    /**
     * The date on which the resource content was last reviewed. Review
     * happens periodically after approval but does not change the original
     * approval date.
     */
    public java.time.LocalDate lastReviewDate() {
        return getLocalDate(PROPERTY_LAST_REVIEW_DATE);
    }

    /**
     * The period during which the questionnaire content was or is planned to
     * be in active use.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * An identifier for this question or group of questions in a particular
     * terminology such as LOINC.
     */
    public java.util.List<Coding> code() {
        return getList(Coding.class, PROPERTY_CODE);
    }

    /**
     * A particular question, question grouping or display text that is part
     * of the questionnaire.
     */
    public java.util.List<QuestionnaireItem> item() {
        return getList(QuestionnaireItem.class, PROPERTY_ITEM);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder url(final java.net.URI url) {
            b.add(PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(PROPERTY_TITLE, title);
            return this;
        }

        public Builder derivedFrom(final java.util.List<String> derivedFrom) {
            b.add(PROPERTY_DERIVED_FROM, FhirObject.toStringArray(derivedFrom));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder subjectType(final java.util.List<String> subjectType) {
            b.add(PROPERTY_SUBJECT_TYPE, FhirObject.toStringArray(subjectType));
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder approvalDate(final java.time.LocalDate approvalDate) {
            b.add(PROPERTY_APPROVAL_DATE, approvalDate.toString());
            return this;
        }

        public Builder lastReviewDate(final java.time.LocalDate lastReviewDate) {
            b.add(PROPERTY_LAST_REVIEW_DATE, lastReviewDate.toString());
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder code(final java.util.List<Coding> code) {
            b.add(PROPERTY_CODE, FhirObject.toArray(code));
            return this;
        }

        public Builder item(final java.util.List<QuestionnaireItem> item) {
            b.add(PROPERTY_ITEM, FhirObject.toArray(item));
            return this;
        }

        public Questionnaire build() {
            return new Questionnaire(b.build());
        }
    }

    /**
     * A structured set of questions intended to guide the collection of
     * answers from end-users. Questionnaires provide detailed control over
     * order, presentation, phraseology and grouping to allow coherent,
     * consistent data collection.
     */
    public static class QuestionnaireAnswerOption extends FhirObject {
        public static final String RESOURCE_TYPE = "QuestionnaireAnswerOption";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_VALUE_INTEGER = "valueInteger";
        public static final String PROPERTY_VALUE_DATE = "valueDate";
        public static final String PROPERTY_VALUE_TIME = "valueTime";
        public static final String PROPERTY_VALUE_STRING = "valueString";
        public static final String PROPERTY_VALUE_CODING = "valueCoding";
        public static final String PROPERTY_VALUE_REFERENCE = "valueReference";
        public static final String PROPERTY_INITIAL_SELECTED = "initialSelected";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public QuestionnaireAnswerOption(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A potential answer that's allowed as the answer to this question.
         */
        public Integer valueInteger() {
            return data.getInt(PROPERTY_VALUE_INTEGER);
        }

        /**
         * A potential answer that's allowed as the answer to this question.
         */
        public String valueDate() {
            return getString(PROPERTY_VALUE_DATE);
        }

        /**
         * A potential answer that's allowed as the answer to this question.
         */
        public String valueTime() {
            return getString(PROPERTY_VALUE_TIME);
        }

        /**
         * A potential answer that's allowed as the answer to this question.
         */
        public String valueString() {
            return getString(PROPERTY_VALUE_STRING);
        }

        /**
         * A potential answer that's allowed as the answer to this question.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, PROPERTY_VALUE_CODING);
        }

        /**
         * A potential answer that's allowed as the answer to this question.
         */
        public Reference valueReference() {
            return getObject(Reference.class, PROPERTY_VALUE_REFERENCE);
        }

        /**
         * Indicates whether the answer value is selected when the list of
         * possible answers is initially shown.
         */
        public Boolean initialSelected() {
            return data.getBoolean(PROPERTY_INITIAL_SELECTED);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(PROPERTY_VALUE_INTEGER, valueInteger);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(PROPERTY_VALUE_DATE, valueDate);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(PROPERTY_VALUE_TIME, valueTime);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(PROPERTY_VALUE_CODING, valueCoding);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(PROPERTY_VALUE_REFERENCE, valueReference);
                return this;
            }

            public Builder initialSelected(final Boolean initialSelected) {
                b.add(PROPERTY_INITIAL_SELECTED, initialSelected);
                return this;
            }

            public QuestionnaireAnswerOption build() {
                return new QuestionnaireAnswerOption(b.build());
            }
        }
    }

    /**
     * A structured set of questions intended to guide the collection of
     * answers from end-users. Questionnaires provide detailed control over
     * order, presentation, phraseology and grouping to allow coherent,
     * consistent data collection.
     */
    public static class QuestionnaireEnableWhen extends FhirObject {
        public static final String RESOURCE_TYPE = "QuestionnaireEnableWhen";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_QUESTION = "question";
        public static final String PROPERTY_OPERATOR = "operator";
        public static final String PROPERTY_ANSWER_BOOLEAN = "answerBoolean";
        public static final String PROPERTY_ANSWER_DECIMAL = "answerDecimal";
        public static final String PROPERTY_ANSWER_INTEGER = "answerInteger";
        public static final String PROPERTY_ANSWER_DATE = "answerDate";
        public static final String PROPERTY_ANSWER_DATE_TIME = "answerDateTime";
        public static final String PROPERTY_ANSWER_TIME = "answerTime";
        public static final String PROPERTY_ANSWER_STRING = "answerString";
        public static final String PROPERTY_ANSWER_CODING = "answerCoding";
        public static final String PROPERTY_ANSWER_QUANTITY = "answerQuantity";
        public static final String PROPERTY_ANSWER_REFERENCE = "answerReference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public QuestionnaireEnableWhen(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The linkId for the question whose answer (or lack of answer) governs
         * whether this item is enabled.
         */
        public String question() {
            return getString(PROPERTY_QUESTION);
        }

        /**
         * Specifies the criteria by which the question is enabled.
         */
        public String operator() {
            return getString(PROPERTY_OPERATOR);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public Boolean answerBoolean() {
            return data.getBoolean(PROPERTY_ANSWER_BOOLEAN);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public Integer answerDecimal() {
            return data.getInt(PROPERTY_ANSWER_DECIMAL);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public Integer answerInteger() {
            return data.getInt(PROPERTY_ANSWER_INTEGER);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public String answerDate() {
            return getString(PROPERTY_ANSWER_DATE);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public String answerDateTime() {
            return getString(PROPERTY_ANSWER_DATE_TIME);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public String answerTime() {
            return getString(PROPERTY_ANSWER_TIME);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public String answerString() {
            return getString(PROPERTY_ANSWER_STRING);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public Coding answerCoding() {
            return getObject(Coding.class, PROPERTY_ANSWER_CODING);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public Quantity answerQuantity() {
            return getObject(Quantity.class, PROPERTY_ANSWER_QUANTITY);
        }

        /**
         * A value that the referenced question is tested using the specified
         * operator in order for the item to be enabled.
         */
        public Reference answerReference() {
            return getObject(Reference.class, PROPERTY_ANSWER_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder question(final String question) {
                b.add(PROPERTY_QUESTION, question);
                return this;
            }

            public Builder operator(final String operator) {
                b.add(PROPERTY_OPERATOR, operator);
                return this;
            }

            public Builder answerBoolean(final Boolean answerBoolean) {
                b.add(PROPERTY_ANSWER_BOOLEAN, answerBoolean);
                return this;
            }

            public Builder answerDecimal(final Integer answerDecimal) {
                b.add(PROPERTY_ANSWER_DECIMAL, answerDecimal);
                return this;
            }

            public Builder answerInteger(final Integer answerInteger) {
                b.add(PROPERTY_ANSWER_INTEGER, answerInteger);
                return this;
            }

            public Builder answerDate(final String answerDate) {
                b.add(PROPERTY_ANSWER_DATE, answerDate);
                return this;
            }

            public Builder answerDateTime(final String answerDateTime) {
                b.add(PROPERTY_ANSWER_DATE_TIME, answerDateTime);
                return this;
            }

            public Builder answerTime(final String answerTime) {
                b.add(PROPERTY_ANSWER_TIME, answerTime);
                return this;
            }

            public Builder answerString(final String answerString) {
                b.add(PROPERTY_ANSWER_STRING, answerString);
                return this;
            }

            public Builder answerCoding(final Coding answerCoding) {
                b.add(PROPERTY_ANSWER_CODING, answerCoding);
                return this;
            }

            public Builder answerQuantity(final Quantity answerQuantity) {
                b.add(PROPERTY_ANSWER_QUANTITY, answerQuantity);
                return this;
            }

            public Builder answerReference(final Reference answerReference) {
                b.add(PROPERTY_ANSWER_REFERENCE, answerReference);
                return this;
            }

            public QuestionnaireEnableWhen build() {
                return new QuestionnaireEnableWhen(b.build());
            }
        }
    }

    /**
     * A structured set of questions intended to guide the collection of
     * answers from end-users. Questionnaires provide detailed control over
     * order, presentation, phraseology and grouping to allow coherent,
     * consistent data collection.
     */
    public static class QuestionnaireInitial extends FhirObject {
        public static final String RESOURCE_TYPE = "QuestionnaireInitial";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_VALUE_BOOLEAN = "valueBoolean";
        public static final String PROPERTY_VALUE_DECIMAL = "valueDecimal";
        public static final String PROPERTY_VALUE_INTEGER = "valueInteger";
        public static final String PROPERTY_VALUE_DATE = "valueDate";
        public static final String PROPERTY_VALUE_DATE_TIME = "valueDateTime";
        public static final String PROPERTY_VALUE_TIME = "valueTime";
        public static final String PROPERTY_VALUE_STRING = "valueString";
        public static final String PROPERTY_VALUE_URI = "valueUri";
        public static final String PROPERTY_VALUE_ATTACHMENT = "valueAttachment";
        public static final String PROPERTY_VALUE_CODING = "valueCoding";
        public static final String PROPERTY_VALUE_QUANTITY = "valueQuantity";
        public static final String PROPERTY_VALUE_REFERENCE = "valueReference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public QuestionnaireInitial(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The actual value to for an initial answer.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(PROPERTY_VALUE_BOOLEAN);
        }

        /**
         * The actual value to for an initial answer.
         */
        public Integer valueDecimal() {
            return data.getInt(PROPERTY_VALUE_DECIMAL);
        }

        /**
         * The actual value to for an initial answer.
         */
        public Integer valueInteger() {
            return data.getInt(PROPERTY_VALUE_INTEGER);
        }

        /**
         * The actual value to for an initial answer.
         */
        public String valueDate() {
            return getString(PROPERTY_VALUE_DATE);
        }

        /**
         * The actual value to for an initial answer.
         */
        public String valueDateTime() {
            return getString(PROPERTY_VALUE_DATE_TIME);
        }

        /**
         * The actual value to for an initial answer.
         */
        public String valueTime() {
            return getString(PROPERTY_VALUE_TIME);
        }

        /**
         * The actual value to for an initial answer.
         */
        public String valueString() {
            return getString(PROPERTY_VALUE_STRING);
        }

        /**
         * The actual value to for an initial answer.
         */
        public String valueUri() {
            return getString(PROPERTY_VALUE_URI);
        }

        /**
         * The actual value to for an initial answer.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, PROPERTY_VALUE_ATTACHMENT);
        }

        /**
         * The actual value to for an initial answer.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, PROPERTY_VALUE_CODING);
        }

        /**
         * The actual value to for an initial answer.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, PROPERTY_VALUE_QUANTITY);
        }

        /**
         * The actual value to for an initial answer.
         */
        public Reference valueReference() {
            return getObject(Reference.class, PROPERTY_VALUE_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(PROPERTY_VALUE_DECIMAL, valueDecimal);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(PROPERTY_VALUE_INTEGER, valueInteger);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(PROPERTY_VALUE_DATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(PROPERTY_VALUE_DATE_TIME, valueDateTime);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(PROPERTY_VALUE_TIME, valueTime);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(PROPERTY_VALUE_URI, valueUri);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(PROPERTY_VALUE_ATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(PROPERTY_VALUE_CODING, valueCoding);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(PROPERTY_VALUE_REFERENCE, valueReference);
                return this;
            }

            public QuestionnaireInitial build() {
                return new QuestionnaireInitial(b.build());
            }
        }
    }

    /**
     * A structured set of questions intended to guide the collection of
     * answers from end-users. Questionnaires provide detailed control over
     * order, presentation, phraseology and grouping to allow coherent,
     * consistent data collection.
     */
    public static class QuestionnaireItem extends FhirObject {
        public static final String RESOURCE_TYPE = "QuestionnaireItem";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_LINK_ID = "linkId";
        public static final String PROPERTY_DEFINITION = "definition";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_PREFIX = "prefix";
        public static final String PROPERTY_TEXT = "text";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_ENABLE_WHEN = "enableWhen";
        public static final String PROPERTY_ENABLE_BEHAVIOR = "enableBehavior";
        public static final String PROPERTY_REQUIRED = "required";
        public static final String PROPERTY_REPEATS = "repeats";
        public static final String PROPERTY_READ_ONLY = "readOnly";
        public static final String PROPERTY_MAX_LENGTH = "maxLength";
        public static final String PROPERTY_ANSWER_VALUE_SET = "answerValueSet";
        public static final String PROPERTY_ANSWER_OPTION = "answerOption";
        public static final String PROPERTY_INITIAL = "initial";
        public static final String PROPERTY_ITEM = "item";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public QuestionnaireItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An identifier that is unique within the Questionnaire allowing linkage
         * to the equivalent item in a QuestionnaireResponse resource.
         */
        public String linkId() {
            return getString(PROPERTY_LINK_ID);
        }

        /**
         * This element is a URI that refers to an [[[ElementDefinition]]] that
         * provides information about this item, including information that might
         * otherwise be included in the instance of the Questionnaire resource. A
         * detailed description of the construction of the URI is shown in
         * Comments, below. If this element is present then the following element
         * values MAY be derived from the Element Definition if the corresponding
         * elements of this Questionnaire resource instance have no value:
         *
         * * code (ElementDefinition.code)
         * * type (ElementDefinition.type)
         * * required (ElementDefinition.min)
         * * repeats (ElementDefinition.max)
         * * maxLength (ElementDefinition.maxLength)
         * * answerValueSet (ElementDefinition.binding)
         * * options (ElementDefinition.binding).
         */
        public java.net.URI definition() {
            return getUri(PROPERTY_DEFINITION);
        }

        /**
         * A terminology code that corresponds to this group or question (e.g. a
         * code from LOINC, which defines many questions and answers).
         */
        public java.util.List<Coding> code() {
            return getList(Coding.class, PROPERTY_CODE);
        }

        /**
         * A short label for a particular group, question or set of display text
         * within the questionnaire used for reference by the individual
         * completing the questionnaire.
         */
        public String prefix() {
            return getString(PROPERTY_PREFIX);
        }

        /**
         * The name of a section, the text of a question or text content for a
         * display item.
         */
        public String text() {
            return getString(PROPERTY_TEXT);
        }

        /**
         * The type of questionnaire item this is - whether text for display, a
         * grouping of other items or a particular type of data to be captured
         * (string, integer, coded choice, etc.).
         */
        public String type() {
            return getString(PROPERTY_TYPE);
        }

        /**
         * A constraint indicating that this item should only be enabled
         * (displayed/allow answers to be captured) when the specified condition
         * is true.
         */
        public java.util.List<QuestionnaireEnableWhen> enableWhen() {
            return getList(QuestionnaireEnableWhen.class, PROPERTY_ENABLE_WHEN);
        }

        /**
         * Controls how multiple enableWhen values are interpreted -  whether all
         * or any must be true.
         */
        public String enableBehavior() {
            return getString(PROPERTY_ENABLE_BEHAVIOR);
        }

        /**
         * An indication, if true, that the item must be present in a &quot;completed&quot;
         * QuestionnaireResponse.  If false, the item may be skipped when
         * answering the questionnaire.
         */
        public Boolean required() {
            return data.getBoolean(PROPERTY_REQUIRED);
        }

        /**
         * An indication, if true, that the item may occur multiple times in the
         * response, collecting multiple answers for questions or multiple sets
         * of answers for groups.
         */
        public Boolean repeats() {
            return data.getBoolean(PROPERTY_REPEATS);
        }

        /**
         * An indication, when true, that the value cannot be changed by a human
         * respondent to the Questionnaire.
         */
        public Boolean readOnly() {
            return data.getBoolean(PROPERTY_READ_ONLY);
        }

        /**
         * The maximum number of characters that are permitted in the answer to
         * be considered a &quot;valid&quot; QuestionnaireResponse.
         */
        public Integer maxLength() {
            return data.getInt(PROPERTY_MAX_LENGTH);
        }

        /**
         * A reference to a value set containing a list of codes representing
         * permitted answers for a &quot;choice&quot; or &quot;open-choice&quot; question.
         */
        public String answerValueSet() {
            return getString(PROPERTY_ANSWER_VALUE_SET);
        }

        /**
         * One of the permitted answers for a &quot;choice&quot; or &quot;open-choice&quot; question.
         */
        public java.util.List<QuestionnaireAnswerOption> answerOption() {
            return getList(QuestionnaireAnswerOption.class, PROPERTY_ANSWER_OPTION);
        }

        /**
         * One or more values that should be pre-populated in the answer when
         * initially rendering the questionnaire for user input.
         */
        public java.util.List<QuestionnaireInitial> initial() {
            return getList(QuestionnaireInitial.class, PROPERTY_INITIAL);
        }

        /**
         * Text, questions and other groups to be nested beneath a question or
         * group.
         */
        public java.util.List<QuestionnaireItem> item() {
            return getList(QuestionnaireItem.class, PROPERTY_ITEM);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder linkId(final String linkId) {
                b.add(PROPERTY_LINK_ID, linkId);
                return this;
            }

            public Builder definition(final java.net.URI definition) {
                b.add(PROPERTY_DEFINITION, definition.toString());
                return this;
            }

            public Builder code(final java.util.List<Coding> code) {
                b.add(PROPERTY_CODE, FhirObject.toArray(code));
                return this;
            }

            public Builder prefix(final String prefix) {
                b.add(PROPERTY_PREFIX, prefix);
                return this;
            }

            public Builder text(final String text) {
                b.add(PROPERTY_TEXT, text);
                return this;
            }

            public Builder type(final String type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder enableWhen(final java.util.List<QuestionnaireEnableWhen> enableWhen) {
                b.add(PROPERTY_ENABLE_WHEN, FhirObject.toArray(enableWhen));
                return this;
            }

            public Builder enableBehavior(final String enableBehavior) {
                b.add(PROPERTY_ENABLE_BEHAVIOR, enableBehavior);
                return this;
            }

            public Builder required(final Boolean required) {
                b.add(PROPERTY_REQUIRED, required);
                return this;
            }

            public Builder repeats(final Boolean repeats) {
                b.add(PROPERTY_REPEATS, repeats);
                return this;
            }

            public Builder readOnly(final Boolean readOnly) {
                b.add(PROPERTY_READ_ONLY, readOnly);
                return this;
            }

            public Builder maxLength(final Integer maxLength) {
                b.add(PROPERTY_MAX_LENGTH, maxLength);
                return this;
            }

            public Builder answerValueSet(final String answerValueSet) {
                b.add(PROPERTY_ANSWER_VALUE_SET, answerValueSet);
                return this;
            }

            public Builder answerOption(final java.util.List<QuestionnaireAnswerOption> answerOption) {
                b.add(PROPERTY_ANSWER_OPTION, FhirObject.toArray(answerOption));
                return this;
            }

            public Builder initial(final java.util.List<QuestionnaireInitial> initial) {
                b.add(PROPERTY_INITIAL, FhirObject.toArray(initial));
                return this;
            }

            public Builder item(final java.util.List<QuestionnaireItem> item) {
                b.add(PROPERTY_ITEM, FhirObject.toArray(item));
                return this;
            }

            public QuestionnaireItem build() {
                return new QuestionnaireItem(b.build());
            }
        }
    }
}
