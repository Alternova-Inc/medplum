/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.JsonObject;

public class OrganizationAffiliation extends FhirResource {
    public static final String RESOURCE_TYPE = "OrganizationAffiliation";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_ACTIVE = "active";
    public static final String PROPERTY_PERIOD = "period";
    public static final String PROPERTY_ORGANIZATION = "organization";
    public static final String PROPERTY_PARTICIPATING_ORGANIZATION = "participatingOrganization";
    public static final String PROPERTY_NETWORK = "network";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_SPECIALTY = "specialty";
    public static final String PROPERTY_LOCATION = "location";
    public static final String PROPERTY_HEALTHCARE_SERVICE = "healthcareService";
    public static final String PROPERTY_TELECOM = "telecom";
    public static final String PROPERTY_ENDPOINT = "endpoint";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public OrganizationAffiliation(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Business identifiers that are specific to this role.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Whether this organization affiliation record is in active use.
     */
    public Boolean active() {
        return data.getBoolean(PROPERTY_ACTIVE);
    }

    /**
     * The period during which the participatingOrganization is affiliated
     * with the primary organization.
     */
    public Period period() {
        return getObject(Period.class, PROPERTY_PERIOD);
    }

    /**
     * Organization where the role is available (primary organization/has
     * members).
     */
    public Reference organization() {
        return getObject(Reference.class, PROPERTY_ORGANIZATION);
    }

    /**
     * The Participating Organization provides/performs the role(s) defined
     * by the code to the Primary Organization (e.g. providing services or is
     * a member of).
     */
    public Reference participatingOrganization() {
        return getObject(Reference.class, PROPERTY_PARTICIPATING_ORGANIZATION);
    }

    /**
     * Health insurance provider network in which the
     * participatingOrganization provides the role's services (if defined) at
     * the indicated locations (if defined).
     */
    public java.util.List<Reference> network() {
        return getList(Reference.class, PROPERTY_NETWORK);
    }

    /**
     * Definition of the role the participatingOrganization plays in the
     * association.
     */
    public java.util.List<CodeableConcept> code() {
        return getList(CodeableConcept.class, PROPERTY_CODE);
    }

    /**
     * Specific specialty of the participatingOrganization in the context of
     * the role.
     */
    public java.util.List<CodeableConcept> specialty() {
        return getList(CodeableConcept.class, PROPERTY_SPECIALTY);
    }

    /**
     * The location(s) at which the role occurs.
     */
    public java.util.List<Reference> location() {
        return getList(Reference.class, PROPERTY_LOCATION);
    }

    /**
     * Healthcare services provided through the role.
     */
    public java.util.List<Reference> healthcareService() {
        return getList(Reference.class, PROPERTY_HEALTHCARE_SERVICE);
    }

    /**
     * Contact details at the participatingOrganization relevant to this
     * Affiliation.
     */
    public java.util.List<ContactPoint> telecom() {
        return getList(ContactPoint.class, PROPERTY_TELECOM);
    }

    /**
     * Technical endpoints providing access to services operated for this
     * role.
     */
    public java.util.List<Reference> endpoint() {
        return getList(Reference.class, PROPERTY_ENDPOINT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder active(final Boolean active) {
            b.add(PROPERTY_ACTIVE, active);
            return this;
        }

        public Builder period(final Period period) {
            b.add(PROPERTY_PERIOD, period);
            return this;
        }

        public Builder organization(final Reference organization) {
            b.add(PROPERTY_ORGANIZATION, organization);
            return this;
        }

        public Builder participatingOrganization(final Reference participatingOrganization) {
            b.add(PROPERTY_PARTICIPATING_ORGANIZATION, participatingOrganization);
            return this;
        }

        public Builder network(final java.util.List<Reference> network) {
            b.add(PROPERTY_NETWORK, FhirObject.toArray(network));
            return this;
        }

        public Builder code(final java.util.List<CodeableConcept> code) {
            b.add(PROPERTY_CODE, FhirObject.toArray(code));
            return this;
        }

        public Builder specialty(final java.util.List<CodeableConcept> specialty) {
            b.add(PROPERTY_SPECIALTY, FhirObject.toArray(specialty));
            return this;
        }

        public Builder location(final java.util.List<Reference> location) {
            b.add(PROPERTY_LOCATION, FhirObject.toArray(location));
            return this;
        }

        public Builder healthcareService(final java.util.List<Reference> healthcareService) {
            b.add(PROPERTY_HEALTHCARE_SERVICE, FhirObject.toArray(healthcareService));
            return this;
        }

        public Builder telecom(final java.util.List<ContactPoint> telecom) {
            b.add(PROPERTY_TELECOM, FhirObject.toArray(telecom));
            return this;
        }

        public Builder endpoint(final java.util.List<Reference> endpoint) {
            b.add(PROPERTY_ENDPOINT, FhirObject.toArray(endpoint));
            return this;
        }

        public OrganizationAffiliation build() {
            return new OrganizationAffiliation(b.build());
        }
    }
}
