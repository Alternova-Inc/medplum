/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Signature extends FhirResource {
    public static final String RESOURCE_TYPE = "Signature";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_WHEN = "when";
    public static final String PROPERTY_WHO = "who";
    public static final String PROPERTY_ONBEHALFOF = "onBehalfOf";
    public static final String PROPERTY_TARGETFORMAT = "targetFormat";
    public static final String PROPERTY_SIGFORMAT = "sigFormat";
    public static final String PROPERTY_DATA = "data";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Signature(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * An indication of the reason that the entity signed this document. This
     * may be explicitly included as part of the signature information and
     * can be used when determining accountability for various actions
     * concerning the document.
     */
    public java.util.List<Coding> type() {
        return getList(Coding.class, PROPERTY_TYPE);
    }

    /**
     * When the digital signature was signed.
     */
    public java.time.Instant when() {
        return java.time.Instant.parse(data.getString(PROPERTY_WHEN));
    }

    /**
     * A reference to an application-usable description of the identity that
     * signed  (e.g. the signature used their private key).
     */
    public Reference who() {
        return getObject(Reference.class, PROPERTY_WHO);
    }

    /**
     * A reference to an application-usable description of the identity that
     * is represented by the signature.
     */
    public Reference onBehalfOf() {
        return getObject(Reference.class, PROPERTY_ONBEHALFOF);
    }

    /**
     * A mime type that indicates the technical format of the target
     * resources signed by the signature.
     */
    public String targetFormat() {
        return getString(PROPERTY_TARGETFORMAT);
    }

    /**
     * A mime type that indicates the technical format of the signature.
     * Important mime types are application/signature+xml for X ML DigSig,
     * application/jose for JWS, and image/* for a graphical image of a
     * signature, etc.
     */
    public String sigFormat() {
        return getString(PROPERTY_SIGFORMAT);
    }

    /**
     * The base64 encoding of the Signature content. When signature is not
     * recorded electronically this element would be empty.
     */
    public String data() {
        return getString(PROPERTY_DATA);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder type(final java.util.List<Coding> type) {
            b.add(PROPERTY_TYPE, FhirObject.toArray(type));
            return this;
        }

        public Builder when(final java.time.Instant when) {
            b.add(PROPERTY_WHEN, when.toString());
            return this;
        }

        public Builder who(final Reference who) {
            b.add(PROPERTY_WHO, who);
            return this;
        }

        public Builder onBehalfOf(final Reference onBehalfOf) {
            b.add(PROPERTY_ONBEHALFOF, onBehalfOf);
            return this;
        }

        public Builder targetFormat(final String targetFormat) {
            b.add(PROPERTY_TARGETFORMAT, targetFormat);
            return this;
        }

        public Builder sigFormat(final String sigFormat) {
            b.add(PROPERTY_SIGFORMAT, sigFormat);
            return this;
        }

        public Builder data(final String data) {
            b.add(PROPERTY_DATA, data);
            return this;
        }

        public Signature build() {
            return new Signature(b.build());
        }
    }
}
