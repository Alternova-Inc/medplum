/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

/**
 * A formal computable definition of an operation (on the RESTful
 * interface) or a named query (using the search interaction).
 */
public class OperationDefinition extends FhirResource {
    public static final String RESOURCE_TYPE = "OperationDefinition";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_VERSION = "version";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_TITLE = "title";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_KIND = "kind";
    public static final String PROPERTY_EXPERIMENTAL = "experimental";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_PUBLISHER = "publisher";
    public static final String PROPERTY_CONTACT = "contact";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_USE_CONTEXT = "useContext";
    public static final String PROPERTY_JURISDICTION = "jurisdiction";
    public static final String PROPERTY_PURPOSE = "purpose";
    public static final String PROPERTY_AFFECTS_STATE = "affectsState";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_COMMENT = "comment";
    public static final String PROPERTY_BASE = "base";
    public static final String PROPERTY_RESOURCE = "resource";
    public static final String PROPERTY_SYSTEM = "system";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_INSTANCE = "instance";
    public static final String PROPERTY_INPUT_PROFILE = "inputProfile";
    public static final String PROPERTY_OUTPUT_PROFILE = "outputProfile";
    public static final String PROPERTY_PARAMETER = "parameter";
    public static final String PROPERTY_OVERLOAD = "overload";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public OperationDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * An absolute URI that is used to identify this operation definition
     * when it is referenced in a specification, model, design or an
     * instance; also called its canonical identifier. This SHOULD be
     * globally unique and SHOULD be a literal address at which at which an
     * authoritative instance of this operation definition is (or will be)
     * published. This URL can be the target of a canonical reference. It
     * SHALL remain the same when the operation definition is stored on
     * different servers.
     */
    public java.net.URI url() {
        return getUri(PROPERTY_URL);
    }

    /**
     * The identifier that is used to identify this version of the operation
     * definition when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the operation
     * definition author and is not expected to be globally unique. For
     * example, it might be a timestamp (e.g. yyyymmdd) if a managed version
     * is not available. There is also no expectation that versions can be
     * placed in a lexicographical sequence.
     */
    public String version() {
        return getString(PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the operation definition. This
     * name should be usable as an identifier for the module by machine
     * processing applications such as code generation.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the operation
     * definition.
     */
    public String title() {
        return getString(PROPERTY_TITLE);
    }

    /**
     * The status of this operation definition. Enables tracking the
     * life-cycle of the content.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Whether this is an operation or a named query.
     */
    public String kind() {
        return getString(PROPERTY_KIND);
    }

    /**
     * A Boolean value to indicate that this operation definition is authored
     * for testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the operation definition was
     * published. The date must change when the business version changes and
     * it must change if the status code changes. In addition, it should
     * change when the substantive content of the operation definition
     * changes.
     */
    public java.time.Instant date() {
        return getInstant(PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the
     * operation definition.
     */
    public String publisher() {
        return getString(PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the operation definition
     * from a consumer's perspective.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate operation definition instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the operation definition is
     * intended to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this operation definition is needed and why it has
     * been designed as it has.
     */
    public String purpose() {
        return getString(PROPERTY_PURPOSE);
    }

    /**
     * Whether the operation affects state. Side effects such as producing
     * audit trail entries do not count as 'affecting  state'.
     */
    public Boolean affectsState() {
        return data.getBoolean(PROPERTY_AFFECTS_STATE);
    }

    /**
     * The name used to invoke the operation.
     */
    public String code() {
        return getString(PROPERTY_CODE);
    }

    /**
     * Additional information about how to use this operation or named query.
     */
    public String comment() {
        return getString(PROPERTY_COMMENT);
    }

    /**
     * Indicates that this operation definition is a constraining profile on
     * the base.
     */
    public String base() {
        return getString(PROPERTY_BASE);
    }

    /**
     * The types on which this operation can be executed.
     */
    public java.util.List<String> resource() {
        return getList(String.class, PROPERTY_RESOURCE);
    }

    /**
     * Indicates whether this operation or named query can be invoked at the
     * system level (e.g. without needing to choose a resource type for the
     * context).
     */
    public Boolean system() {
        return data.getBoolean(PROPERTY_SYSTEM);
    }

    /**
     * Indicates whether this operation or named query can be invoked at the
     * resource type level for any given resource type level (e.g. without
     * needing to choose a specific resource id for the context).
     */
    public Boolean type() {
        return data.getBoolean(PROPERTY_TYPE);
    }

    /**
     * Indicates whether this operation can be invoked on a particular
     * instance of one of the given types.
     */
    public Boolean instance() {
        return data.getBoolean(PROPERTY_INSTANCE);
    }

    /**
     * Additional validation information for the in parameters - a single
     * profile that covers all the parameters. The profile is a constraint on
     * the parameters resource as a whole.
     */
    public String inputProfile() {
        return getString(PROPERTY_INPUT_PROFILE);
    }

    /**
     * Additional validation information for the out parameters - a single
     * profile that covers all the parameters. The profile is a constraint on
     * the parameters resource.
     */
    public String outputProfile() {
        return getString(PROPERTY_OUTPUT_PROFILE);
    }

    /**
     * The parameters for the operation/query.
     */
    public java.util.List<OperationDefinitionParameter> parameter() {
        return getList(OperationDefinitionParameter.class, PROPERTY_PARAMETER);
    }

    /**
     * Defines an appropriate combination of parameters to use when invoking
     * this operation, to help code generators when generating overloaded
     * parameter sets for this operation.
     */
    public java.util.List<OperationDefinitionOverload> overload() {
        return getList(OperationDefinitionOverload.class, PROPERTY_OVERLOAD);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder url(final java.net.URI url) {
            b.add(PROPERTY_URL, url.toString());
            return this;
        }

        public Builder version(final String version) {
            b.add(PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(PROPERTY_TITLE, title);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder kind(final String kind) {
            b.add(PROPERTY_KIND, kind);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder affectsState(final Boolean affectsState) {
            b.add(PROPERTY_AFFECTS_STATE, affectsState);
            return this;
        }

        public Builder code(final String code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder comment(final String comment) {
            b.add(PROPERTY_COMMENT, comment);
            return this;
        }

        public Builder base(final String base) {
            b.add(PROPERTY_BASE, base);
            return this;
        }

        public Builder resource(final java.util.List<String> resource) {
            b.add(PROPERTY_RESOURCE, FhirObject.toStringArray(resource));
            return this;
        }

        public Builder system(final Boolean system) {
            b.add(PROPERTY_SYSTEM, system);
            return this;
        }

        public Builder type(final Boolean type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder instance(final Boolean instance) {
            b.add(PROPERTY_INSTANCE, instance);
            return this;
        }

        public Builder inputProfile(final String inputProfile) {
            b.add(PROPERTY_INPUT_PROFILE, inputProfile);
            return this;
        }

        public Builder outputProfile(final String outputProfile) {
            b.add(PROPERTY_OUTPUT_PROFILE, outputProfile);
            return this;
        }

        public Builder parameter(final java.util.List<OperationDefinitionParameter> parameter) {
            b.add(PROPERTY_PARAMETER, FhirObject.toArray(parameter));
            return this;
        }

        public Builder overload(final java.util.List<OperationDefinitionOverload> overload) {
            b.add(PROPERTY_OVERLOAD, FhirObject.toArray(overload));
            return this;
        }

        public OperationDefinition build() {
            return new OperationDefinition(b.build());
        }
    }

    /**
     * A formal computable definition of an operation (on the RESTful
     * interface) or a named query (using the search interaction).
     */
    public static class OperationDefinitionBinding extends FhirObject {
        public static final String RESOURCE_TYPE = "OperationDefinitionBinding";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_STRENGTH = "strength";
        public static final String PROPERTY_VALUE_SET = "valueSet";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public OperationDefinitionBinding(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates the degree of conformance expectations associated with this
         * binding - that is, the degree to which the provided value set must be
         * adhered to in the instances.
         */
        public String strength() {
            return getString(PROPERTY_STRENGTH);
        }

        /**
         * Points to the value set or external definition (e.g. implicit value
         * set) that identifies the set of codes to be used.
         */
        public String valueSet() {
            return getString(PROPERTY_VALUE_SET);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder strength(final String strength) {
                b.add(PROPERTY_STRENGTH, strength);
                return this;
            }

            public Builder valueSet(final String valueSet) {
                b.add(PROPERTY_VALUE_SET, valueSet);
                return this;
            }

            public OperationDefinitionBinding build() {
                return new OperationDefinitionBinding(b.build());
            }
        }
    }

    /**
     * A formal computable definition of an operation (on the RESTful
     * interface) or a named query (using the search interaction).
     */
    public static class OperationDefinitionOverload extends FhirObject {
        public static final String RESOURCE_TYPE = "OperationDefinitionOverload";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_PARAMETER_NAME = "parameterName";
        public static final String PROPERTY_COMMENT = "comment";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public OperationDefinitionOverload(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Name of parameter to include in overload.
         */
        public java.util.List<String> parameterName() {
            return getList(String.class, PROPERTY_PARAMETER_NAME);
        }

        /**
         * Comments to go on overload.
         */
        public String comment() {
            return getString(PROPERTY_COMMENT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder parameterName(final java.util.List<String> parameterName) {
                b.add(PROPERTY_PARAMETER_NAME, FhirObject.toStringArray(parameterName));
                return this;
            }

            public Builder comment(final String comment) {
                b.add(PROPERTY_COMMENT, comment);
                return this;
            }

            public OperationDefinitionOverload build() {
                return new OperationDefinitionOverload(b.build());
            }
        }
    }

    /**
     * A formal computable definition of an operation (on the RESTful
     * interface) or a named query (using the search interaction).
     */
    public static class OperationDefinitionParameter extends FhirObject {
        public static final String RESOURCE_TYPE = "OperationDefinitionParameter";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_NAME = "name";
        public static final String PROPERTY_USE = "use";
        public static final String PROPERTY_MIN = "min";
        public static final String PROPERTY_MAX = "max";
        public static final String PROPERTY_DOCUMENTATION = "documentation";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_TARGET_PROFILE = "targetProfile";
        public static final String PROPERTY_SEARCH_TYPE = "searchType";
        public static final String PROPERTY_BINDING = "binding";
        public static final String PROPERTY_REFERENCED_FROM = "referencedFrom";
        public static final String PROPERTY_PART = "part";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public OperationDefinitionParameter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The name of used to identify the parameter.
         */
        public String name() {
            return getString(PROPERTY_NAME);
        }

        /**
         * Whether this is an input or an output parameter.
         */
        public String use() {
            return getString(PROPERTY_USE);
        }

        /**
         * The minimum number of times this parameter SHALL appear in the request
         * or response.
         */
        public Integer min() {
            return data.getInt(PROPERTY_MIN);
        }

        /**
         * The maximum number of times this element is permitted to appear in the
         * request or response.
         */
        public String max() {
            return getString(PROPERTY_MAX);
        }

        /**
         * Describes the meaning or use of this parameter.
         */
        public String documentation() {
            return getString(PROPERTY_DOCUMENTATION);
        }

        /**
         * The type for this parameter.
         */
        public String type() {
            return getString(PROPERTY_TYPE);
        }

        /**
         * Used when the type is &quot;Reference&quot; or &quot;canonical&quot;, and identifies a
         * profile structure or implementation Guide that applies to the target
         * of the reference this parameter refers to. If any profiles are
         * specified, then the content must conform to at least one of them. The
         * URL can be a local reference - to a contained StructureDefinition, or
         * a reference to another StructureDefinition or Implementation Guide by
         * a canonical URL. When an implementation guide is specified, the target
         * resource SHALL conform to at least one profile defined in the
         * implementation guide.
         */
        public java.util.List<String> targetProfile() {
            return getList(String.class, PROPERTY_TARGET_PROFILE);
        }

        /**
         * How the parameter is understood as a search parameter. This is only
         * used if the parameter type is 'string'.
         */
        public String searchType() {
            return getString(PROPERTY_SEARCH_TYPE);
        }

        /**
         * Binds to a value set if this parameter is coded (code, Coding,
         * CodeableConcept).
         */
        public OperationDefinitionBinding binding() {
            return getObject(OperationDefinitionBinding.class, PROPERTY_BINDING);
        }

        /**
         * Identifies other resource parameters within the operation invocation
         * that are expected to resolve to this resource.
         */
        public java.util.List<OperationDefinitionReferencedFrom> referencedFrom() {
            return getList(OperationDefinitionReferencedFrom.class, PROPERTY_REFERENCED_FROM);
        }

        /**
         * The parts of a nested Parameter.
         */
        public java.util.List<OperationDefinitionParameter> part() {
            return getList(OperationDefinitionParameter.class, PROPERTY_PART);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(PROPERTY_NAME, name);
                return this;
            }

            public Builder use(final String use) {
                b.add(PROPERTY_USE, use);
                return this;
            }

            public Builder min(final Integer min) {
                b.add(PROPERTY_MIN, min);
                return this;
            }

            public Builder max(final String max) {
                b.add(PROPERTY_MAX, max);
                return this;
            }

            public Builder documentation(final String documentation) {
                b.add(PROPERTY_DOCUMENTATION, documentation);
                return this;
            }

            public Builder type(final String type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder targetProfile(final java.util.List<String> targetProfile) {
                b.add(PROPERTY_TARGET_PROFILE, FhirObject.toStringArray(targetProfile));
                return this;
            }

            public Builder searchType(final String searchType) {
                b.add(PROPERTY_SEARCH_TYPE, searchType);
                return this;
            }

            public Builder binding(final OperationDefinitionBinding binding) {
                b.add(PROPERTY_BINDING, binding);
                return this;
            }

            public Builder referencedFrom(final java.util.List<OperationDefinitionReferencedFrom> referencedFrom) {
                b.add(PROPERTY_REFERENCED_FROM, FhirObject.toArray(referencedFrom));
                return this;
            }

            public Builder part(final java.util.List<OperationDefinitionParameter> part) {
                b.add(PROPERTY_PART, FhirObject.toArray(part));
                return this;
            }

            public OperationDefinitionParameter build() {
                return new OperationDefinitionParameter(b.build());
            }
        }
    }

    /**
     * A formal computable definition of an operation (on the RESTful
     * interface) or a named query (using the search interaction).
     */
    public static class OperationDefinitionReferencedFrom extends FhirObject {
        public static final String RESOURCE_TYPE = "OperationDefinitionReferencedFrom";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_SOURCE = "source";
        public static final String PROPERTY_SOURCE_ID = "sourceId";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public OperationDefinitionReferencedFrom(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The name of the parameter or dot-separated path of parameter names
         * pointing to the resource parameter that is expected to contain a
         * reference to this resource.
         */
        public String source() {
            return getString(PROPERTY_SOURCE);
        }

        /**
         * The id of the element in the referencing resource that is expected to
         * resolve to this resource.
         */
        public String sourceId() {
            return getString(PROPERTY_SOURCE_ID);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder source(final String source) {
                b.add(PROPERTY_SOURCE, source);
                return this;
            }

            public Builder sourceId(final String sourceId) {
                b.add(PROPERTY_SOURCE_ID, sourceId);
                return this;
            }

            public OperationDefinitionReferencedFrom build() {
                return new OperationDefinitionReferencedFrom(b.build());
            }
        }
    }
}
