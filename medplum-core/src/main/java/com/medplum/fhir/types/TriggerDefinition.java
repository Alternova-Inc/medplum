/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class TriggerDefinition extends FhirResource {
    public static final String RESOURCE_TYPE = "TriggerDefinition";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_TIMING_TIMING = "timingTiming";
    public static final String PROPERTY_TIMING_REFERENCE = "timingReference";
    public static final String PROPERTY_TIMING_DATE = "timingDate";
    public static final String PROPERTY_TIMING_DATE_TIME = "timingDateTime";
    public static final String PROPERTY_DATA = "data";
    public static final String PROPERTY_CONDITION = "condition";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public TriggerDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * The type of triggering event.
     */
    public String type() {
        return getString(PROPERTY_TYPE);
    }

    /**
     * A formal name for the event. This may be an absolute URI that
     * identifies the event formally (e.g. from a trigger registry), or a
     * simple relative URI that identifies the event in a local context.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * The timing of the event (if this is a periodic trigger).
     */
    public Timing timingTiming() {
        return getObject(Timing.class, PROPERTY_TIMING_TIMING);
    }

    /**
     * The timing of the event (if this is a periodic trigger).
     */
    public Reference timingReference() {
        return getObject(Reference.class, PROPERTY_TIMING_REFERENCE);
    }

    /**
     * The timing of the event (if this is a periodic trigger).
     */
    public String timingDate() {
        return getString(PROPERTY_TIMING_DATE);
    }

    /**
     * The timing of the event (if this is a periodic trigger).
     */
    public String timingDateTime() {
        return getString(PROPERTY_TIMING_DATE_TIME);
    }

    /**
     * The triggering data of the event (if this is a data trigger). If more
     * than one data is requirement is specified, then all the data
     * requirements must be true.
     */
    public java.util.List<DataRequirement> data() {
        return getList(DataRequirement.class, PROPERTY_DATA);
    }

    /**
     * A boolean-valued expression that is evaluated in the context of the
     * container of the trigger definition and returns whether or not the
     * trigger fires.
     */
    public Expression condition() {
        return getObject(Expression.class, PROPERTY_CONDITION);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder type(final String type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder timingTiming(final Timing timingTiming) {
            b.add(PROPERTY_TIMING_TIMING, timingTiming);
            return this;
        }

        public Builder timingReference(final Reference timingReference) {
            b.add(PROPERTY_TIMING_REFERENCE, timingReference);
            return this;
        }

        public Builder timingDate(final String timingDate) {
            b.add(PROPERTY_TIMING_DATE, timingDate);
            return this;
        }

        public Builder timingDateTime(final String timingDateTime) {
            b.add(PROPERTY_TIMING_DATE_TIME, timingDateTime);
            return this;
        }

        public Builder data(final java.util.List<DataRequirement> data) {
            b.add(PROPERTY_DATA, FhirObject.toArray(data));
            return this;
        }

        public Builder condition(final Expression condition) {
            b.add(PROPERTY_CONDITION, condition);
            return this;
        }

        public TriggerDefinition build() {
            return new TriggerDefinition(b.build());
        }
    }
}
