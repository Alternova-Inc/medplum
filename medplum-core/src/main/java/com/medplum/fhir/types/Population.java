/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Population extends FhirResource {
    public static final String RESOURCE_TYPE = "Population";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_AGE_RANGE = "ageRange";
    public static final String PROPERTY_AGE_CODEABLE_CONCEPT = "ageCodeableConcept";
    public static final String PROPERTY_GENDER = "gender";
    public static final String PROPERTY_RACE = "race";
    public static final String PROPERTY_PHYSIOLOGICAL_CONDITION = "physiologicalCondition";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Population(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the element and that modifies the
     * understanding of the element in which it is contained and/or the
     * understanding of the containing element's descendants. Usually
     * modifier elements provide negation or qualification. To make the use
     * of extensions safe and manageable, there is a strict set of governance
     * applied to the definition and use of extensions. Though any
     * implementer can define an extension, there is a set of requirements
     * that SHALL be met as part of the definition of the extension.
     * Applications processing a resource are required to check for modifier
     * extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * The age of the specific population.
     */
    public Range ageRange() {
        return getObject(Range.class, PROPERTY_AGE_RANGE);
    }

    /**
     * The age of the specific population.
     */
    public CodeableConcept ageCodeableConcept() {
        return getObject(CodeableConcept.class, PROPERTY_AGE_CODEABLE_CONCEPT);
    }

    /**
     * The gender of the specific population.
     */
    public CodeableConcept gender() {
        return getObject(CodeableConcept.class, PROPERTY_GENDER);
    }

    /**
     * Race of the specific population.
     */
    public CodeableConcept race() {
        return getObject(CodeableConcept.class, PROPERTY_RACE);
    }

    /**
     * The existing physiological conditions of the specific population to
     * which this applies.
     */
    public CodeableConcept physiologicalCondition() {
        return getObject(CodeableConcept.class, PROPERTY_PHYSIOLOGICAL_CONDITION);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder ageRange(final Range ageRange) {
            b.add(PROPERTY_AGE_RANGE, ageRange);
            return this;
        }

        public Builder ageCodeableConcept(final CodeableConcept ageCodeableConcept) {
            b.add(PROPERTY_AGE_CODEABLE_CONCEPT, ageCodeableConcept);
            return this;
        }

        public Builder gender(final CodeableConcept gender) {
            b.add(PROPERTY_GENDER, gender);
            return this;
        }

        public Builder race(final CodeableConcept race) {
            b.add(PROPERTY_RACE, race);
            return this;
        }

        public Builder physiologicalCondition(final CodeableConcept physiologicalCondition) {
            b.add(PROPERTY_PHYSIOLOGICAL_CONDITION, physiologicalCondition);
            return this;
        }

        public Population build() {
            return new Population(b.build());
        }
    }
}
