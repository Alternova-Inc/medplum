/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Consent extends FhirResource {
    public static final String RESOURCE_TYPE = "Consent";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_SCOPE = "scope";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_PATIENT = "patient";
    public static final String PROPERTY_DATETIME = "dateTime";
    public static final String PROPERTY_PERFORMER = "performer";
    public static final String PROPERTY_ORGANIZATION = "organization";
    public static final String PROPERTY_SOURCEATTACHMENT = "sourceAttachment";
    public static final String PROPERTY_SOURCEREFERENCE = "sourceReference";
    public static final String PROPERTY_POLICY = "policy";
    public static final String PROPERTY_POLICYRULE = "policyRule";
    public static final String PROPERTY_VERIFICATION = "verification";
    public static final String PROPERTY_PROVISION = "provision";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Consent(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * Unique identifier for this copy of the Consent Statement.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Indicates the current state of this consent.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A selector of the type of consent being presented: ADR, Privacy,
     * Treatment, Research.  This list is now extensible.
     */
    public CodeableConcept scope() {
        return getObject(CodeableConcept.class, PROPERTY_SCOPE);
    }

    /**
     * A classification of the type of consents found in the statement. This
     * element supports indexing and retrieval of consent statements.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, PROPERTY_CATEGORY);
    }

    /**
     * The patient/healthcare consumer to whom this consent applies.
     */
    public Reference patient() {
        return getObject(Reference.class, PROPERTY_PATIENT);
    }

    /**
     * When this  Consent was issued / created / indexed.
     */
    public java.time.Instant dateTime() {
        return java.time.Instant.parse(data.getString(PROPERTY_DATETIME));
    }

    /**
     * Either the Grantor, which is the entity responsible for granting the
     * rights listed in a Consent Directive or the Grantee, which is the
     * entity responsible for complying with the Consent Directive, including
     * any obligations or limitations on authorizations and enforcement of
     * prohibitions.
     */
    public java.util.List<Reference> performer() {
        return getList(Reference.class, PROPERTY_PERFORMER);
    }

    /**
     * The organization that manages the consent, and the framework within
     * which it is executed.
     */
    public java.util.List<Reference> organization() {
        return getList(Reference.class, PROPERTY_ORGANIZATION);
    }

    /**
     * The source on which this consent statement is based. The source might
     * be a scanned original paper form, or a reference to a consent that
     * links back to such a source, a reference to a document repository
     * (e.g. XDS) that stores the original consent document.
     */
    public Attachment sourceAttachment() {
        return getObject(Attachment.class, PROPERTY_SOURCEATTACHMENT);
    }

    /**
     * The source on which this consent statement is based. The source might
     * be a scanned original paper form, or a reference to a consent that
     * links back to such a source, a reference to a document repository
     * (e.g. XDS) that stores the original consent document.
     */
    public Reference sourceReference() {
        return getObject(Reference.class, PROPERTY_SOURCEREFERENCE);
    }

    /**
     * The references to the policies that are included in this consent
     * scope. Policies may be organizational, but are often defined
     * jurisdictionally, or in law.
     */
    public java.util.List<ConsentPolicy> policy() {
        return getList(ConsentPolicy.class, PROPERTY_POLICY);
    }

    /**
     * A reference to the specific base computable regulation or policy.
     */
    public CodeableConcept policyRule() {
        return getObject(CodeableConcept.class, PROPERTY_POLICYRULE);
    }

    /**
     * Whether a treatment instruction (e.g. artificial respiration yes or
     * no) was verified with the patient, his/her family or another
     * authorized person.
     */
    public java.util.List<ConsentVerification> verification() {
        return getList(ConsentVerification.class, PROPERTY_VERIFICATION);
    }

    /**
     * An exception to the base policy of this consent. An exception can be
     * an addition or removal of access permissions.
     */
    public ConsentProvision provision() {
        return getObject(ConsentProvision.class, PROPERTY_PROVISION);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder scope(final CodeableConcept scope) {
            b.add(PROPERTY_SCOPE, scope);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder dateTime(final java.time.Instant dateTime) {
            b.add(PROPERTY_DATETIME, dateTime.toString());
            return this;
        }

        public Builder performer(final java.util.List<Reference> performer) {
            b.add(PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder organization(final java.util.List<Reference> organization) {
            b.add(PROPERTY_ORGANIZATION, FhirObject.toArray(organization));
            return this;
        }

        public Builder sourceAttachment(final Attachment sourceAttachment) {
            b.add(PROPERTY_SOURCEATTACHMENT, sourceAttachment);
            return this;
        }

        public Builder sourceReference(final Reference sourceReference) {
            b.add(PROPERTY_SOURCEREFERENCE, sourceReference);
            return this;
        }

        public Builder policy(final java.util.List<ConsentPolicy> policy) {
            b.add(PROPERTY_POLICY, FhirObject.toArray(policy));
            return this;
        }

        public Builder policyRule(final CodeableConcept policyRule) {
            b.add(PROPERTY_POLICYRULE, policyRule);
            return this;
        }

        public Builder verification(final java.util.List<ConsentVerification> verification) {
            b.add(PROPERTY_VERIFICATION, FhirObject.toArray(verification));
            return this;
        }

        public Builder provision(final ConsentProvision provision) {
            b.add(PROPERTY_PROVISION, provision);
            return this;
        }

        public Consent build() {
            return new Consent(b.build());
        }
    }

    public static class ConsentActor extends FhirObject {
        public static final String RESOURCE_TYPE = "ConsentActor";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_ROLE = "role";
        public static final String PROPERTY_REFERENCE = "reference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConsentActor(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * How the individual is involved in the resources content that is
         * described in the exception.
         */
        public CodeableConcept role() {
            return getObject(CodeableConcept.class, PROPERTY_ROLE);
        }

        /**
         * The resource that identifies the actor. To identify actors by type,
         * use group to identify a set of actors by some property they share
         * (e.g. 'admitting officers').
         */
        public Reference reference() {
            return getObject(Reference.class, PROPERTY_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder role(final CodeableConcept role) {
                b.add(PROPERTY_ROLE, role);
                return this;
            }

            public Builder reference(final Reference reference) {
                b.add(PROPERTY_REFERENCE, reference);
                return this;
            }

            public ConsentActor build() {
                return new ConsentActor(b.build());
            }
        }
    }

    public static class ConsentData extends FhirObject {
        public static final String RESOURCE_TYPE = "ConsentData";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_MEANING = "meaning";
        public static final String PROPERTY_REFERENCE = "reference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConsentData(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * How the resource reference is interpreted when testing consent
         * restrictions.
         */
        public String meaning() {
            return getString(PROPERTY_MEANING);
        }

        /**
         * A reference to a specific resource that defines which resources are
         * covered by this consent.
         */
        public Reference reference() {
            return getObject(Reference.class, PROPERTY_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder meaning(final String meaning) {
                b.add(PROPERTY_MEANING, meaning);
                return this;
            }

            public Builder reference(final Reference reference) {
                b.add(PROPERTY_REFERENCE, reference);
                return this;
            }

            public ConsentData build() {
                return new ConsentData(b.build());
            }
        }
    }

    public static class ConsentPolicy extends FhirObject {
        public static final String RESOURCE_TYPE = "ConsentPolicy";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_AUTHORITY = "authority";
        public static final String PROPERTY_URI = "uri";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConsentPolicy(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Entity or Organization having regulatory jurisdiction or
         * accountability for  enforcing policies pertaining to Consent
         * Directives.
         */
        public String authority() {
            return getString(PROPERTY_AUTHORITY);
        }

        /**
         * The references to the policies that are included in this consent
         * scope. Policies may be organizational, but are often defined
         * jurisdictionally, or in law.
         */
        public String uri() {
            return getString(PROPERTY_URI);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder authority(final String authority) {
                b.add(PROPERTY_AUTHORITY, authority);
                return this;
            }

            public Builder uri(final String uri) {
                b.add(PROPERTY_URI, uri);
                return this;
            }

            public ConsentPolicy build() {
                return new ConsentPolicy(b.build());
            }
        }
    }

    public static class ConsentProvision extends FhirObject {
        public static final String RESOURCE_TYPE = "ConsentProvision";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_PERIOD = "period";
        public static final String PROPERTY_ACTOR = "actor";
        public static final String PROPERTY_ACTION = "action";
        public static final String PROPERTY_SECURITYLABEL = "securityLabel";
        public static final String PROPERTY_PURPOSE = "purpose";
        public static final String PROPERTY_CLASS = "class";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_DATAPERIOD = "dataPeriod";
        public static final String PROPERTY_DATA = "data";
        public static final String PROPERTY_PROVISION = "provision";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConsentProvision(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Action  to take - permit or deny - when the rule conditions are met. 
         * Not permitted in root rule, required in all nested rules.
         */
        public String type() {
            return getString(PROPERTY_TYPE);
        }

        /**
         * The timeframe in this rule is valid.
         */
        public Period period() {
            return getObject(Period.class, PROPERTY_PERIOD);
        }

        /**
         * Who or what is controlled by this rule. Use group to identify a set of
         * actors by some property they share (e.g. 'admitting officers').
         */
        public java.util.List<ConsentActor> actor() {
            return getList(ConsentActor.class, PROPERTY_ACTOR);
        }

        /**
         * Actions controlled by this Rule.
         */
        public java.util.List<CodeableConcept> action() {
            return getList(CodeableConcept.class, PROPERTY_ACTION);
        }

        /**
         * A security label, comprised of 0..* security label fields (Privacy
         * tags), which define which resources are controlled by this exception.
         */
        public java.util.List<Coding> securityLabel() {
            return getList(Coding.class, PROPERTY_SECURITYLABEL);
        }

        /**
         * The context of the activities a user is taking - why the user is
         * accessing the data - that are controlled by this rule.
         */
        public java.util.List<Coding> purpose() {
            return getList(Coding.class, PROPERTY_PURPOSE);
        }

        /**
         * The class of information covered by this rule. The type can be a FHIR
         * resource type, a profile on a type, or a CDA document, or some other
         * type that indicates what sort of information the consent relates to.
         */
        public java.util.List<Coding> classValue() {
            return getList(Coding.class, PROPERTY_CLASS);
        }

        /**
         * If this code is found in an instance, then the rule applies.
         */
        public java.util.List<CodeableConcept> code() {
            return getList(CodeableConcept.class, PROPERTY_CODE);
        }

        /**
         * Clinical or Operational Relevant period of time that bounds the data
         * controlled by this rule.
         */
        public Period dataPeriod() {
            return getObject(Period.class, PROPERTY_DATAPERIOD);
        }

        /**
         * The resources controlled by this rule if specific resources are
         * referenced.
         */
        public java.util.List<ConsentData> data() {
            return getList(ConsentData.class, PROPERTY_DATA);
        }

        /**
         * Rules which provide exceptions to the base rule or subrules.
         */
        public java.util.List<ConsentProvision> provision() {
            return getList(ConsentProvision.class, PROPERTY_PROVISION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final String type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder period(final Period period) {
                b.add(PROPERTY_PERIOD, period);
                return this;
            }

            public Builder actor(final java.util.List<ConsentActor> actor) {
                b.add(PROPERTY_ACTOR, FhirObject.toArray(actor));
                return this;
            }

            public Builder action(final java.util.List<CodeableConcept> action) {
                b.add(PROPERTY_ACTION, FhirObject.toArray(action));
                return this;
            }

            public Builder securityLabel(final java.util.List<Coding> securityLabel) {
                b.add(PROPERTY_SECURITYLABEL, FhirObject.toArray(securityLabel));
                return this;
            }

            public Builder purpose(final java.util.List<Coding> purpose) {
                b.add(PROPERTY_PURPOSE, FhirObject.toArray(purpose));
                return this;
            }

            public Builder classValue(final java.util.List<Coding> classValue) {
                b.add(PROPERTY_CLASS, FhirObject.toArray(classValue));
                return this;
            }

            public Builder code(final java.util.List<CodeableConcept> code) {
                b.add(PROPERTY_CODE, FhirObject.toArray(code));
                return this;
            }

            public Builder dataPeriod(final Period dataPeriod) {
                b.add(PROPERTY_DATAPERIOD, dataPeriod);
                return this;
            }

            public Builder data(final java.util.List<ConsentData> data) {
                b.add(PROPERTY_DATA, FhirObject.toArray(data));
                return this;
            }

            public Builder provision(final java.util.List<ConsentProvision> provision) {
                b.add(PROPERTY_PROVISION, FhirObject.toArray(provision));
                return this;
            }

            public ConsentProvision build() {
                return new ConsentProvision(b.build());
            }
        }
    }

    public static class ConsentVerification extends FhirObject {
        public static final String RESOURCE_TYPE = "ConsentVerification";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_VERIFIED = "verified";
        public static final String PROPERTY_VERIFIEDWITH = "verifiedWith";
        public static final String PROPERTY_VERIFICATIONDATE = "verificationDate";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConsentVerification(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Has the instruction been verified.
         */
        public Boolean verified() {
            return data.getBoolean(PROPERTY_VERIFIED);
        }

        /**
         * Who verified the instruction (Patient, Relative or other Authorized
         * Person).
         */
        public Reference verifiedWith() {
            return getObject(Reference.class, PROPERTY_VERIFIEDWITH);
        }

        /**
         * Date verification was collected.
         */
        public java.time.Instant verificationDate() {
            return java.time.Instant.parse(data.getString(PROPERTY_VERIFICATIONDATE));
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder verified(final Boolean verified) {
                b.add(PROPERTY_VERIFIED, verified);
                return this;
            }

            public Builder verifiedWith(final Reference verifiedWith) {
                b.add(PROPERTY_VERIFIEDWITH, verifiedWith);
                return this;
            }

            public Builder verificationDate(final java.time.Instant verificationDate) {
                b.add(PROPERTY_VERIFICATIONDATE, verificationDate.toString());
                return this;
            }

            public ConsentVerification build() {
                return new ConsentVerification(b.build());
            }
        }
    }
}
