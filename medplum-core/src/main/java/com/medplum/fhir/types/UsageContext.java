/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class UsageContext extends FhirResource {
    public static final String RESOURCE_TYPE = "UsageContext";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_VALUE_CODEABLE_CONCEPT = "valueCodeableConcept";
    public static final String PROPERTY_VALUE_QUANTITY = "valueQuantity";
    public static final String PROPERTY_VALUE_RANGE = "valueRange";
    public static final String PROPERTY_VALUE_REFERENCE = "valueReference";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public UsageContext(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * A code that identifies the type of context being specified by this
     * usage context.
     */
    public Coding code() {
        return getObject(Coding.class, PROPERTY_CODE);
    }

    /**
     * A value that defines the context specified in this context of use. The
     * interpretation of the value is defined by the code.
     */
    public CodeableConcept valueCodeableConcept() {
        return getObject(CodeableConcept.class, PROPERTY_VALUE_CODEABLE_CONCEPT);
    }

    /**
     * A value that defines the context specified in this context of use. The
     * interpretation of the value is defined by the code.
     */
    public Quantity valueQuantity() {
        return getObject(Quantity.class, PROPERTY_VALUE_QUANTITY);
    }

    /**
     * A value that defines the context specified in this context of use. The
     * interpretation of the value is defined by the code.
     */
    public Range valueRange() {
        return getObject(Range.class, PROPERTY_VALUE_RANGE);
    }

    /**
     * A value that defines the context specified in this context of use. The
     * interpretation of the value is defined by the code.
     */
    public Reference valueReference() {
        return getObject(Reference.class, PROPERTY_VALUE_REFERENCE);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder code(final Coding code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
            b.add(PROPERTY_VALUE_CODEABLE_CONCEPT, valueCodeableConcept);
            return this;
        }

        public Builder valueQuantity(final Quantity valueQuantity) {
            b.add(PROPERTY_VALUE_QUANTITY, valueQuantity);
            return this;
        }

        public Builder valueRange(final Range valueRange) {
            b.add(PROPERTY_VALUE_RANGE, valueRange);
            return this;
        }

        public Builder valueReference(final Reference valueReference) {
            b.add(PROPERTY_VALUE_REFERENCE, valueReference);
            return this;
        }

        public UsageContext build() {
            return new UsageContext(b.build());
        }
    }
}
