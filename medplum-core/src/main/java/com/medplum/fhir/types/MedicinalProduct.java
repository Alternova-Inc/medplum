/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class MedicinalProduct extends FhirResource {
    public static final String RESOURCE_TYPE = "MedicinalProduct";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_DOMAIN = "domain";
    public static final String PROPERTY_COMBINED_PHARMACEUTICAL_DOSE_FORM = "combinedPharmaceuticalDoseForm";
    public static final String PROPERTY_LEGAL_STATUS_OF_SUPPLY = "legalStatusOfSupply";
    public static final String PROPERTY_ADDITIONAL_MONITORING_INDICATOR = "additionalMonitoringIndicator";
    public static final String PROPERTY_SPECIAL_MEASURES = "specialMeasures";
    public static final String PROPERTY_PAEDIATRIC_USE_INDICATOR = "paediatricUseIndicator";
    public static final String PROPERTY_PRODUCT_CLASSIFICATION = "productClassification";
    public static final String PROPERTY_MARKETING_STATUS = "marketingStatus";
    public static final String PROPERTY_PHARMACEUTICAL_PRODUCT = "pharmaceuticalProduct";
    public static final String PROPERTY_PACKAGED_MEDICINAL_PRODUCT = "packagedMedicinalProduct";
    public static final String PROPERTY_ATTACHED_DOCUMENT = "attachedDocument";
    public static final String PROPERTY_MASTER_FILE = "masterFile";
    public static final String PROPERTY_CONTACT = "contact";
    public static final String PROPERTY_CLINICAL_TRIAL = "clinicalTrial";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_CROSS_REFERENCE = "crossReference";
    public static final String PROPERTY_MANUFACTURING_BUSINESS_OPERATION = "manufacturingBusinessOperation";
    public static final String PROPERTY_SPECIAL_DESIGNATION = "specialDesignation";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicinalProduct(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Business identifier for this product. Could be an MPID.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Regulatory type, e.g. Investigational or Authorized.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, PROPERTY_TYPE);
    }

    /**
     * If this medicine applies to human or veterinary uses.
     */
    public Coding domain() {
        return getObject(Coding.class, PROPERTY_DOMAIN);
    }

    /**
     * The dose form for a single part product, or combined form of a
     * multiple part product.
     */
    public CodeableConcept combinedPharmaceuticalDoseForm() {
        return getObject(CodeableConcept.class, PROPERTY_COMBINED_PHARMACEUTICAL_DOSE_FORM);
    }

    /**
     * The legal status of supply of the medicinal product as classified by
     * the regulator.
     */
    public CodeableConcept legalStatusOfSupply() {
        return getObject(CodeableConcept.class, PROPERTY_LEGAL_STATUS_OF_SUPPLY);
    }

    /**
     * Whether the Medicinal Product is subject to additional monitoring for
     * regulatory reasons.
     */
    public CodeableConcept additionalMonitoringIndicator() {
        return getObject(CodeableConcept.class, PROPERTY_ADDITIONAL_MONITORING_INDICATOR);
    }

    /**
     * Whether the Medicinal Product is subject to special measures for
     * regulatory reasons.
     */
    public java.util.List<String> specialMeasures() {
        return getList(String.class, PROPERTY_SPECIAL_MEASURES);
    }

    /**
     * If authorised for use in children.
     */
    public CodeableConcept paediatricUseIndicator() {
        return getObject(CodeableConcept.class, PROPERTY_PAEDIATRIC_USE_INDICATOR);
    }

    /**
     * Allows the product to be classified by various systems.
     */
    public java.util.List<CodeableConcept> productClassification() {
        return getList(CodeableConcept.class, PROPERTY_PRODUCT_CLASSIFICATION);
    }

    /**
     * Marketing status of the medicinal product, in contrast to marketing
     * authorizaton.
     */
    public java.util.List<MarketingStatus> marketingStatus() {
        return getList(MarketingStatus.class, PROPERTY_MARKETING_STATUS);
    }

    /**
     * Pharmaceutical aspects of product.
     */
    public java.util.List<Reference> pharmaceuticalProduct() {
        return getList(Reference.class, PROPERTY_PHARMACEUTICAL_PRODUCT);
    }

    /**
     * Package representation for the product.
     */
    public java.util.List<Reference> packagedMedicinalProduct() {
        return getList(Reference.class, PROPERTY_PACKAGED_MEDICINAL_PRODUCT);
    }

    /**
     * Supporting documentation, typically for regulatory submission.
     */
    public java.util.List<Reference> attachedDocument() {
        return getList(Reference.class, PROPERTY_ATTACHED_DOCUMENT);
    }

    /**
     * A master file for to the medicinal product (e.g. Pharmacovigilance
     * System Master File).
     */
    public java.util.List<Reference> masterFile() {
        return getList(Reference.class, PROPERTY_MASTER_FILE);
    }

    /**
     * A product specific contact, person (in a role), or an organization.
     */
    public java.util.List<Reference> contact() {
        return getList(Reference.class, PROPERTY_CONTACT);
    }

    /**
     * Clinical trials or studies that this product is involved in.
     */
    public java.util.List<Reference> clinicalTrial() {
        return getList(Reference.class, PROPERTY_CLINICAL_TRIAL);
    }

    /**
     * The product's name, including full name and possibly coded parts.
     */
    public java.util.List<MedicinalProductName> name() {
        return getList(MedicinalProductName.class, PROPERTY_NAME);
    }

    /**
     * Reference to another product, e.g. for linking authorised to
     * investigational product.
     */
    public java.util.List<Identifier> crossReference() {
        return getList(Identifier.class, PROPERTY_CROSS_REFERENCE);
    }

    /**
     * An operation applied to the product, for manufacturing or
     * adminsitrative purpose.
     */
    public java.util.List<MedicinalProductManufacturingBusinessOperation> manufacturingBusinessOperation() {
        return getList(MedicinalProductManufacturingBusinessOperation.class, PROPERTY_MANUFACTURING_BUSINESS_OPERATION);
    }

    /**
     * Indicates if the medicinal product has an orphan designation for the
     * treatment of a rare disease.
     */
    public java.util.List<MedicinalProductSpecialDesignation> specialDesignation() {
        return getList(MedicinalProductSpecialDesignation.class, PROPERTY_SPECIAL_DESIGNATION);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder domain(final Coding domain) {
            b.add(PROPERTY_DOMAIN, domain);
            return this;
        }

        public Builder combinedPharmaceuticalDoseForm(final CodeableConcept combinedPharmaceuticalDoseForm) {
            b.add(PROPERTY_COMBINED_PHARMACEUTICAL_DOSE_FORM, combinedPharmaceuticalDoseForm);
            return this;
        }

        public Builder legalStatusOfSupply(final CodeableConcept legalStatusOfSupply) {
            b.add(PROPERTY_LEGAL_STATUS_OF_SUPPLY, legalStatusOfSupply);
            return this;
        }

        public Builder additionalMonitoringIndicator(final CodeableConcept additionalMonitoringIndicator) {
            b.add(PROPERTY_ADDITIONAL_MONITORING_INDICATOR, additionalMonitoringIndicator);
            return this;
        }

        public Builder specialMeasures(final java.util.List<String> specialMeasures) {
            b.add(PROPERTY_SPECIAL_MEASURES, FhirObject.toStringArray(specialMeasures));
            return this;
        }

        public Builder paediatricUseIndicator(final CodeableConcept paediatricUseIndicator) {
            b.add(PROPERTY_PAEDIATRIC_USE_INDICATOR, paediatricUseIndicator);
            return this;
        }

        public Builder productClassification(final java.util.List<CodeableConcept> productClassification) {
            b.add(PROPERTY_PRODUCT_CLASSIFICATION, FhirObject.toArray(productClassification));
            return this;
        }

        public Builder marketingStatus(final java.util.List<MarketingStatus> marketingStatus) {
            b.add(PROPERTY_MARKETING_STATUS, FhirObject.toArray(marketingStatus));
            return this;
        }

        public Builder pharmaceuticalProduct(final java.util.List<Reference> pharmaceuticalProduct) {
            b.add(PROPERTY_PHARMACEUTICAL_PRODUCT, FhirObject.toArray(pharmaceuticalProduct));
            return this;
        }

        public Builder packagedMedicinalProduct(final java.util.List<Reference> packagedMedicinalProduct) {
            b.add(PROPERTY_PACKAGED_MEDICINAL_PRODUCT, FhirObject.toArray(packagedMedicinalProduct));
            return this;
        }

        public Builder attachedDocument(final java.util.List<Reference> attachedDocument) {
            b.add(PROPERTY_ATTACHED_DOCUMENT, FhirObject.toArray(attachedDocument));
            return this;
        }

        public Builder masterFile(final java.util.List<Reference> masterFile) {
            b.add(PROPERTY_MASTER_FILE, FhirObject.toArray(masterFile));
            return this;
        }

        public Builder contact(final java.util.List<Reference> contact) {
            b.add(PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder clinicalTrial(final java.util.List<Reference> clinicalTrial) {
            b.add(PROPERTY_CLINICAL_TRIAL, FhirObject.toArray(clinicalTrial));
            return this;
        }

        public Builder name(final java.util.List<MedicinalProductName> name) {
            b.add(PROPERTY_NAME, FhirObject.toArray(name));
            return this;
        }

        public Builder crossReference(final java.util.List<Identifier> crossReference) {
            b.add(PROPERTY_CROSS_REFERENCE, FhirObject.toArray(crossReference));
            return this;
        }

        public Builder manufacturingBusinessOperation(final java.util.List<MedicinalProductManufacturingBusinessOperation> manufacturingBusinessOperation) {
            b.add(PROPERTY_MANUFACTURING_BUSINESS_OPERATION, FhirObject.toArray(manufacturingBusinessOperation));
            return this;
        }

        public Builder specialDesignation(final java.util.List<MedicinalProductSpecialDesignation> specialDesignation) {
            b.add(PROPERTY_SPECIAL_DESIGNATION, FhirObject.toArray(specialDesignation));
            return this;
        }

        public MedicinalProduct build() {
            return new MedicinalProduct(b.build());
        }
    }

    public static class MedicinalProductCountryLanguage extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductCountryLanguage";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_COUNTRY = "country";
        public static final String PROPERTY_JURISDICTION = "jurisdiction";
        public static final String PROPERTY_LANGUAGE = "language";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductCountryLanguage(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Country code for where this name applies.
         */
        public CodeableConcept country() {
            return getObject(CodeableConcept.class, PROPERTY_COUNTRY);
        }

        /**
         * Jurisdiction code for where this name applies.
         */
        public CodeableConcept jurisdiction() {
            return getObject(CodeableConcept.class, PROPERTY_JURISDICTION);
        }

        /**
         * Language code for this name.
         */
        public CodeableConcept language() {
            return getObject(CodeableConcept.class, PROPERTY_LANGUAGE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder country(final CodeableConcept country) {
                b.add(PROPERTY_COUNTRY, country);
                return this;
            }

            public Builder jurisdiction(final CodeableConcept jurisdiction) {
                b.add(PROPERTY_JURISDICTION, jurisdiction);
                return this;
            }

            public Builder language(final CodeableConcept language) {
                b.add(PROPERTY_LANGUAGE, language);
                return this;
            }

            public MedicinalProductCountryLanguage build() {
                return new MedicinalProductCountryLanguage(b.build());
            }
        }
    }

    public static class MedicinalProductManufacturingBusinessOperation extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductManufacturingBusinessOperation";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_OPERATION_TYPE = "operationType";
        public static final String PROPERTY_AUTHORISATION_REFERENCE_NUMBER = "authorisationReferenceNumber";
        public static final String PROPERTY_EFFECTIVE_DATE = "effectiveDate";
        public static final String PROPERTY_CONFIDENTIALITY_INDICATOR = "confidentialityIndicator";
        public static final String PROPERTY_MANUFACTURER = "manufacturer";
        public static final String PROPERTY_REGULATOR = "regulator";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductManufacturingBusinessOperation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of manufacturing operation.
         */
        public CodeableConcept operationType() {
            return getObject(CodeableConcept.class, PROPERTY_OPERATION_TYPE);
        }

        /**
         * Regulatory authorization reference number.
         */
        public Identifier authorisationReferenceNumber() {
            return getObject(Identifier.class, PROPERTY_AUTHORISATION_REFERENCE_NUMBER);
        }

        /**
         * Regulatory authorization date.
         */
        public java.time.Instant effectiveDate() {
            return java.time.Instant.parse(data.getString(PROPERTY_EFFECTIVE_DATE));
        }

        /**
         * To indicate if this proces is commercially confidential.
         */
        public CodeableConcept confidentialityIndicator() {
            return getObject(CodeableConcept.class, PROPERTY_CONFIDENTIALITY_INDICATOR);
        }

        /**
         * The manufacturer or establishment associated with the process.
         */
        public java.util.List<Reference> manufacturer() {
            return getList(Reference.class, PROPERTY_MANUFACTURER);
        }

        /**
         * A regulator which oversees the operation.
         */
        public Reference regulator() {
            return getObject(Reference.class, PROPERTY_REGULATOR);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder operationType(final CodeableConcept operationType) {
                b.add(PROPERTY_OPERATION_TYPE, operationType);
                return this;
            }

            public Builder authorisationReferenceNumber(final Identifier authorisationReferenceNumber) {
                b.add(PROPERTY_AUTHORISATION_REFERENCE_NUMBER, authorisationReferenceNumber);
                return this;
            }

            public Builder effectiveDate(final java.time.Instant effectiveDate) {
                b.add(PROPERTY_EFFECTIVE_DATE, effectiveDate.toString());
                return this;
            }

            public Builder confidentialityIndicator(final CodeableConcept confidentialityIndicator) {
                b.add(PROPERTY_CONFIDENTIALITY_INDICATOR, confidentialityIndicator);
                return this;
            }

            public Builder manufacturer(final java.util.List<Reference> manufacturer) {
                b.add(PROPERTY_MANUFACTURER, FhirObject.toArray(manufacturer));
                return this;
            }

            public Builder regulator(final Reference regulator) {
                b.add(PROPERTY_REGULATOR, regulator);
                return this;
            }

            public MedicinalProductManufacturingBusinessOperation build() {
                return new MedicinalProductManufacturingBusinessOperation(b.build());
            }
        }
    }

    public static class MedicinalProductName extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductName";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_PRODUCT_NAME = "productName";
        public static final String PROPERTY_NAME_PART = "namePart";
        public static final String PROPERTY_COUNTRY_LANGUAGE = "countryLanguage";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductName(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The full product name.
         */
        public String productName() {
            return getString(PROPERTY_PRODUCT_NAME);
        }

        /**
         * Coding words or phrases of the name.
         */
        public java.util.List<MedicinalProductNamePart> namePart() {
            return getList(MedicinalProductNamePart.class, PROPERTY_NAME_PART);
        }

        /**
         * Country where the name applies.
         */
        public java.util.List<MedicinalProductCountryLanguage> countryLanguage() {
            return getList(MedicinalProductCountryLanguage.class, PROPERTY_COUNTRY_LANGUAGE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder productName(final String productName) {
                b.add(PROPERTY_PRODUCT_NAME, productName);
                return this;
            }

            public Builder namePart(final java.util.List<MedicinalProductNamePart> namePart) {
                b.add(PROPERTY_NAME_PART, FhirObject.toArray(namePart));
                return this;
            }

            public Builder countryLanguage(final java.util.List<MedicinalProductCountryLanguage> countryLanguage) {
                b.add(PROPERTY_COUNTRY_LANGUAGE, FhirObject.toArray(countryLanguage));
                return this;
            }

            public MedicinalProductName build() {
                return new MedicinalProductName(b.build());
            }
        }
    }

    public static class MedicinalProductNamePart extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductNamePart";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_PART = "part";
        public static final String PROPERTY_TYPE = "type";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductNamePart(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A fragment of a product name.
         */
        public String part() {
            return getString(PROPERTY_PART);
        }

        /**
         * Idenifying type for this part of the name (e.g. strength part).
         */
        public Coding type() {
            return getObject(Coding.class, PROPERTY_TYPE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder part(final String part) {
                b.add(PROPERTY_PART, part);
                return this;
            }

            public Builder type(final Coding type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public MedicinalProductNamePart build() {
                return new MedicinalProductNamePart(b.build());
            }
        }
    }

    public static class MedicinalProductSpecialDesignation extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductSpecialDesignation";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_IDENTIFIER = "identifier";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_INTENDED_USE = "intendedUse";
        public static final String PROPERTY_INDICATION_CODEABLE_CONCEPT = "indicationCodeableConcept";
        public static final String PROPERTY_INDICATION_REFERENCE = "indicationReference";
        public static final String PROPERTY_STATUS = "status";
        public static final String PROPERTY_DATE = "date";
        public static final String PROPERTY_SPECIES = "species";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductSpecialDesignation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Identifier for the designation, or procedure number.
         */
        public java.util.List<Identifier> identifier() {
            return getList(Identifier.class, PROPERTY_IDENTIFIER);
        }

        /**
         * The type of special designation, e.g. orphan drug, minor use.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * The intended use of the product, e.g. prevention, treatment.
         */
        public CodeableConcept intendedUse() {
            return getObject(CodeableConcept.class, PROPERTY_INTENDED_USE);
        }

        /**
         * Condition for which the medicinal use applies.
         */
        public CodeableConcept indicationCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_INDICATION_CODEABLE_CONCEPT);
        }

        /**
         * Condition for which the medicinal use applies.
         */
        public Reference indicationReference() {
            return getObject(Reference.class, PROPERTY_INDICATION_REFERENCE);
        }

        /**
         * For example granted, pending, expired or withdrawn.
         */
        public CodeableConcept status() {
            return getObject(CodeableConcept.class, PROPERTY_STATUS);
        }

        /**
         * Date when the designation was granted.
         */
        public java.time.Instant date() {
            return java.time.Instant.parse(data.getString(PROPERTY_DATE));
        }

        /**
         * Animal species for which this applies.
         */
        public CodeableConcept species() {
            return getObject(CodeableConcept.class, PROPERTY_SPECIES);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final java.util.List<Identifier> identifier) {
                b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder intendedUse(final CodeableConcept intendedUse) {
                b.add(PROPERTY_INTENDED_USE, intendedUse);
                return this;
            }

            public Builder indicationCodeableConcept(final CodeableConcept indicationCodeableConcept) {
                b.add(PROPERTY_INDICATION_CODEABLE_CONCEPT, indicationCodeableConcept);
                return this;
            }

            public Builder indicationReference(final Reference indicationReference) {
                b.add(PROPERTY_INDICATION_REFERENCE, indicationReference);
                return this;
            }

            public Builder status(final CodeableConcept status) {
                b.add(PROPERTY_STATUS, status);
                return this;
            }

            public Builder date(final java.time.Instant date) {
                b.add(PROPERTY_DATE, date.toString());
                return this;
            }

            public Builder species(final CodeableConcept species) {
                b.add(PROPERTY_SPECIES, species);
                return this;
            }

            public MedicinalProductSpecialDesignation build() {
                return new MedicinalProductSpecialDesignation(b.build());
            }
        }
    }
}
