/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.JsonObject;

public class Endpoint extends FhirResource {
    public static final String RESOURCE_TYPE = "Endpoint";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_CONNECTION_TYPE = "connectionType";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_MANAGING_ORGANIZATION = "managingOrganization";
    public static final String PROPERTY_CONTACT = "contact";
    public static final String PROPERTY_PERIOD = "period";
    public static final String PROPERTY_PAYLOAD_TYPE = "payloadType";
    public static final String PROPERTY_PAYLOAD_MIME_TYPE = "payloadMimeType";
    public static final String PROPERTY_ADDRESS = "address";
    public static final String PROPERTY_HEADER = "header";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Endpoint(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Identifier for the organization that is used to identify the endpoint
     * across multiple disparate systems.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * active | suspended | error | off | test.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A coded value that represents the technical details of the usage of
     * this endpoint, such as what WSDLs should be used in what way. (e.g.
     * XDS.b/DICOM/cds-hook).
     */
    public Coding connectionType() {
        return getObject(Coding.class, PROPERTY_CONNECTION_TYPE);
    }

    /**
     * A friendly name that this endpoint can be referred to with.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * The organization that manages this endpoint (even if technically
     * another organization is hosting this in the cloud, it is the
     * organization associated with the data).
     */
    public Reference managingOrganization() {
        return getObject(Reference.class, PROPERTY_MANAGING_ORGANIZATION);
    }

    /**
     * Contact details for a human to contact about the subscription. The
     * primary use of this for system administrator troubleshooting.
     */
    public java.util.List<ContactPoint> contact() {
        return getList(ContactPoint.class, PROPERTY_CONTACT);
    }

    /**
     * The interval during which the endpoint is expected to be operational.
     */
    public Period period() {
        return getObject(Period.class, PROPERTY_PERIOD);
    }

    /**
     * The payload type describes the acceptable content that can be
     * communicated on the endpoint.
     */
    public java.util.List<CodeableConcept> payloadType() {
        return getList(CodeableConcept.class, PROPERTY_PAYLOAD_TYPE);
    }

    /**
     * The mime type to send the payload in - e.g. application/fhir+xml,
     * application/fhir+json. If the mime type is not specified, then the
     * sender could send any content (including no content depending on the
     * connectionType).
     */
    public java.util.List<String> payloadMimeType() {
        return getList(String.class, PROPERTY_PAYLOAD_MIME_TYPE);
    }

    /**
     * The uri that describes the actual end-point to connect to.
     */
    public String address() {
        return getString(PROPERTY_ADDRESS);
    }

    /**
     * Additional headers / information to send as part of the notification.
     */
    public java.util.List<String> header() {
        return getList(String.class, PROPERTY_HEADER);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder connectionType(final Coding connectionType) {
            b.add(PROPERTY_CONNECTION_TYPE, connectionType);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder managingOrganization(final Reference managingOrganization) {
            b.add(PROPERTY_MANAGING_ORGANIZATION, managingOrganization);
            return this;
        }

        public Builder contact(final java.util.List<ContactPoint> contact) {
            b.add(PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder period(final Period period) {
            b.add(PROPERTY_PERIOD, period);
            return this;
        }

        public Builder payloadType(final java.util.List<CodeableConcept> payloadType) {
            b.add(PROPERTY_PAYLOAD_TYPE, FhirObject.toArray(payloadType));
            return this;
        }

        public Builder payloadMimeType(final java.util.List<String> payloadMimeType) {
            b.add(PROPERTY_PAYLOAD_MIME_TYPE, FhirObject.toStringArray(payloadMimeType));
            return this;
        }

        public Builder address(final String address) {
            b.add(PROPERTY_ADDRESS, address);
            return this;
        }

        public Builder header(final java.util.List<String> header) {
            b.add(PROPERTY_HEADER, FhirObject.toStringArray(header));
            return this;
        }

        public Endpoint build() {
            return new Endpoint(b.build());
        }
    }
}
