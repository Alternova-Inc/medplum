/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class MedicinalProductInteraction extends FhirResource {
    public static final String RESOURCE_TYPE = "MedicinalProductInteraction";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_INTERACTANT = "interactant";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_EFFECT = "effect";
    public static final String PROPERTY_INCIDENCE = "incidence";
    public static final String PROPERTY_MANAGEMENT = "management";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicinalProductInteraction(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * The medication for which this is a described interaction.
     */
    public java.util.List<Reference> subject() {
        return getList(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * The interaction described.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * The specific medication, food or laboratory test that interacts.
     */
    public java.util.List<MedicinalProductInteractionInteractant> interactant() {
        return getList(MedicinalProductInteractionInteractant.class, PROPERTY_INTERACTANT);
    }

    /**
     * The type of the interaction e.g. drug-drug interaction, drug-food interaction, drug-lab test interaction.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, PROPERTY_TYPE);
    }

    /**
     * The effect of the interaction, for example "reduced gastric absorption of primary medication".
     */
    public CodeableConcept effect() {
        return getObject(CodeableConcept.class, PROPERTY_EFFECT);
    }

    /**
     * The incidence of the interaction, e.g. theoretical, observed.
     */
    public CodeableConcept incidence() {
        return getObject(CodeableConcept.class, PROPERTY_INCIDENCE);
    }

    /**
     * Actions for managing the interaction.
     */
    public CodeableConcept management() {
        return getObject(CodeableConcept.class, PROPERTY_MANAGEMENT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder subject(final java.util.List<Reference> subject) {
            b.add(PROPERTY_SUBJECT, FhirObject.toArray(subject));
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder interactant(final java.util.List<MedicinalProductInteractionInteractant> interactant) {
            b.add(PROPERTY_INTERACTANT, FhirObject.toArray(interactant));
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder effect(final CodeableConcept effect) {
            b.add(PROPERTY_EFFECT, effect);
            return this;
        }

        public Builder incidence(final CodeableConcept incidence) {
            b.add(PROPERTY_INCIDENCE, incidence);
            return this;
        }

        public Builder management(final CodeableConcept management) {
            b.add(PROPERTY_MANAGEMENT, management);
            return this;
        }

        public MedicinalProductInteraction build() {
            return new MedicinalProductInteraction(b.build());
        }
    }

    public static class MedicinalProductInteractionInteractant extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicinalProductInteractionInteractant";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_ITEMREFERENCE = "itemReference";
        public static final String PROPERTY_ITEMCODEABLECONCEPT = "itemCodeableConcept";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicinalProductInteractionInteractant(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The specific medication, food or laboratory test that interacts.
         */
        public Reference itemReference() {
            return getObject(Reference.class, PROPERTY_ITEMREFERENCE);
        }

        /**
         * The specific medication, food or laboratory test that interacts.
         */
        public CodeableConcept itemCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_ITEMCODEABLECONCEPT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemReference(final Reference itemReference) {
                b.add(PROPERTY_ITEMREFERENCE, itemReference);
                return this;
            }

            public Builder itemCodeableConcept(final CodeableConcept itemCodeableConcept) {
                b.add(PROPERTY_ITEMCODEABLECONCEPT, itemCodeableConcept);
                return this;
            }

            public MedicinalProductInteractionInteractant build() {
                return new MedicinalProductInteractionInteractant(b.build());
            }
        }
    }
}
