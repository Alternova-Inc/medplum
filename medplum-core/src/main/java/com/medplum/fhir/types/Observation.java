/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Observation extends FhirResource {
    public static final String RESOURCE_TYPE = "Observation";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_BASEDON = "basedOn";
    public static final String PROPERTY_PARTOF = "partOf";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_FOCUS = "focus";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_EFFECTIVEDATETIME = "effectiveDateTime";
    public static final String PROPERTY_EFFECTIVEPERIOD = "effectivePeriod";
    public static final String PROPERTY_EFFECTIVETIMING = "effectiveTiming";
    public static final String PROPERTY_EFFECTIVEINSTANT = "effectiveInstant";
    public static final String PROPERTY_ISSUED = "issued";
    public static final String PROPERTY_PERFORMER = "performer";
    public static final String PROPERTY_VALUEQUANTITY = "valueQuantity";
    public static final String PROPERTY_VALUECODEABLECONCEPT = "valueCodeableConcept";
    public static final String PROPERTY_VALUESTRING = "valueString";
    public static final String PROPERTY_VALUEBOOLEAN = "valueBoolean";
    public static final String PROPERTY_VALUEINTEGER = "valueInteger";
    public static final String PROPERTY_VALUERANGE = "valueRange";
    public static final String PROPERTY_VALUERATIO = "valueRatio";
    public static final String PROPERTY_VALUESAMPLEDDATA = "valueSampledData";
    public static final String PROPERTY_VALUETIME = "valueTime";
    public static final String PROPERTY_VALUEDATETIME = "valueDateTime";
    public static final String PROPERTY_VALUEPERIOD = "valuePeriod";
    public static final String PROPERTY_DATAABSENTREASON = "dataAbsentReason";
    public static final String PROPERTY_INTERPRETATION = "interpretation";
    public static final String PROPERTY_NOTE = "note";
    public static final String PROPERTY_BODYSITE = "bodySite";
    public static final String PROPERTY_METHOD = "method";
    public static final String PROPERTY_SPECIMEN = "specimen";
    public static final String PROPERTY_DEVICE = "device";
    public static final String PROPERTY_REFERENCERANGE = "referenceRange";
    public static final String PROPERTY_HASMEMBER = "hasMember";
    public static final String PROPERTY_DERIVEDFROM = "derivedFrom";
    public static final String PROPERTY_COMPONENT = "component";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Observation(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * A unique identifier assigned to this observation.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by
     * this event.  For example, a MedicationRequest may require a patient to
     * have laboratory test performed before  it is dispensed.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASEDON);
    }

    /**
     * A larger event of which this particular Observation is a component or
     * step.  For example,  an observation as part of a procedure.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, PROPERTY_PARTOF);
    }

    /**
     * The status of the result value.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A code that classifies the general type of observation being made.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, PROPERTY_CATEGORY);
    }

    /**
     * Describes what was observed. Sometimes this is called the observation
     * "name".
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, PROPERTY_CODE);
    }

    /**
     * The patient, or group of patients, location, or device this
     * observation is about and into whose record the observation is placed.
     * If the actual focus of the observation is different from the subject
     * (or a sample of, part, or region of the subject), the `focus` element
     * or the `code` itself specifies the actual focus of the observation.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * The actual focus of an observation when it is not the patient of
     * record representing something or someone associated with the patient
     * such as a spouse, parent, fetus, or donor. For example, fetus
     * observations in a mother's record.  The focus of an observation could
     * also be an existing condition,  an intervention, the subject's diet, 
     * another observation of the subject,  or a body structure such as tumor
     * or implanted device.   An example use case would be using the
     * Observation resource to capture whether the mother is trained to
     * change her child's tracheostomy tube. In this example, the child is
     * the patient of record and the mother is the focus.
     */
    public java.util.List<Reference> focus() {
        return getList(Reference.class, PROPERTY_FOCUS);
    }

    /**
     * The healthcare event  (e.g. a patient and healthcare provider
     * interaction) during which this observation is made.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * The time or time-period the observed value is asserted as being true.
     * For biological subjects - e.g. human patients - this is usually called
     * the "physiologically relevant time". This is usually either the time
     * of the procedure or of specimen collection, but very often the source
     * of the date/time is not known, only the date/time itself.
     */
    public String effectiveDateTime() {
        return getString(PROPERTY_EFFECTIVEDATETIME);
    }

    /**
     * The time or time-period the observed value is asserted as being true.
     * For biological subjects - e.g. human patients - this is usually called
     * the "physiologically relevant time". This is usually either the time
     * of the procedure or of specimen collection, but very often the source
     * of the date/time is not known, only the date/time itself.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, PROPERTY_EFFECTIVEPERIOD);
    }

    /**
     * The time or time-period the observed value is asserted as being true.
     * For biological subjects - e.g. human patients - this is usually called
     * the "physiologically relevant time". This is usually either the time
     * of the procedure or of specimen collection, but very often the source
     * of the date/time is not known, only the date/time itself.
     */
    public Timing effectiveTiming() {
        return getObject(Timing.class, PROPERTY_EFFECTIVETIMING);
    }

    /**
     * The time or time-period the observed value is asserted as being true.
     * For biological subjects - e.g. human patients - this is usually called
     * the "physiologically relevant time". This is usually either the time
     * of the procedure or of specimen collection, but very often the source
     * of the date/time is not known, only the date/time itself.
     */
    public String effectiveInstant() {
        return getString(PROPERTY_EFFECTIVEINSTANT);
    }

    /**
     * The date and time this version of the observation was made available
     * to providers, typically after the results have been reviewed and
     * verified.
     */
    public java.time.Instant issued() {
        return java.time.Instant.parse(data.getString(PROPERTY_ISSUED));
    }

    /**
     * Who was responsible for asserting the observed value as "true".
     */
    public java.util.List<Reference> performer() {
        return getList(Reference.class, PROPERTY_PERFORMER);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public Quantity valueQuantity() {
        return getObject(Quantity.class, PROPERTY_VALUEQUANTITY);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public CodeableConcept valueCodeableConcept() {
        return getObject(CodeableConcept.class, PROPERTY_VALUECODEABLECONCEPT);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public String valueString() {
        return getString(PROPERTY_VALUESTRING);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public Boolean valueBoolean() {
        return data.getBoolean(PROPERTY_VALUEBOOLEAN);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public Integer valueInteger() {
        return data.getInt(PROPERTY_VALUEINTEGER);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public Range valueRange() {
        return getObject(Range.class, PROPERTY_VALUERANGE);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public Ratio valueRatio() {
        return getObject(Ratio.class, PROPERTY_VALUERATIO);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public SampledData valueSampledData() {
        return getObject(SampledData.class, PROPERTY_VALUESAMPLEDDATA);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public String valueTime() {
        return getString(PROPERTY_VALUETIME);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public String valueDateTime() {
        return getString(PROPERTY_VALUEDATETIME);
    }

    /**
     * The information determined as a result of making the observation, if
     * the information has a simple value.
     */
    public Period valuePeriod() {
        return getObject(Period.class, PROPERTY_VALUEPERIOD);
    }

    /**
     * Provides a reason why the expected value in the element
     * Observation.value[x] is missing.
     */
    public CodeableConcept dataAbsentReason() {
        return getObject(CodeableConcept.class, PROPERTY_DATAABSENTREASON);
    }

    /**
     * A categorical assessment of an observation value.  For example, high,
     * low, normal.
     */
    public java.util.List<CodeableConcept> interpretation() {
        return getList(CodeableConcept.class, PROPERTY_INTERPRETATION);
    }

    /**
     * Comments about the observation or the results.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    /**
     * Indicates the site on the subject's body where the observation was
     * made (i.e. the target site).
     */
    public CodeableConcept bodySite() {
        return getObject(CodeableConcept.class, PROPERTY_BODYSITE);
    }

    /**
     * Indicates the mechanism used to perform the observation.
     */
    public CodeableConcept method() {
        return getObject(CodeableConcept.class, PROPERTY_METHOD);
    }

    /**
     * The specimen that was used when this observation was made.
     */
    public Reference specimen() {
        return getObject(Reference.class, PROPERTY_SPECIMEN);
    }

    /**
     * The device used to generate the observation data.
     */
    public Reference device() {
        return getObject(Reference.class, PROPERTY_DEVICE);
    }

    /**
     * Guidance on how to interpret the value by comparison to a normal or
     * recommended range.  Multiple reference ranges are interpreted as an
     * "OR".   In other words, to represent two distinct target populations,
     * two `referenceRange` elements would be used.
     */
    public java.util.List<ObservationReferenceRange> referenceRange() {
        return getList(ObservationReferenceRange.class, PROPERTY_REFERENCERANGE);
    }

    /**
     * This observation is a group observation (e.g. a battery, a panel of
     * tests, a set of vital sign measurements) that includes the target as a
     * member of the group.
     */
    public java.util.List<Reference> hasMember() {
        return getList(Reference.class, PROPERTY_HASMEMBER);
    }

    /**
     * The target resource that represents a measurement from which this
     * observation value is derived. For example, a calculated anion gap or a
     * fetal measurement based on an ultrasound image.
     */
    public java.util.List<Reference> derivedFrom() {
        return getList(Reference.class, PROPERTY_DERIVEDFROM);
    }

    /**
     * Some observations have multiple component observations.  These
     * component observations are expressed as separate code value pairs that
     * share the same attributes.  Examples include systolic and diastolic
     * component observations for blood pressure measurement and multiple
     * component observations for genetics observations.
     */
    public java.util.List<ObservationComponent> component() {
        return getList(ObservationComponent.class, PROPERTY_COMPONENT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASEDON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(PROPERTY_PARTOF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder focus(final java.util.List<Reference> focus) {
            b.add(PROPERTY_FOCUS, FhirObject.toArray(focus));
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder effectiveDateTime(final String effectiveDateTime) {
            b.add(PROPERTY_EFFECTIVEDATETIME, effectiveDateTime);
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(PROPERTY_EFFECTIVEPERIOD, effectivePeriod);
            return this;
        }

        public Builder effectiveTiming(final Timing effectiveTiming) {
            b.add(PROPERTY_EFFECTIVETIMING, effectiveTiming);
            return this;
        }

        public Builder effectiveInstant(final String effectiveInstant) {
            b.add(PROPERTY_EFFECTIVEINSTANT, effectiveInstant);
            return this;
        }

        public Builder issued(final java.time.Instant issued) {
            b.add(PROPERTY_ISSUED, issued.toString());
            return this;
        }

        public Builder performer(final java.util.List<Reference> performer) {
            b.add(PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder valueQuantity(final Quantity valueQuantity) {
            b.add(PROPERTY_VALUEQUANTITY, valueQuantity);
            return this;
        }

        public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
            b.add(PROPERTY_VALUECODEABLECONCEPT, valueCodeableConcept);
            return this;
        }

        public Builder valueString(final String valueString) {
            b.add(PROPERTY_VALUESTRING, valueString);
            return this;
        }

        public Builder valueBoolean(final Boolean valueBoolean) {
            b.add(PROPERTY_VALUEBOOLEAN, valueBoolean);
            return this;
        }

        public Builder valueInteger(final Integer valueInteger) {
            b.add(PROPERTY_VALUEINTEGER, valueInteger);
            return this;
        }

        public Builder valueRange(final Range valueRange) {
            b.add(PROPERTY_VALUERANGE, valueRange);
            return this;
        }

        public Builder valueRatio(final Ratio valueRatio) {
            b.add(PROPERTY_VALUERATIO, valueRatio);
            return this;
        }

        public Builder valueSampledData(final SampledData valueSampledData) {
            b.add(PROPERTY_VALUESAMPLEDDATA, valueSampledData);
            return this;
        }

        public Builder valueTime(final String valueTime) {
            b.add(PROPERTY_VALUETIME, valueTime);
            return this;
        }

        public Builder valueDateTime(final String valueDateTime) {
            b.add(PROPERTY_VALUEDATETIME, valueDateTime);
            return this;
        }

        public Builder valuePeriod(final Period valuePeriod) {
            b.add(PROPERTY_VALUEPERIOD, valuePeriod);
            return this;
        }

        public Builder dataAbsentReason(final CodeableConcept dataAbsentReason) {
            b.add(PROPERTY_DATAABSENTREASON, dataAbsentReason);
            return this;
        }

        public Builder interpretation(final java.util.List<CodeableConcept> interpretation) {
            b.add(PROPERTY_INTERPRETATION, FhirObject.toArray(interpretation));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder bodySite(final CodeableConcept bodySite) {
            b.add(PROPERTY_BODYSITE, bodySite);
            return this;
        }

        public Builder method(final CodeableConcept method) {
            b.add(PROPERTY_METHOD, method);
            return this;
        }

        public Builder specimen(final Reference specimen) {
            b.add(PROPERTY_SPECIMEN, specimen);
            return this;
        }

        public Builder device(final Reference device) {
            b.add(PROPERTY_DEVICE, device);
            return this;
        }

        public Builder referenceRange(final java.util.List<ObservationReferenceRange> referenceRange) {
            b.add(PROPERTY_REFERENCERANGE, FhirObject.toArray(referenceRange));
            return this;
        }

        public Builder hasMember(final java.util.List<Reference> hasMember) {
            b.add(PROPERTY_HASMEMBER, FhirObject.toArray(hasMember));
            return this;
        }

        public Builder derivedFrom(final java.util.List<Reference> derivedFrom) {
            b.add(PROPERTY_DERIVEDFROM, FhirObject.toArray(derivedFrom));
            return this;
        }

        public Builder component(final java.util.List<ObservationComponent> component) {
            b.add(PROPERTY_COMPONENT, FhirObject.toArray(component));
            return this;
        }

        public Observation build() {
            return new Observation(b.build());
        }
    }

    public static class ObservationComponent extends FhirObject {
        public static final String RESOURCE_TYPE = "ObservationComponent";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_VALUEQUANTITY = "valueQuantity";
        public static final String PROPERTY_VALUECODEABLECONCEPT = "valueCodeableConcept";
        public static final String PROPERTY_VALUESTRING = "valueString";
        public static final String PROPERTY_VALUEBOOLEAN = "valueBoolean";
        public static final String PROPERTY_VALUEINTEGER = "valueInteger";
        public static final String PROPERTY_VALUERANGE = "valueRange";
        public static final String PROPERTY_VALUERATIO = "valueRatio";
        public static final String PROPERTY_VALUESAMPLEDDATA = "valueSampledData";
        public static final String PROPERTY_VALUETIME = "valueTime";
        public static final String PROPERTY_VALUEDATETIME = "valueDateTime";
        public static final String PROPERTY_VALUEPERIOD = "valuePeriod";
        public static final String PROPERTY_DATAABSENTREASON = "dataAbsentReason";
        public static final String PROPERTY_INTERPRETATION = "interpretation";
        public static final String PROPERTY_REFERENCERANGE = "referenceRange";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ObservationComponent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Describes what was observed. Sometimes this is called the observation
         * "code".
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, PROPERTY_CODE);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, PROPERTY_VALUEQUANTITY);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_VALUECODEABLECONCEPT);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public String valueString() {
            return getString(PROPERTY_VALUESTRING);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(PROPERTY_VALUEBOOLEAN);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public Integer valueInteger() {
            return data.getInt(PROPERTY_VALUEINTEGER);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public Range valueRange() {
            return getObject(Range.class, PROPERTY_VALUERANGE);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public Ratio valueRatio() {
            return getObject(Ratio.class, PROPERTY_VALUERATIO);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public SampledData valueSampledData() {
            return getObject(SampledData.class, PROPERTY_VALUESAMPLEDDATA);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public String valueTime() {
            return getString(PROPERTY_VALUETIME);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public String valueDateTime() {
            return getString(PROPERTY_VALUEDATETIME);
        }

        /**
         * The information determined as a result of making the observation, if
         * the information has a simple value.
         */
        public Period valuePeriod() {
            return getObject(Period.class, PROPERTY_VALUEPERIOD);
        }

        /**
         * Provides a reason why the expected value in the element
         * Observation.component.value[x] is missing.
         */
        public CodeableConcept dataAbsentReason() {
            return getObject(CodeableConcept.class, PROPERTY_DATAABSENTREASON);
        }

        /**
         * A categorical assessment of an observation value.  For example, high,
         * low, normal.
         */
        public java.util.List<CodeableConcept> interpretation() {
            return getList(CodeableConcept.class, PROPERTY_INTERPRETATION);
        }

        /**
         * Guidance on how to interpret the value by comparison to a normal or
         * recommended range.
         */
        public java.util.List<ObservationReferenceRange> referenceRange() {
            return getList(ObservationReferenceRange.class, PROPERTY_REFERENCERANGE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(PROPERTY_VALUEQUANTITY, valueQuantity);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(PROPERTY_VALUECODEABLECONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(PROPERTY_VALUESTRING, valueString);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(PROPERTY_VALUEBOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(PROPERTY_VALUEINTEGER, valueInteger);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(PROPERTY_VALUERANGE, valueRange);
                return this;
            }

            public Builder valueRatio(final Ratio valueRatio) {
                b.add(PROPERTY_VALUERATIO, valueRatio);
                return this;
            }

            public Builder valueSampledData(final SampledData valueSampledData) {
                b.add(PROPERTY_VALUESAMPLEDDATA, valueSampledData);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(PROPERTY_VALUETIME, valueTime);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(PROPERTY_VALUEDATETIME, valueDateTime);
                return this;
            }

            public Builder valuePeriod(final Period valuePeriod) {
                b.add(PROPERTY_VALUEPERIOD, valuePeriod);
                return this;
            }

            public Builder dataAbsentReason(final CodeableConcept dataAbsentReason) {
                b.add(PROPERTY_DATAABSENTREASON, dataAbsentReason);
                return this;
            }

            public Builder interpretation(final java.util.List<CodeableConcept> interpretation) {
                b.add(PROPERTY_INTERPRETATION, FhirObject.toArray(interpretation));
                return this;
            }

            public Builder referenceRange(final java.util.List<ObservationReferenceRange> referenceRange) {
                b.add(PROPERTY_REFERENCERANGE, FhirObject.toArray(referenceRange));
                return this;
            }

            public ObservationComponent build() {
                return new ObservationComponent(b.build());
            }
        }
    }

    public static class ObservationReferenceRange extends FhirObject {
        public static final String RESOURCE_TYPE = "ObservationReferenceRange";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_LOW = "low";
        public static final String PROPERTY_HIGH = "high";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_APPLIESTO = "appliesTo";
        public static final String PROPERTY_AGE = "age";
        public static final String PROPERTY_TEXT = "text";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ObservationReferenceRange(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The value of the low bound of the reference range.  The low bound of
         * the reference range endpoint is inclusive of the value (e.g. 
         * reference range is >=5 - <=9). If the low bound is omitted,  it is
         * assumed to be meaningless (e.g. reference range is <=2.3).
         */
        public Quantity low() {
            return getObject(Quantity.class, PROPERTY_LOW);
        }

        /**
         * The value of the high bound of the reference range.  The high bound of
         * the reference range endpoint is inclusive of the value (e.g. 
         * reference range is >=5 - <=9). If the high bound is omitted,  it is
         * assumed to be meaningless (e.g. reference range is >= 2.3).
         */
        public Quantity high() {
            return getObject(Quantity.class, PROPERTY_HIGH);
        }

        /**
         * Codes to indicate the what part of the targeted reference population
         * it applies to. For example, the normal or therapeutic range.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Codes to indicate the target population this reference range applies
         * to.  For example, a reference range may be based on the normal
         * population or a particular sex or race.  Multiple `appliesTo`  are
         * interpreted as an "AND" of the target populations.  For example, to
         * represent a target population of African American females, both a code
         * of female and a code for African American would be used.
         */
        public java.util.List<CodeableConcept> appliesTo() {
            return getList(CodeableConcept.class, PROPERTY_APPLIESTO);
        }

        /**
         * The age at which this reference range is applicable. This is a
         * neonatal age (e.g. number of weeks at term) if the meaning says so.
         */
        public Range age() {
            return getObject(Range.class, PROPERTY_AGE);
        }

        /**
         * Text based reference range in an observation which may be used when a
         * quantitative range is not appropriate for an observation.  An example
         * would be a reference value of "Negative" or a list or table of
         * "normals".
         */
        public String text() {
            return getString(PROPERTY_TEXT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder low(final Quantity low) {
                b.add(PROPERTY_LOW, low);
                return this;
            }

            public Builder high(final Quantity high) {
                b.add(PROPERTY_HIGH, high);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder appliesTo(final java.util.List<CodeableConcept> appliesTo) {
                b.add(PROPERTY_APPLIESTO, FhirObject.toArray(appliesTo));
                return this;
            }

            public Builder age(final Range age) {
                b.add(PROPERTY_AGE, age);
                return this;
            }

            public Builder text(final String text) {
                b.add(PROPERTY_TEXT, text);
                return this;
            }

            public ObservationReferenceRange build() {
                return new ObservationReferenceRange(b.build());
            }
        }
    }
}
