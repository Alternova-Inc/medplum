/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class AllergyIntolerance extends FhirResource {
    public static final String RESOURCE_TYPE = "AllergyIntolerance";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_CLINICALSTATUS = "clinicalStatus";
    public static final String PROPERTY_VERIFICATIONSTATUS = "verificationStatus";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_CRITICALITY = "criticality";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_PATIENT = "patient";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_ONSETDATETIME = "onsetDateTime";
    public static final String PROPERTY_ONSETAGE = "onsetAge";
    public static final String PROPERTY_ONSETPERIOD = "onsetPeriod";
    public static final String PROPERTY_ONSETRANGE = "onsetRange";
    public static final String PROPERTY_ONSETSTRING = "onsetString";
    public static final String PROPERTY_RECORDEDDATE = "recordedDate";
    public static final String PROPERTY_RECORDER = "recorder";
    public static final String PROPERTY_ASSERTER = "asserter";
    public static final String PROPERTY_LASTOCCURRENCE = "lastOccurrence";
    public static final String PROPERTY_NOTE = "note";
    public static final String PROPERTY_REACTION = "reaction";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public AllergyIntolerance(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * Business identifiers assigned to this AllergyIntolerance by the
     * performer or other systems which remain constant as the resource is
     * updated and propagates from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The clinical status of the allergy or intolerance.
     */
    public CodeableConcept clinicalStatus() {
        return getObject(CodeableConcept.class, PROPERTY_CLINICALSTATUS);
    }

    /**
     * Assertion about certainty associated with the propensity, or potential
     * risk, of a reaction to the identified substance (including
     * pharmaceutical product).
     */
    public CodeableConcept verificationStatus() {
        return getObject(CodeableConcept.class, PROPERTY_VERIFICATIONSTATUS);
    }

    /**
     * Identification of the underlying physiological mechanism for the
     * reaction risk.
     */
    public String type() {
        return getString(PROPERTY_TYPE);
    }

    /**
     * Category of the identified substance.
     */
    public java.util.List<String> category() {
        return getList(String.class, PROPERTY_CATEGORY);
    }

    /**
     * Estimate of the potential clinical harm, or seriousness, of the
     * reaction to the identified substance.
     */
    public String criticality() {
        return getString(PROPERTY_CRITICALITY);
    }

    /**
     * Code for an allergy or intolerance statement (either a positive or a
     * negated/excluded statement).  This may be a code for a substance or
     * pharmaceutical product that is considered to be responsible for the
     * adverse reaction risk (e.g., "Latex"), an allergy or intolerance
     * condition (e.g., "Latex allergy"), or a negated/excluded code for a
     * specific substance or class (e.g., "No latex allergy") or a general or
     * categorical negated statement (e.g.,  "No known allergy", "No known
     * drug allergies").  Note: the substance for a specific reaction may be
     * different from the substance identified as the cause of the risk, but
     * it must be consistent with it. For instance, it may be a more specific
     * substance (e.g. a brand medication) or a composite product that
     * includes the identified substance. It must be clinically safe to only
     * process the 'code' and ignore the 'reaction.substance'.  If a
     * receiving system is unable to confirm that
     * AllergyIntolerance.reaction.substance falls within the semantic scope
     * of AllergyIntolerance.code, then the receiving system should ignore
     * AllergyIntolerance.reaction.substance.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, PROPERTY_CODE);
    }

    /**
     * The patient who has the allergy or intolerance.
     */
    public Reference patient() {
        return getObject(Reference.class, PROPERTY_PATIENT);
    }

    /**
     * The encounter when the allergy or intolerance was asserted.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public String onsetDateTime() {
        return getString(PROPERTY_ONSETDATETIME);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public Age onsetAge() {
        return getObject(Age.class, PROPERTY_ONSETAGE);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public Period onsetPeriod() {
        return getObject(Period.class, PROPERTY_ONSETPERIOD);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public Range onsetRange() {
        return getObject(Range.class, PROPERTY_ONSETRANGE);
    }

    /**
     * Estimated or actual date,  date-time, or age when allergy or
     * intolerance was identified.
     */
    public String onsetString() {
        return getString(PROPERTY_ONSETSTRING);
    }

    /**
     * The recordedDate represents when this particular AllergyIntolerance
     * record was created in the system, which is often a system-generated
     * date.
     */
    public java.time.Instant recordedDate() {
        return java.time.Instant.parse(data.getString(PROPERTY_RECORDEDDATE));
    }

    /**
     * Individual who recorded the record and takes responsibility for its
     * content.
     */
    public Reference recorder() {
        return getObject(Reference.class, PROPERTY_RECORDER);
    }

    /**
     * The source of the information about the allergy that is recorded.
     */
    public Reference asserter() {
        return getObject(Reference.class, PROPERTY_ASSERTER);
    }

    /**
     * Represents the date and/or time of the last known occurrence of a
     * reaction event.
     */
    public java.time.Instant lastOccurrence() {
        return java.time.Instant.parse(data.getString(PROPERTY_LASTOCCURRENCE));
    }

    /**
     * Additional narrative about the propensity for the Adverse Reaction,
     * not captured in other fields.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    /**
     * Details about each adverse reaction event linked to exposure to the
     * identified substance.
     */
    public java.util.List<AllergyIntoleranceReaction> reaction() {
        return getList(AllergyIntoleranceReaction.class, PROPERTY_REACTION);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder clinicalStatus(final CodeableConcept clinicalStatus) {
            b.add(PROPERTY_CLINICALSTATUS, clinicalStatus);
            return this;
        }

        public Builder verificationStatus(final CodeableConcept verificationStatus) {
            b.add(PROPERTY_VERIFICATIONSTATUS, verificationStatus);
            return this;
        }

        public Builder type(final String type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder category(final java.util.List<String> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toStringArray(category));
            return this;
        }

        public Builder criticality(final String criticality) {
            b.add(PROPERTY_CRITICALITY, criticality);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder onsetDateTime(final String onsetDateTime) {
            b.add(PROPERTY_ONSETDATETIME, onsetDateTime);
            return this;
        }

        public Builder onsetAge(final Age onsetAge) {
            b.add(PROPERTY_ONSETAGE, onsetAge);
            return this;
        }

        public Builder onsetPeriod(final Period onsetPeriod) {
            b.add(PROPERTY_ONSETPERIOD, onsetPeriod);
            return this;
        }

        public Builder onsetRange(final Range onsetRange) {
            b.add(PROPERTY_ONSETRANGE, onsetRange);
            return this;
        }

        public Builder onsetString(final String onsetString) {
            b.add(PROPERTY_ONSETSTRING, onsetString);
            return this;
        }

        public Builder recordedDate(final java.time.Instant recordedDate) {
            b.add(PROPERTY_RECORDEDDATE, recordedDate.toString());
            return this;
        }

        public Builder recorder(final Reference recorder) {
            b.add(PROPERTY_RECORDER, recorder);
            return this;
        }

        public Builder asserter(final Reference asserter) {
            b.add(PROPERTY_ASSERTER, asserter);
            return this;
        }

        public Builder lastOccurrence(final java.time.Instant lastOccurrence) {
            b.add(PROPERTY_LASTOCCURRENCE, lastOccurrence.toString());
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder reaction(final java.util.List<AllergyIntoleranceReaction> reaction) {
            b.add(PROPERTY_REACTION, FhirObject.toArray(reaction));
            return this;
        }

        public AllergyIntolerance build() {
            return new AllergyIntolerance(b.build());
        }
    }

    public static class AllergyIntoleranceReaction extends FhirObject {
        public static final String RESOURCE_TYPE = "AllergyIntoleranceReaction";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_SUBSTANCE = "substance";
        public static final String PROPERTY_MANIFESTATION = "manifestation";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_ONSET = "onset";
        public static final String PROPERTY_SEVERITY = "severity";
        public static final String PROPERTY_EXPOSUREROUTE = "exposureRoute";
        public static final String PROPERTY_NOTE = "note";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public AllergyIntoleranceReaction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Identification of the specific substance (or pharmaceutical product)
         * considered to be responsible for the Adverse Reaction event. Note: the
         * substance for a specific reaction may be different from the substance
         * identified as the cause of the risk, but it must be consistent with
         * it. For instance, it may be a more specific substance (e.g. a brand
         * medication) or a composite product that includes the identified
         * substance. It must be clinically safe to only process the 'code' and
         * ignore the 'reaction.substance'.  If a receiving system is unable to
         * confirm that AllergyIntolerance.reaction.substance falls within the
         * semantic scope of AllergyIntolerance.code, then the receiving system
         * should ignore AllergyIntolerance.reaction.substance.
         */
        public CodeableConcept substance() {
            return getObject(CodeableConcept.class, PROPERTY_SUBSTANCE);
        }

        /**
         * Clinical symptoms and/or signs that are observed or associated with
         * the adverse reaction event.
         */
        public java.util.List<CodeableConcept> manifestation() {
            return getList(CodeableConcept.class, PROPERTY_MANIFESTATION);
        }

        /**
         * Text description about the reaction as a whole, including details of
         * the manifestation if required.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * Record of the date and/or time of the onset of the Reaction.
         */
        public java.time.Instant onset() {
            return java.time.Instant.parse(data.getString(PROPERTY_ONSET));
        }

        /**
         * Clinical assessment of the severity of the reaction event as a whole,
         * potentially considering multiple different manifestations.
         */
        public String severity() {
            return getString(PROPERTY_SEVERITY);
        }

        /**
         * Identification of the route by which the subject was exposed to the
         * substance.
         */
        public CodeableConcept exposureRoute() {
            return getObject(CodeableConcept.class, PROPERTY_EXPOSUREROUTE);
        }

        /**
         * Additional text about the adverse reaction event not captured in other
         * fields.
         */
        public java.util.List<Annotation> note() {
            return getList(Annotation.class, PROPERTY_NOTE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder substance(final CodeableConcept substance) {
                b.add(PROPERTY_SUBSTANCE, substance);
                return this;
            }

            public Builder manifestation(final java.util.List<CodeableConcept> manifestation) {
                b.add(PROPERTY_MANIFESTATION, FhirObject.toArray(manifestation));
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder onset(final java.time.Instant onset) {
                b.add(PROPERTY_ONSET, onset.toString());
                return this;
            }

            public Builder severity(final String severity) {
                b.add(PROPERTY_SEVERITY, severity);
                return this;
            }

            public Builder exposureRoute(final CodeableConcept exposureRoute) {
                b.add(PROPERTY_EXPOSUREROUTE, exposureRoute);
                return this;
            }

            public Builder note(final java.util.List<Annotation> note) {
                b.add(PROPERTY_NOTE, FhirObject.toArray(note));
                return this;
            }

            public AllergyIntoleranceReaction build() {
                return new AllergyIntoleranceReaction(b.build());
            }
        }
    }
}
