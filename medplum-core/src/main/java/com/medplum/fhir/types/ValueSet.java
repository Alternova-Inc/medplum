/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class ValueSet extends FhirResource {
    public static final String RESOURCE_TYPE = "ValueSet";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_VERSION = "version";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_TITLE = "title";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_EXPERIMENTAL = "experimental";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_PUBLISHER = "publisher";
    public static final String PROPERTY_CONTACT = "contact";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_USECONTEXT = "useContext";
    public static final String PROPERTY_JURISDICTION = "jurisdiction";
    public static final String PROPERTY_IMMUTABLE = "immutable";
    public static final String PROPERTY_PURPOSE = "purpose";
    public static final String PROPERTY_COPYRIGHT = "copyright";
    public static final String PROPERTY_COMPOSE = "compose";
    public static final String PROPERTY_EXPANSION = "expansion";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ValueSet(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * An absolute URI that is used to identify this value set when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this value set is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the value set is stored on different servers.
     */
    public String url() {
        return getString(PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this value set when it is represented in other formats, or referenced in a specification, model, design or an instance.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the value set when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
     */
    public String version() {
        return getString(PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the value set. This name should be usable as an identifier for the module by machine processing applications such as code generation.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the value set.
     */
    public String title() {
        return getString(PROPERTY_TITLE);
    }

    /**
     * The status of this value set. Enables tracking the life-cycle of the content. The status of the value set applies to the value set definition (ValueSet.compose) and the associated ValueSet metadata. Expansions do not have a state.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this value set is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date (and optionally time) when the value set was created or revised (e.g. the 'content logical definition').
     */
    public java.time.Instant date() {
        return java.time.Instant.parse(data.getString(PROPERTY_DATE));
    }

    /**
     * The name of the organization or individual that published the value set.
     */
    public String publisher() {
        return getString(PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the value set from a consumer's perspective. The textual description specifies the span of meanings for concepts to be included within the Value Set Expansion, and also may specify the intended use and limitations of the Value Set.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate value set instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, PROPERTY_USECONTEXT);
    }

    /**
     * A legal or geographic region in which the value set is intended to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, PROPERTY_JURISDICTION);
    }

    /**
     * If this is set to 'true', then no new versions of the content logical definition can be created.  Note: Other metadata might still change.
     */
    public Boolean immutable() {
        return data.getBoolean(PROPERTY_IMMUTABLE);
    }

    /**
     * Explanation of why this value set is needed and why it has been designed as it has.
     */
    public String purpose() {
        return getString(PROPERTY_PURPOSE);
    }

    /**
     * A copyright statement relating to the value set and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the value set.
     */
    public String copyright() {
        return getString(PROPERTY_COPYRIGHT);
    }

    /**
     * A set of criteria that define the contents of the value set by including or excluding codes selected from the specified code system(s) that the value set draws from. This is also known as the Content Logical Definition (CLD).
     */
    public ValueSetCompose compose() {
        return getObject(ValueSetCompose.class, PROPERTY_COMPOSE);
    }

    /**
     * A value set can also be "expanded", where the value set is turned into a simple collection of enumerated codes. This element holds the expansion, if it has been performed.
     */
    public ValueSetExpansion expansion() {
        return getObject(ValueSetExpansion.class, PROPERTY_EXPANSION);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder url(final String url) {
            b.add(PROPERTY_URL, url);
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder version(final String version) {
            b.add(PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(PROPERTY_TITLE, title);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(PROPERTY_USECONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder immutable(final Boolean immutable) {
            b.add(PROPERTY_IMMUTABLE, immutable);
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder compose(final ValueSetCompose compose) {
            b.add(PROPERTY_COMPOSE, compose);
            return this;
        }

        public Builder expansion(final ValueSetExpansion expansion) {
            b.add(PROPERTY_EXPANSION, expansion);
            return this;
        }

        public ValueSet build() {
            return new ValueSet(b.build());
        }
    }

    public static class ValueSetCompose extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetCompose";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_LOCKEDDATE = "lockedDate";
        public static final String PROPERTY_INACTIVE = "inactive";
        public static final String PROPERTY_INCLUDE = "include";
        public static final String PROPERTY_EXCLUDE = "exclude";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetCompose(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The Locked Date is  the effective date that is used to determine the version of all referenced Code Systems and Value Set Definitions included in the compose that are not already tied to a specific version.
         */
        public java.time.Instant lockedDate() {
            return java.time.Instant.parse(data.getString(PROPERTY_LOCKEDDATE));
        }

        /**
         * Whether inactive codes - codes that are not approved for current use - are in the value set. If inactive = true, inactive codes are to be included in the expansion, if inactive = false, the inactive codes will not be included in the expansion. If absent, the behavior is determined by the implementation, or by the applicable $expand parameters (but generally, inactive codes would be expected to be included).
         */
        public Boolean inactive() {
            return data.getBoolean(PROPERTY_INACTIVE);
        }

        /**
         * Include one or more codes from a code system or other value set(s).
         */
        public java.util.List<ValueSetInclude> include() {
            return getList(ValueSetInclude.class, PROPERTY_INCLUDE);
        }

        /**
         * Exclude one or more codes from the value set based on code system filters and/or other value sets.
         */
        public java.util.List<ValueSetInclude> exclude() {
            return getList(ValueSetInclude.class, PROPERTY_EXCLUDE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder lockedDate(final java.time.Instant lockedDate) {
                b.add(PROPERTY_LOCKEDDATE, lockedDate.toString());
                return this;
            }

            public Builder inactive(final Boolean inactive) {
                b.add(PROPERTY_INACTIVE, inactive);
                return this;
            }

            public Builder include(final java.util.List<ValueSetInclude> include) {
                b.add(PROPERTY_INCLUDE, FhirObject.toArray(include));
                return this;
            }

            public Builder exclude(final java.util.List<ValueSetInclude> exclude) {
                b.add(PROPERTY_EXCLUDE, FhirObject.toArray(exclude));
                return this;
            }

            public ValueSetCompose build() {
                return new ValueSetCompose(b.build());
            }
        }
    }

    public static class ValueSetConcept extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetConcept";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_DISPLAY = "display";
        public static final String PROPERTY_DESIGNATION = "designation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetConcept(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Specifies a code for the concept to be included or excluded.
         */
        public String code() {
            return getString(PROPERTY_CODE);
        }

        /**
         * The text to display to the user for this concept in the context of this valueset. If no display is provided, then applications using the value set use the display specified for the code by the system.
         */
        public String display() {
            return getString(PROPERTY_DISPLAY);
        }

        /**
         * Additional representations for this concept when used in this value set - other languages, aliases, specialized purposes, used for particular purposes, etc.
         */
        public java.util.List<ValueSetDesignation> designation() {
            return getList(ValueSetDesignation.class, PROPERTY_DESIGNATION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder designation(final java.util.List<ValueSetDesignation> designation) {
                b.add(PROPERTY_DESIGNATION, FhirObject.toArray(designation));
                return this;
            }

            public ValueSetConcept build() {
                return new ValueSetConcept(b.build());
            }
        }
    }

    public static class ValueSetContains extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetContains";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_SYSTEM = "system";
        public static final String PROPERTY_ABSTRACT = "abstract";
        public static final String PROPERTY_INACTIVE = "inactive";
        public static final String PROPERTY_VERSION = "version";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_DISPLAY = "display";
        public static final String PROPERTY_DESIGNATION = "designation";
        public static final String PROPERTY_CONTAINS = "contains";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetContains(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * An absolute URI which is the code system in which the code for this item in the expansion is defined.
         */
        public String system() {
            return getString(PROPERTY_SYSTEM);
        }

        /**
         * If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value.
         */
        public Boolean abstract_() {
            return data.getBoolean(PROPERTY_ABSTRACT);
        }

        /**
         * If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether an concept is inactive (and it may depend on the context of use).
         */
        public Boolean inactive() {
            return data.getBoolean(PROPERTY_INACTIVE);
        }

        /**
         * The version of the code system from this code was taken. Note that a well-maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged.
         */
        public String version() {
            return getString(PROPERTY_VERSION);
        }

        /**
         * The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set.
         */
        public String code() {
            return getString(PROPERTY_CODE);
        }

        /**
         * The recommended display for this item in the expansion.
         */
        public String display() {
            return getString(PROPERTY_DISPLAY);
        }

        /**
         * Additional representations for this item - other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.
         */
        public java.util.List<ValueSetDesignation> designation() {
            return getList(ValueSetDesignation.class, PROPERTY_DESIGNATION);
        }

        /**
         * Other codes and entries contained under this entry in the hierarchy.
         */
        public java.util.List<ValueSetContains> contains() {
            return getList(ValueSetContains.class, PROPERTY_CONTAINS);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder system(final String system) {
                b.add(PROPERTY_SYSTEM, system);
                return this;
            }

            public Builder abstract_(final Boolean abstract_) {
                b.add(PROPERTY_ABSTRACT, abstract_);
                return this;
            }

            public Builder inactive(final Boolean inactive) {
                b.add(PROPERTY_INACTIVE, inactive);
                return this;
            }

            public Builder version(final String version) {
                b.add(PROPERTY_VERSION, version);
                return this;
            }

            public Builder code(final String code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder designation(final java.util.List<ValueSetDesignation> designation) {
                b.add(PROPERTY_DESIGNATION, FhirObject.toArray(designation));
                return this;
            }

            public Builder contains(final java.util.List<ValueSetContains> contains) {
                b.add(PROPERTY_CONTAINS, FhirObject.toArray(contains));
                return this;
            }

            public ValueSetContains build() {
                return new ValueSetContains(b.build());
            }
        }
    }

    public static class ValueSetDesignation extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetDesignation";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_LANGUAGE = "language";
        public static final String PROPERTY_USE = "use";
        public static final String PROPERTY_VALUE = "value";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetDesignation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The language this designation is defined for.
         */
        public String language() {
            return getString(PROPERTY_LANGUAGE);
        }

        /**
         * A code that represents types of uses of designations.
         */
        public Coding use() {
            return getObject(Coding.class, PROPERTY_USE);
        }

        /**
         * The text value for this designation.
         */
        public String value() {
            return getString(PROPERTY_VALUE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder language(final String language) {
                b.add(PROPERTY_LANGUAGE, language);
                return this;
            }

            public Builder use(final Coding use) {
                b.add(PROPERTY_USE, use);
                return this;
            }

            public Builder value(final String value) {
                b.add(PROPERTY_VALUE, value);
                return this;
            }

            public ValueSetDesignation build() {
                return new ValueSetDesignation(b.build());
            }
        }
    }

    public static class ValueSetExpansion extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetExpansion";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_IDENTIFIER = "identifier";
        public static final String PROPERTY_TIMESTAMP = "timestamp";
        public static final String PROPERTY_TOTAL = "total";
        public static final String PROPERTY_OFFSET = "offset";
        public static final String PROPERTY_PARAMETER = "parameter";
        public static final String PROPERTY_CONTAINS = "contains";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetExpansion(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re-use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier.
         */
        public String identifier() {
            return getString(PROPERTY_IDENTIFIER);
        }

        /**
         * The time at which the expansion was produced by the expanding system.
         */
        public java.time.Instant timestamp() {
            return java.time.Instant.parse(data.getString(PROPERTY_TIMESTAMP));
        }

        /**
         * The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter.
         */
        public Integer total() {
            return data.getInt(PROPERTY_TOTAL);
        }

        /**
         * If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present.
         */
        public Integer offset() {
            return data.getInt(PROPERTY_OFFSET);
        }

        /**
         * A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.
         */
        public java.util.List<ValueSetParameter> parameter() {
            return getList(ValueSetParameter.class, PROPERTY_PARAMETER);
        }

        /**
         * The codes that are contained in the value set expansion.
         */
        public java.util.List<ValueSetContains> contains() {
            return getList(ValueSetContains.class, PROPERTY_CONTAINS);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final String identifier) {
                b.add(PROPERTY_IDENTIFIER, identifier);
                return this;
            }

            public Builder timestamp(final java.time.Instant timestamp) {
                b.add(PROPERTY_TIMESTAMP, timestamp.toString());
                return this;
            }

            public Builder total(final Integer total) {
                b.add(PROPERTY_TOTAL, total);
                return this;
            }

            public Builder offset(final Integer offset) {
                b.add(PROPERTY_OFFSET, offset);
                return this;
            }

            public Builder parameter(final java.util.List<ValueSetParameter> parameter) {
                b.add(PROPERTY_PARAMETER, FhirObject.toArray(parameter));
                return this;
            }

            public Builder contains(final java.util.List<ValueSetContains> contains) {
                b.add(PROPERTY_CONTAINS, FhirObject.toArray(contains));
                return this;
            }

            public ValueSetExpansion build() {
                return new ValueSetExpansion(b.build());
            }
        }
    }

    public static class ValueSetFilter extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetFilter";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_PROPERTY = "property";
        public static final String PROPERTY_OP = "op";
        public static final String PROPERTY_VALUE = "value";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetFilter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A code that identifies a property or a filter defined in the code system.
         */
        public String property() {
            return getString(PROPERTY_PROPERTY);
        }

        /**
         * The kind of operation to perform as a part of the filter criteria.
         */
        public String op() {
            return getString(PROPERTY_OP);
        }

        /**
         * The match value may be either a code defined by the system, or a string value, which is a regex match on the literal string of the property value  (if the filter represents a property defined in CodeSystem) or of the system filter value (if the filter represents a filter defined in CodeSystem) when the operation is 'regex', or one of the values (true and false), when the operation is 'exists'.
         */
        public String value() {
            return getString(PROPERTY_VALUE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder property(final String property) {
                b.add(PROPERTY_PROPERTY, property);
                return this;
            }

            public Builder op(final String op) {
                b.add(PROPERTY_OP, op);
                return this;
            }

            public Builder value(final String value) {
                b.add(PROPERTY_VALUE, value);
                return this;
            }

            public ValueSetFilter build() {
                return new ValueSetFilter(b.build());
            }
        }
    }

    public static class ValueSetInclude extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetInclude";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_SYSTEM = "system";
        public static final String PROPERTY_VERSION = "version";
        public static final String PROPERTY_CONCEPT = "concept";
        public static final String PROPERTY_FILTER = "filter";
        public static final String PROPERTY_VALUESET = "valueSet";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetInclude(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * An absolute URI which is the code system from which the selected codes come from.
         */
        public String system() {
            return getString(PROPERTY_SYSTEM);
        }

        /**
         * The version of the code system that the codes are selected from, or the special version '*' for all versions.
         */
        public String version() {
            return getString(PROPERTY_VERSION);
        }

        /**
         * Specifies a concept to be included or excluded.
         */
        public java.util.List<ValueSetConcept> concept() {
            return getList(ValueSetConcept.class, PROPERTY_CONCEPT);
        }

        /**
         * Select concepts by specify a matching criterion based on the properties (including relationships) defined by the system, or on filters defined by the system. If multiple filters are specified, they SHALL all be true.
         */
        public java.util.List<ValueSetFilter> filter() {
            return getList(ValueSetFilter.class, PROPERTY_FILTER);
        }

        /**
         * Selects the concepts found in this value set (based on its value set definition). This is an absolute URI that is a reference to ValueSet.url.  If multiple value sets are specified this includes the union of the contents of all of the referenced value sets.
         */
        public java.util.List<String> valueSet() {
            return getList(String.class, PROPERTY_VALUESET);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder system(final String system) {
                b.add(PROPERTY_SYSTEM, system);
                return this;
            }

            public Builder version(final String version) {
                b.add(PROPERTY_VERSION, version);
                return this;
            }

            public Builder concept(final java.util.List<ValueSetConcept> concept) {
                b.add(PROPERTY_CONCEPT, FhirObject.toArray(concept));
                return this;
            }

            public Builder filter(final java.util.List<ValueSetFilter> filter) {
                b.add(PROPERTY_FILTER, FhirObject.toArray(filter));
                return this;
            }

            public Builder valueSet(final java.util.List<String> valueSet) {
                b.add(PROPERTY_VALUESET, FhirObject.toStringArray(valueSet));
                return this;
            }

            public ValueSetInclude build() {
                return new ValueSetInclude(b.build());
            }
        }
    }

    public static class ValueSetParameter extends FhirObject {
        public static final String RESOURCE_TYPE = "ValueSetParameter";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_NAME = "name";
        public static final String PROPERTY_VALUESTRING = "valueString";
        public static final String PROPERTY_VALUEBOOLEAN = "valueBoolean";
        public static final String PROPERTY_VALUEINTEGER = "valueInteger";
        public static final String PROPERTY_VALUEDECIMAL = "valueDecimal";
        public static final String PROPERTY_VALUEURI = "valueUri";
        public static final String PROPERTY_VALUECODE = "valueCode";
        public static final String PROPERTY_VALUEDATETIME = "valueDateTime";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ValueSetParameter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Name of the input parameter to the $expand operation; may be a server-assigned name for additional default or other server-supplied parameters used to control the expansion process.
         */
        public String name() {
            return getString(PROPERTY_NAME);
        }

        /**
         * The value of the parameter.
         */
        public String valueString() {
            return getString(PROPERTY_VALUESTRING);
        }

        /**
         * The value of the parameter.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(PROPERTY_VALUEBOOLEAN);
        }

        /**
         * The value of the parameter.
         */
        public Integer valueInteger() {
            return data.getInt(PROPERTY_VALUEINTEGER);
        }

        /**
         * The value of the parameter.
         */
        public Integer valueDecimal() {
            return data.getInt(PROPERTY_VALUEDECIMAL);
        }

        /**
         * The value of the parameter.
         */
        public String valueUri() {
            return getString(PROPERTY_VALUEURI);
        }

        /**
         * The value of the parameter.
         */
        public String valueCode() {
            return getString(PROPERTY_VALUECODE);
        }

        /**
         * The value of the parameter.
         */
        public String valueDateTime() {
            return getString(PROPERTY_VALUEDATETIME);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder name(final String name) {
                b.add(PROPERTY_NAME, name);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(PROPERTY_VALUESTRING, valueString);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(PROPERTY_VALUEBOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(PROPERTY_VALUEINTEGER, valueInteger);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(PROPERTY_VALUEDECIMAL, valueDecimal);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(PROPERTY_VALUEURI, valueUri);
                return this;
            }

            public Builder valueCode(final String valueCode) {
                b.add(PROPERTY_VALUECODE, valueCode);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(PROPERTY_VALUEDATETIME, valueDateTime);
                return this;
            }

            public ValueSetParameter build() {
                return new ValueSetParameter(b.build());
            }
        }
    }
}
