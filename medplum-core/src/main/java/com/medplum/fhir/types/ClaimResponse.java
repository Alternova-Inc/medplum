/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class ClaimResponse extends FhirResource {
    public static final String RESOURCE_TYPE = "ClaimResponse";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_SUBTYPE = "subType";
    public static final String PROPERTY_USE = "use";
    public static final String PROPERTY_PATIENT = "patient";
    public static final String PROPERTY_CREATED = "created";
    public static final String PROPERTY_INSURER = "insurer";
    public static final String PROPERTY_REQUESTOR = "requestor";
    public static final String PROPERTY_REQUEST = "request";
    public static final String PROPERTY_OUTCOME = "outcome";
    public static final String PROPERTY_DISPOSITION = "disposition";
    public static final String PROPERTY_PREAUTHREF = "preAuthRef";
    public static final String PROPERTY_PREAUTHPERIOD = "preAuthPeriod";
    public static final String PROPERTY_PAYEETYPE = "payeeType";
    public static final String PROPERTY_ITEM = "item";
    public static final String PROPERTY_ADDITEM = "addItem";
    public static final String PROPERTY_ADJUDICATION = "adjudication";
    public static final String PROPERTY_TOTAL = "total";
    public static final String PROPERTY_PAYMENT = "payment";
    public static final String PROPERTY_FUNDSRESERVE = "fundsReserve";
    public static final String PROPERTY_FORMCODE = "formCode";
    public static final String PROPERTY_FORM = "form";
    public static final String PROPERTY_PROCESSNOTE = "processNote";
    public static final String PROPERTY_COMMUNICATIONREQUEST = "communicationRequest";
    public static final String PROPERTY_INSURANCE = "insurance";
    public static final String PROPERTY_ERROR = "error";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ClaimResponse(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * A unique identifier assigned to this claim response.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The status of the resource instance.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, PROPERTY_TYPE);
    }

    /**
     * A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
     */
    public CodeableConcept subType() {
        return getObject(CodeableConcept.class, PROPERTY_SUBTYPE);
    }

    /**
     * A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
     */
    public String use() {
        return getString(PROPERTY_USE);
    }

    /**
     * The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
     */
    public Reference patient() {
        return getObject(Reference.class, PROPERTY_PATIENT);
    }

    /**
     * The date this resource was created.
     */
    public java.time.Instant created() {
        return java.time.Instant.parse(data.getString(PROPERTY_CREATED));
    }

    /**
     * The party responsible for authorization, adjudication and reimbursement.
     */
    public Reference insurer() {
        return getObject(Reference.class, PROPERTY_INSURER);
    }

    /**
     * The provider which is responsible for the claim, predetermination or preauthorization.
     */
    public Reference requestor() {
        return getObject(Reference.class, PROPERTY_REQUESTOR);
    }

    /**
     * Original request resource reference.
     */
    public Reference request() {
        return getObject(Reference.class, PROPERTY_REQUEST);
    }

    /**
     * The outcome of the claim, predetermination, or preauthorization processing.
     */
    public String outcome() {
        return getString(PROPERTY_OUTCOME);
    }

    /**
     * A human readable description of the status of the adjudication.
     */
    public String disposition() {
        return getString(PROPERTY_DISPOSITION);
    }

    /**
     * Reference from the Insurer which is used in later communications which refers to this adjudication.
     */
    public String preAuthRef() {
        return getString(PROPERTY_PREAUTHREF);
    }

    /**
     * The time frame during which this authorization is effective.
     */
    public Period preAuthPeriod() {
        return getObject(Period.class, PROPERTY_PREAUTHPERIOD);
    }

    /**
     * Type of Party to be reimbursed: subscriber, provider, other.
     */
    public CodeableConcept payeeType() {
        return getObject(CodeableConcept.class, PROPERTY_PAYEETYPE);
    }

    /**
     * A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
     */
    public java.util.List<ClaimResponseItem> item() {
        return getList(ClaimResponseItem.class, PROPERTY_ITEM);
    }

    /**
     * The first-tier service adjudications for payor added product or service lines.
     */
    public java.util.List<ClaimResponseAddItem> addItem() {
        return getList(ClaimResponseAddItem.class, PROPERTY_ADDITEM);
    }

    /**
     * The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
     */
    public java.util.List<ClaimResponseAdjudication> adjudication() {
        return getList(ClaimResponseAdjudication.class, PROPERTY_ADJUDICATION);
    }

    /**
     * Categorized monetary totals for the adjudication.
     */
    public java.util.List<ClaimResponseTotal> total() {
        return getList(ClaimResponseTotal.class, PROPERTY_TOTAL);
    }

    /**
     * Payment details for the adjudication of the claim.
     */
    public ClaimResponsePayment payment() {
        return getObject(ClaimResponsePayment.class, PROPERTY_PAYMENT);
    }

    /**
     * A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
     */
    public CodeableConcept fundsReserve() {
        return getObject(CodeableConcept.class, PROPERTY_FUNDSRESERVE);
    }

    /**
     * A code for the form to be used for printing the content.
     */
    public CodeableConcept formCode() {
        return getObject(CodeableConcept.class, PROPERTY_FORMCODE);
    }

    /**
     * The actual form, by reference or inclusion, for printing the content or an EOB.
     */
    public Attachment form() {
        return getObject(Attachment.class, PROPERTY_FORM);
    }

    /**
     * A note that describes or explains adjudication results in a human readable form.
     */
    public java.util.List<ClaimResponseProcessNote> processNote() {
        return getList(ClaimResponseProcessNote.class, PROPERTY_PROCESSNOTE);
    }

    /**
     * Request for additional supporting or authorizing information.
     */
    public java.util.List<Reference> communicationRequest() {
        return getList(Reference.class, PROPERTY_COMMUNICATIONREQUEST);
    }

    /**
     * Financial instruments for reimbursement for the health care products and services specified on the claim.
     */
    public java.util.List<ClaimResponseInsurance> insurance() {
        return getList(ClaimResponseInsurance.class, PROPERTY_INSURANCE);
    }

    /**
     * Errors encountered during the processing of the adjudication.
     */
    public java.util.List<ClaimResponseError> error() {
        return getList(ClaimResponseError.class, PROPERTY_ERROR);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder subType(final CodeableConcept subType) {
            b.add(PROPERTY_SUBTYPE, subType);
            return this;
        }

        public Builder use(final String use) {
            b.add(PROPERTY_USE, use);
            return this;
        }

        public Builder patient(final Reference patient) {
            b.add(PROPERTY_PATIENT, patient);
            return this;
        }

        public Builder created(final java.time.Instant created) {
            b.add(PROPERTY_CREATED, created.toString());
            return this;
        }

        public Builder insurer(final Reference insurer) {
            b.add(PROPERTY_INSURER, insurer);
            return this;
        }

        public Builder requestor(final Reference requestor) {
            b.add(PROPERTY_REQUESTOR, requestor);
            return this;
        }

        public Builder request(final Reference request) {
            b.add(PROPERTY_REQUEST, request);
            return this;
        }

        public Builder outcome(final String outcome) {
            b.add(PROPERTY_OUTCOME, outcome);
            return this;
        }

        public Builder disposition(final String disposition) {
            b.add(PROPERTY_DISPOSITION, disposition);
            return this;
        }

        public Builder preAuthRef(final String preAuthRef) {
            b.add(PROPERTY_PREAUTHREF, preAuthRef);
            return this;
        }

        public Builder preAuthPeriod(final Period preAuthPeriod) {
            b.add(PROPERTY_PREAUTHPERIOD, preAuthPeriod);
            return this;
        }

        public Builder payeeType(final CodeableConcept payeeType) {
            b.add(PROPERTY_PAYEETYPE, payeeType);
            return this;
        }

        public Builder item(final java.util.List<ClaimResponseItem> item) {
            b.add(PROPERTY_ITEM, FhirObject.toArray(item));
            return this;
        }

        public Builder addItem(final java.util.List<ClaimResponseAddItem> addItem) {
            b.add(PROPERTY_ADDITEM, FhirObject.toArray(addItem));
            return this;
        }

        public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
            b.add(PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
            return this;
        }

        public Builder total(final java.util.List<ClaimResponseTotal> total) {
            b.add(PROPERTY_TOTAL, FhirObject.toArray(total));
            return this;
        }

        public Builder payment(final ClaimResponsePayment payment) {
            b.add(PROPERTY_PAYMENT, payment);
            return this;
        }

        public Builder fundsReserve(final CodeableConcept fundsReserve) {
            b.add(PROPERTY_FUNDSRESERVE, fundsReserve);
            return this;
        }

        public Builder formCode(final CodeableConcept formCode) {
            b.add(PROPERTY_FORMCODE, formCode);
            return this;
        }

        public Builder form(final Attachment form) {
            b.add(PROPERTY_FORM, form);
            return this;
        }

        public Builder processNote(final java.util.List<ClaimResponseProcessNote> processNote) {
            b.add(PROPERTY_PROCESSNOTE, FhirObject.toArray(processNote));
            return this;
        }

        public Builder communicationRequest(final java.util.List<Reference> communicationRequest) {
            b.add(PROPERTY_COMMUNICATIONREQUEST, FhirObject.toArray(communicationRequest));
            return this;
        }

        public Builder insurance(final java.util.List<ClaimResponseInsurance> insurance) {
            b.add(PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder error(final java.util.List<ClaimResponseError> error) {
            b.add(PROPERTY_ERROR, FhirObject.toArray(error));
            return this;
        }

        public ClaimResponse build() {
            return new ClaimResponse(b.build());
        }
    }

    public static class ClaimResponseAddItem extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseAddItem";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_ITEMSEQUENCE = "itemSequence";
        public static final String PROPERTY_DETAILSEQUENCE = "detailSequence";
        public static final String PROPERTY_SUBDETAILSEQUENCE = "subdetailSequence";
        public static final String PROPERTY_PROVIDER = "provider";
        public static final String PROPERTY_PRODUCTORSERVICE = "productOrService";
        public static final String PROPERTY_MODIFIER = "modifier";
        public static final String PROPERTY_PROGRAMCODE = "programCode";
        public static final String PROPERTY_SERVICEDDATE = "servicedDate";
        public static final String PROPERTY_SERVICEDPERIOD = "servicedPeriod";
        public static final String PROPERTY_LOCATIONCODEABLECONCEPT = "locationCodeableConcept";
        public static final String PROPERTY_LOCATIONADDRESS = "locationAddress";
        public static final String PROPERTY_LOCATIONREFERENCE = "locationReference";
        public static final String PROPERTY_QUANTITY = "quantity";
        public static final String PROPERTY_UNITPRICE = "unitPrice";
        public static final String PROPERTY_FACTOR = "factor";
        public static final String PROPERTY_NET = "net";
        public static final String PROPERTY_BODYSITE = "bodySite";
        public static final String PROPERTY_SUBSITE = "subSite";
        public static final String PROPERTY_NOTENUMBER = "noteNumber";
        public static final String PROPERTY_ADJUDICATION = "adjudication";
        public static final String PROPERTY_DETAIL = "detail";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseAddItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Claim items which this service line is intended to replace.
         */
        public java.util.List<Integer> itemSequence() {
            return getList(Integer.class, PROPERTY_ITEMSEQUENCE);
        }

        /**
         * The sequence number of the details within the claim item which this line is intended to replace.
         */
        public java.util.List<Integer> detailSequence() {
            return getList(Integer.class, PROPERTY_DETAILSEQUENCE);
        }

        /**
         * The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
         */
        public java.util.List<Integer> subdetailSequence() {
            return getList(Integer.class, PROPERTY_SUBDETAILSEQUENCE);
        }

        /**
         * The providers who are authorized for the services rendered to the patient.
         */
        public java.util.List<Reference> provider() {
            return getList(Reference.class, PROPERTY_PROVIDER);
        }

        /**
         * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
         */
        public CodeableConcept productOrService() {
            return getObject(CodeableConcept.class, PROPERTY_PRODUCTORSERVICE);
        }

        /**
         * Item typification or modifiers codes to convey additional context for the product or service.
         */
        public java.util.List<CodeableConcept> modifier() {
            return getList(CodeableConcept.class, PROPERTY_MODIFIER);
        }

        /**
         * Identifies the program under which this may be recovered.
         */
        public java.util.List<CodeableConcept> programCode() {
            return getList(CodeableConcept.class, PROPERTY_PROGRAMCODE);
        }

        /**
         * The date or dates when the service or product was supplied, performed or completed.
         */
        public String servicedDate() {
            return getString(PROPERTY_SERVICEDDATE);
        }

        /**
         * The date or dates when the service or product was supplied, performed or completed.
         */
        public Period servicedPeriod() {
            return getObject(Period.class, PROPERTY_SERVICEDPERIOD);
        }

        /**
         * Where the product or service was provided.
         */
        public CodeableConcept locationCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_LOCATIONCODEABLECONCEPT);
        }

        /**
         * Where the product or service was provided.
         */
        public Address locationAddress() {
            return getObject(Address.class, PROPERTY_LOCATIONADDRESS);
        }

        /**
         * Where the product or service was provided.
         */
        public Reference locationReference() {
            return getObject(Reference.class, PROPERTY_LOCATIONREFERENCE);
        }

        /**
         * The number of repetitions of a service or product.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, PROPERTY_QUANTITY);
        }

        /**
         * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
         */
        public Money unitPrice() {
            return getObject(Money.class, PROPERTY_UNITPRICE);
        }

        /**
         * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
         */
        public Double factor() {
            return data.getJsonNumber(PROPERTY_FACTOR).doubleValue();
        }

        /**
         * The quantity times the unit price for an additional service or product or charge.
         */
        public Money net() {
            return getObject(Money.class, PROPERTY_NET);
        }

        /**
         * Physical service site on the patient (limb, tooth, etc.).
         */
        public CodeableConcept bodySite() {
            return getObject(CodeableConcept.class, PROPERTY_BODYSITE);
        }

        /**
         * A region or surface of the bodySite, e.g. limb region or tooth surface(s).
         */
        public java.util.List<CodeableConcept> subSite() {
            return getList(CodeableConcept.class, PROPERTY_SUBSITE);
        }

        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, PROPERTY_NOTENUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, PROPERTY_ADJUDICATION);
        }

        /**
         * The second-tier service adjudications for payor added services.
         */
        public java.util.List<ClaimResponseDetail1> detail() {
            return getList(ClaimResponseDetail1.class, PROPERTY_DETAIL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemSequence(final java.util.List<Integer> itemSequence) {
                b.add(PROPERTY_ITEMSEQUENCE, FhirObject.toIntegerArray(itemSequence));
                return this;
            }

            public Builder detailSequence(final java.util.List<Integer> detailSequence) {
                b.add(PROPERTY_DETAILSEQUENCE, FhirObject.toIntegerArray(detailSequence));
                return this;
            }

            public Builder subdetailSequence(final java.util.List<Integer> subdetailSequence) {
                b.add(PROPERTY_SUBDETAILSEQUENCE, FhirObject.toIntegerArray(subdetailSequence));
                return this;
            }

            public Builder provider(final java.util.List<Reference> provider) {
                b.add(PROPERTY_PROVIDER, FhirObject.toArray(provider));
                return this;
            }

            public Builder productOrService(final CodeableConcept productOrService) {
                b.add(PROPERTY_PRODUCTORSERVICE, productOrService);
                return this;
            }

            public Builder modifier(final java.util.List<CodeableConcept> modifier) {
                b.add(PROPERTY_MODIFIER, FhirObject.toArray(modifier));
                return this;
            }

            public Builder programCode(final java.util.List<CodeableConcept> programCode) {
                b.add(PROPERTY_PROGRAMCODE, FhirObject.toArray(programCode));
                return this;
            }

            public Builder servicedDate(final String servicedDate) {
                b.add(PROPERTY_SERVICEDDATE, servicedDate);
                return this;
            }

            public Builder servicedPeriod(final Period servicedPeriod) {
                b.add(PROPERTY_SERVICEDPERIOD, servicedPeriod);
                return this;
            }

            public Builder locationCodeableConcept(final CodeableConcept locationCodeableConcept) {
                b.add(PROPERTY_LOCATIONCODEABLECONCEPT, locationCodeableConcept);
                return this;
            }

            public Builder locationAddress(final Address locationAddress) {
                b.add(PROPERTY_LOCATIONADDRESS, locationAddress);
                return this;
            }

            public Builder locationReference(final Reference locationReference) {
                b.add(PROPERTY_LOCATIONREFERENCE, locationReference);
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder unitPrice(final Money unitPrice) {
                b.add(PROPERTY_UNITPRICE, unitPrice);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder net(final Money net) {
                b.add(PROPERTY_NET, net);
                return this;
            }

            public Builder bodySite(final CodeableConcept bodySite) {
                b.add(PROPERTY_BODYSITE, bodySite);
                return this;
            }

            public Builder subSite(final java.util.List<CodeableConcept> subSite) {
                b.add(PROPERTY_SUBSITE, FhirObject.toArray(subSite));
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(PROPERTY_NOTENUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public Builder detail(final java.util.List<ClaimResponseDetail1> detail) {
                b.add(PROPERTY_DETAIL, FhirObject.toArray(detail));
                return this;
            }

            public ClaimResponseAddItem build() {
                return new ClaimResponseAddItem(b.build());
            }
        }
    }

    public static class ClaimResponseAdjudication extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseAdjudication";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_CATEGORY = "category";
        public static final String PROPERTY_REASON = "reason";
        public static final String PROPERTY_AMOUNT = "amount";
        public static final String PROPERTY_VALUE = "value";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseAdjudication(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item.
         */
        public CodeableConcept category() {
            return getObject(CodeableConcept.class, PROPERTY_CATEGORY);
        }

        /**
         * A code supporting the understanding of the adjudication result and explaining variance from expected amount.
         */
        public CodeableConcept reason() {
            return getObject(CodeableConcept.class, PROPERTY_REASON);
        }

        /**
         * Monetary amount associated with the category.
         */
        public Money amount() {
            return getObject(Money.class, PROPERTY_AMOUNT);
        }

        /**
         * A non-monetary value associated with the category. Mutually exclusive to the amount element above.
         */
        public Double value() {
            return data.getJsonNumber(PROPERTY_VALUE).doubleValue();
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder category(final CodeableConcept category) {
                b.add(PROPERTY_CATEGORY, category);
                return this;
            }

            public Builder reason(final CodeableConcept reason) {
                b.add(PROPERTY_REASON, reason);
                return this;
            }

            public Builder amount(final Money amount) {
                b.add(PROPERTY_AMOUNT, amount);
                return this;
            }

            public Builder value(final Double value) {
                b.add(PROPERTY_VALUE, value);
                return this;
            }

            public ClaimResponseAdjudication build() {
                return new ClaimResponseAdjudication(b.build());
            }
        }
    }

    public static class ClaimResponseDetail extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseDetail";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_DETAILSEQUENCE = "detailSequence";
        public static final String PROPERTY_NOTENUMBER = "noteNumber";
        public static final String PROPERTY_ADJUDICATION = "adjudication";
        public static final String PROPERTY_SUBDETAIL = "subDetail";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseDetail(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A number to uniquely reference the claim detail entry.
         */
        public Integer detailSequence() {
            return data.getInt(PROPERTY_DETAILSEQUENCE);
        }

        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, PROPERTY_NOTENUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, PROPERTY_ADJUDICATION);
        }

        /**
         * A sub-detail adjudication of a simple product or service.
         */
        public java.util.List<ClaimResponseSubDetail> subDetail() {
            return getList(ClaimResponseSubDetail.class, PROPERTY_SUBDETAIL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder detailSequence(final Integer detailSequence) {
                b.add(PROPERTY_DETAILSEQUENCE, detailSequence);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(PROPERTY_NOTENUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public Builder subDetail(final java.util.List<ClaimResponseSubDetail> subDetail) {
                b.add(PROPERTY_SUBDETAIL, FhirObject.toArray(subDetail));
                return this;
            }

            public ClaimResponseDetail build() {
                return new ClaimResponseDetail(b.build());
            }
        }
    }

    public static class ClaimResponseDetail1 extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseDetail1";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_PRODUCTORSERVICE = "productOrService";
        public static final String PROPERTY_MODIFIER = "modifier";
        public static final String PROPERTY_QUANTITY = "quantity";
        public static final String PROPERTY_UNITPRICE = "unitPrice";
        public static final String PROPERTY_FACTOR = "factor";
        public static final String PROPERTY_NET = "net";
        public static final String PROPERTY_NOTENUMBER = "noteNumber";
        public static final String PROPERTY_ADJUDICATION = "adjudication";
        public static final String PROPERTY_SUBDETAIL = "subDetail";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseDetail1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
         */
        public CodeableConcept productOrService() {
            return getObject(CodeableConcept.class, PROPERTY_PRODUCTORSERVICE);
        }

        /**
         * Item typification or modifiers codes to convey additional context for the product or service.
         */
        public java.util.List<CodeableConcept> modifier() {
            return getList(CodeableConcept.class, PROPERTY_MODIFIER);
        }

        /**
         * The number of repetitions of a service or product.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, PROPERTY_QUANTITY);
        }

        /**
         * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
         */
        public Money unitPrice() {
            return getObject(Money.class, PROPERTY_UNITPRICE);
        }

        /**
         * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
         */
        public Double factor() {
            return data.getJsonNumber(PROPERTY_FACTOR).doubleValue();
        }

        /**
         * The quantity times the unit price for an additional service or product or charge.
         */
        public Money net() {
            return getObject(Money.class, PROPERTY_NET);
        }

        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, PROPERTY_NOTENUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, PROPERTY_ADJUDICATION);
        }

        /**
         * The third-tier service adjudications for payor added services.
         */
        public java.util.List<ClaimResponseSubDetail1> subDetail() {
            return getList(ClaimResponseSubDetail1.class, PROPERTY_SUBDETAIL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder productOrService(final CodeableConcept productOrService) {
                b.add(PROPERTY_PRODUCTORSERVICE, productOrService);
                return this;
            }

            public Builder modifier(final java.util.List<CodeableConcept> modifier) {
                b.add(PROPERTY_MODIFIER, FhirObject.toArray(modifier));
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder unitPrice(final Money unitPrice) {
                b.add(PROPERTY_UNITPRICE, unitPrice);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder net(final Money net) {
                b.add(PROPERTY_NET, net);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(PROPERTY_NOTENUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public Builder subDetail(final java.util.List<ClaimResponseSubDetail1> subDetail) {
                b.add(PROPERTY_SUBDETAIL, FhirObject.toArray(subDetail));
                return this;
            }

            public ClaimResponseDetail1 build() {
                return new ClaimResponseDetail1(b.build());
            }
        }
    }

    public static class ClaimResponseError extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseError";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_ITEMSEQUENCE = "itemSequence";
        public static final String PROPERTY_DETAILSEQUENCE = "detailSequence";
        public static final String PROPERTY_SUBDETAILSEQUENCE = "subDetailSequence";
        public static final String PROPERTY_CODE = "code";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseError(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
         */
        public Integer itemSequence() {
            return data.getInt(PROPERTY_ITEMSEQUENCE);
        }

        /**
         * The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
         */
        public Integer detailSequence() {
            return data.getInt(PROPERTY_DETAILSEQUENCE);
        }

        /**
         * The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
         */
        public Integer subDetailSequence() {
            return data.getInt(PROPERTY_SUBDETAILSEQUENCE);
        }

        /**
         * An error code, from a specified code system, which details why the claim could not be adjudicated.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, PROPERTY_CODE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemSequence(final Integer itemSequence) {
                b.add(PROPERTY_ITEMSEQUENCE, itemSequence);
                return this;
            }

            public Builder detailSequence(final Integer detailSequence) {
                b.add(PROPERTY_DETAILSEQUENCE, detailSequence);
                return this;
            }

            public Builder subDetailSequence(final Integer subDetailSequence) {
                b.add(PROPERTY_SUBDETAILSEQUENCE, subDetailSequence);
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public ClaimResponseError build() {
                return new ClaimResponseError(b.build());
            }
        }
    }

    public static class ClaimResponseInsurance extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseInsurance";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_SEQUENCE = "sequence";
        public static final String PROPERTY_FOCAL = "focal";
        public static final String PROPERTY_COVERAGE = "coverage";
        public static final String PROPERTY_BUSINESSARRANGEMENT = "businessArrangement";
        public static final String PROPERTY_CLAIMRESPONSE = "claimResponse";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseInsurance(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
         */
        public Integer sequence() {
            return data.getInt(PROPERTY_SEQUENCE);
        }

        /**
         * A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
         */
        public Boolean focal() {
            return data.getBoolean(PROPERTY_FOCAL);
        }

        /**
         * Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
         */
        public Reference coverage() {
            return getObject(Reference.class, PROPERTY_COVERAGE);
        }

        /**
         * A business agreement number established between the provider and the insurer for special business processing purposes.
         */
        public String businessArrangement() {
            return getString(PROPERTY_BUSINESSARRANGEMENT);
        }

        /**
         * The result of the adjudication of the line items for the Coverage specified in this insurance.
         */
        public Reference claimResponse() {
            return getObject(Reference.class, PROPERTY_CLAIMRESPONSE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder sequence(final Integer sequence) {
                b.add(PROPERTY_SEQUENCE, sequence);
                return this;
            }

            public Builder focal(final Boolean focal) {
                b.add(PROPERTY_FOCAL, focal);
                return this;
            }

            public Builder coverage(final Reference coverage) {
                b.add(PROPERTY_COVERAGE, coverage);
                return this;
            }

            public Builder businessArrangement(final String businessArrangement) {
                b.add(PROPERTY_BUSINESSARRANGEMENT, businessArrangement);
                return this;
            }

            public Builder claimResponse(final Reference claimResponse) {
                b.add(PROPERTY_CLAIMRESPONSE, claimResponse);
                return this;
            }

            public ClaimResponseInsurance build() {
                return new ClaimResponseInsurance(b.build());
            }
        }
    }

    public static class ClaimResponseItem extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseItem";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_ITEMSEQUENCE = "itemSequence";
        public static final String PROPERTY_NOTENUMBER = "noteNumber";
        public static final String PROPERTY_ADJUDICATION = "adjudication";
        public static final String PROPERTY_DETAIL = "detail";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A number to uniquely reference the claim item entries.
         */
        public Integer itemSequence() {
            return data.getInt(PROPERTY_ITEMSEQUENCE);
        }

        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, PROPERTY_NOTENUMBER);
        }

        /**
         * If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, PROPERTY_ADJUDICATION);
        }

        /**
         * A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
         */
        public java.util.List<ClaimResponseDetail> detail() {
            return getList(ClaimResponseDetail.class, PROPERTY_DETAIL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemSequence(final Integer itemSequence) {
                b.add(PROPERTY_ITEMSEQUENCE, itemSequence);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(PROPERTY_NOTENUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public Builder detail(final java.util.List<ClaimResponseDetail> detail) {
                b.add(PROPERTY_DETAIL, FhirObject.toArray(detail));
                return this;
            }

            public ClaimResponseItem build() {
                return new ClaimResponseItem(b.build());
            }
        }
    }

    public static class ClaimResponsePayment extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponsePayment";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_ADJUSTMENT = "adjustment";
        public static final String PROPERTY_ADJUSTMENTREASON = "adjustmentReason";
        public static final String PROPERTY_DATE = "date";
        public static final String PROPERTY_AMOUNT = "amount";
        public static final String PROPERTY_IDENTIFIER = "identifier";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponsePayment(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Whether this represents partial or complete payment of the benefits payable.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
         */
        public Money adjustment() {
            return getObject(Money.class, PROPERTY_ADJUSTMENT);
        }

        /**
         * Reason for the payment adjustment.
         */
        public CodeableConcept adjustmentReason() {
            return getObject(CodeableConcept.class, PROPERTY_ADJUSTMENTREASON);
        }

        /**
         * Estimated date the payment will be issued or the actual issue date of payment.
         */
        public java.time.Instant date() {
            return java.time.Instant.parse(data.getString(PROPERTY_DATE));
        }

        /**
         * Benefits payable less any payment adjustment.
         */
        public Money amount() {
            return getObject(Money.class, PROPERTY_AMOUNT);
        }

        /**
         * Issuer's unique identifier for the payment instrument.
         */
        public Identifier identifier() {
            return getObject(Identifier.class, PROPERTY_IDENTIFIER);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder adjustment(final Money adjustment) {
                b.add(PROPERTY_ADJUSTMENT, adjustment);
                return this;
            }

            public Builder adjustmentReason(final CodeableConcept adjustmentReason) {
                b.add(PROPERTY_ADJUSTMENTREASON, adjustmentReason);
                return this;
            }

            public Builder date(final java.time.Instant date) {
                b.add(PROPERTY_DATE, date.toString());
                return this;
            }

            public Builder amount(final Money amount) {
                b.add(PROPERTY_AMOUNT, amount);
                return this;
            }

            public Builder identifier(final Identifier identifier) {
                b.add(PROPERTY_IDENTIFIER, identifier);
                return this;
            }

            public ClaimResponsePayment build() {
                return new ClaimResponsePayment(b.build());
            }
        }
    }

    public static class ClaimResponseProcessNote extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseProcessNote";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_NUMBER = "number";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_TEXT = "text";
        public static final String PROPERTY_LANGUAGE = "language";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseProcessNote(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A number to uniquely identify a note entry.
         */
        public Integer number() {
            return data.getInt(PROPERTY_NUMBER);
        }

        /**
         * The business purpose of the note text.
         */
        public String type() {
            return getString(PROPERTY_TYPE);
        }

        /**
         * The explanation or description associated with the processing.
         */
        public String text() {
            return getString(PROPERTY_TEXT);
        }

        /**
         * A code to define the language used in the text of the note.
         */
        public CodeableConcept language() {
            return getObject(CodeableConcept.class, PROPERTY_LANGUAGE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder number(final Integer number) {
                b.add(PROPERTY_NUMBER, number);
                return this;
            }

            public Builder type(final String type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder text(final String text) {
                b.add(PROPERTY_TEXT, text);
                return this;
            }

            public Builder language(final CodeableConcept language) {
                b.add(PROPERTY_LANGUAGE, language);
                return this;
            }

            public ClaimResponseProcessNote build() {
                return new ClaimResponseProcessNote(b.build());
            }
        }
    }

    public static class ClaimResponseSubDetail extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseSubDetail";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_SUBDETAILSEQUENCE = "subDetailSequence";
        public static final String PROPERTY_NOTENUMBER = "noteNumber";
        public static final String PROPERTY_ADJUDICATION = "adjudication";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseSubDetail(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A number to uniquely reference the claim sub-detail entry.
         */
        public Integer subDetailSequence() {
            return data.getInt(PROPERTY_SUBDETAILSEQUENCE);
        }

        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, PROPERTY_NOTENUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, PROPERTY_ADJUDICATION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder subDetailSequence(final Integer subDetailSequence) {
                b.add(PROPERTY_SUBDETAILSEQUENCE, subDetailSequence);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(PROPERTY_NOTENUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public ClaimResponseSubDetail build() {
                return new ClaimResponseSubDetail(b.build());
            }
        }
    }

    public static class ClaimResponseSubDetail1 extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseSubDetail1";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_PRODUCTORSERVICE = "productOrService";
        public static final String PROPERTY_MODIFIER = "modifier";
        public static final String PROPERTY_QUANTITY = "quantity";
        public static final String PROPERTY_UNITPRICE = "unitPrice";
        public static final String PROPERTY_FACTOR = "factor";
        public static final String PROPERTY_NET = "net";
        public static final String PROPERTY_NOTENUMBER = "noteNumber";
        public static final String PROPERTY_ADJUDICATION = "adjudication";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseSubDetail1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
         */
        public CodeableConcept productOrService() {
            return getObject(CodeableConcept.class, PROPERTY_PRODUCTORSERVICE);
        }

        /**
         * Item typification or modifiers codes to convey additional context for the product or service.
         */
        public java.util.List<CodeableConcept> modifier() {
            return getList(CodeableConcept.class, PROPERTY_MODIFIER);
        }

        /**
         * The number of repetitions of a service or product.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, PROPERTY_QUANTITY);
        }

        /**
         * If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
         */
        public Money unitPrice() {
            return getObject(Money.class, PROPERTY_UNITPRICE);
        }

        /**
         * A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
         */
        public Double factor() {
            return data.getJsonNumber(PROPERTY_FACTOR).doubleValue();
        }

        /**
         * The quantity times the unit price for an additional service or product or charge.
         */
        public Money net() {
            return getObject(Money.class, PROPERTY_NET);
        }

        /**
         * The numbers associated with notes below which apply to the adjudication of this item.
         */
        public java.util.List<Integer> noteNumber() {
            return getList(Integer.class, PROPERTY_NOTENUMBER);
        }

        /**
         * The adjudication results.
         */
        public java.util.List<ClaimResponseAdjudication> adjudication() {
            return getList(ClaimResponseAdjudication.class, PROPERTY_ADJUDICATION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder productOrService(final CodeableConcept productOrService) {
                b.add(PROPERTY_PRODUCTORSERVICE, productOrService);
                return this;
            }

            public Builder modifier(final java.util.List<CodeableConcept> modifier) {
                b.add(PROPERTY_MODIFIER, FhirObject.toArray(modifier));
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder unitPrice(final Money unitPrice) {
                b.add(PROPERTY_UNITPRICE, unitPrice);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder net(final Money net) {
                b.add(PROPERTY_NET, net);
                return this;
            }

            public Builder noteNumber(final java.util.List<Integer> noteNumber) {
                b.add(PROPERTY_NOTENUMBER, FhirObject.toIntegerArray(noteNumber));
                return this;
            }

            public Builder adjudication(final java.util.List<ClaimResponseAdjudication> adjudication) {
                b.add(PROPERTY_ADJUDICATION, FhirObject.toArray(adjudication));
                return this;
            }

            public ClaimResponseSubDetail1 build() {
                return new ClaimResponseSubDetail1(b.build());
            }
        }
    }

    public static class ClaimResponseTotal extends FhirObject {
        public static final String RESOURCE_TYPE = "ClaimResponseTotal";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_CATEGORY = "category";
        public static final String PROPERTY_AMOUNT = "amount";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClaimResponseTotal(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
         */
        public CodeableConcept category() {
            return getObject(CodeableConcept.class, PROPERTY_CATEGORY);
        }

        /**
         * Monetary total amount associated with the category.
         */
        public Money amount() {
            return getObject(Money.class, PROPERTY_AMOUNT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder category(final CodeableConcept category) {
                b.add(PROPERTY_CATEGORY, category);
                return this;
            }

            public Builder amount(final Money amount) {
                b.add(PROPERTY_AMOUNT, amount);
                return this;
            }

            public ClaimResponseTotal build() {
                return new ClaimResponseTotal(b.build());
            }
        }
    }
}
