/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class CatalogEntry extends FhirResource {
    public static final String RESOURCE_TYPE = "CatalogEntry";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_ORDERABLE = "orderable";
    public static final String PROPERTY_REFERENCED_ITEM = "referencedItem";
    public static final String PROPERTY_ADDITIONAL_IDENTIFIER = "additionalIdentifier";
    public static final String PROPERTY_CLASSIFICATION = "classification";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_VALIDITY_PERIOD = "validityPeriod";
    public static final String PROPERTY_VALID_TO = "validTo";
    public static final String PROPERTY_LAST_UPDATED = "lastUpdated";
    public static final String PROPERTY_ADDITIONAL_CHARACTERISTIC = "additionalCharacteristic";
    public static final String PROPERTY_ADDITIONAL_CLASSIFICATION = "additionalClassification";
    public static final String PROPERTY_RELATED_ENTRY = "relatedEntry";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public CatalogEntry(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Used in supporting different identifiers for the same product, e.g.
     * manufacturer code and retailer code.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The type of item - medication, device, service, protocol or other.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, PROPERTY_TYPE);
    }

    /**
     * Whether the entry represents an orderable item.
     */
    public Boolean orderable() {
        return data.getBoolean(PROPERTY_ORDERABLE);
    }

    /**
     * The item in a catalog or definition.
     */
    public Reference referencedItem() {
        return getObject(Reference.class, PROPERTY_REFERENCED_ITEM);
    }

    /**
     * Used in supporting related concepts, e.g. NDC to RxNorm.
     */
    public java.util.List<Identifier> additionalIdentifier() {
        return getList(Identifier.class, PROPERTY_ADDITIONAL_IDENTIFIER);
    }

    /**
     * Classes of devices, or ATC for medication.
     */
    public java.util.List<CodeableConcept> classification() {
        return getList(CodeableConcept.class, PROPERTY_CLASSIFICATION);
    }

    /**
     * Used to support catalog exchange even for unsupported products, e.g.
     * getting list of medications even if not prescribable.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * The time period in which this catalog entry is expected to be active.
     */
    public Period validityPeriod() {
        return getObject(Period.class, PROPERTY_VALIDITY_PERIOD);
    }

    /**
     * The date until which this catalog entry is expected to be active.
     */
    public java.time.Instant validTo() {
        return java.time.Instant.parse(data.getString(PROPERTY_VALID_TO));
    }

    /**
     * Typically date of issue is different from the beginning of the
     * validity. This can be used to see when an item was last updated.
     */
    public java.time.Instant lastUpdated() {
        return java.time.Instant.parse(data.getString(PROPERTY_LAST_UPDATED));
    }

    /**
     * Used for examplefor Out of Formulary, or any specifics.
     */
    public java.util.List<CodeableConcept> additionalCharacteristic() {
        return getList(CodeableConcept.class, PROPERTY_ADDITIONAL_CHARACTERISTIC);
    }

    /**
     * User for example for ATC classification, or.
     */
    public java.util.List<CodeableConcept> additionalClassification() {
        return getList(CodeableConcept.class, PROPERTY_ADDITIONAL_CLASSIFICATION);
    }

    /**
     * Used for example, to point to a substance, or to a device used to
     * administer a medication.
     */
    public java.util.List<CatalogEntryRelatedEntry> relatedEntry() {
        return getList(CatalogEntryRelatedEntry.class, PROPERTY_RELATED_ENTRY);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder orderable(final Boolean orderable) {
            b.add(PROPERTY_ORDERABLE, orderable);
            return this;
        }

        public Builder referencedItem(final Reference referencedItem) {
            b.add(PROPERTY_REFERENCED_ITEM, referencedItem);
            return this;
        }

        public Builder additionalIdentifier(final java.util.List<Identifier> additionalIdentifier) {
            b.add(PROPERTY_ADDITIONAL_IDENTIFIER, FhirObject.toArray(additionalIdentifier));
            return this;
        }

        public Builder classification(final java.util.List<CodeableConcept> classification) {
            b.add(PROPERTY_CLASSIFICATION, FhirObject.toArray(classification));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder validityPeriod(final Period validityPeriod) {
            b.add(PROPERTY_VALIDITY_PERIOD, validityPeriod);
            return this;
        }

        public Builder validTo(final java.time.Instant validTo) {
            b.add(PROPERTY_VALID_TO, validTo.toString());
            return this;
        }

        public Builder lastUpdated(final java.time.Instant lastUpdated) {
            b.add(PROPERTY_LAST_UPDATED, lastUpdated.toString());
            return this;
        }

        public Builder additionalCharacteristic(final java.util.List<CodeableConcept> additionalCharacteristic) {
            b.add(PROPERTY_ADDITIONAL_CHARACTERISTIC, FhirObject.toArray(additionalCharacteristic));
            return this;
        }

        public Builder additionalClassification(final java.util.List<CodeableConcept> additionalClassification) {
            b.add(PROPERTY_ADDITIONAL_CLASSIFICATION, FhirObject.toArray(additionalClassification));
            return this;
        }

        public Builder relatedEntry(final java.util.List<CatalogEntryRelatedEntry> relatedEntry) {
            b.add(PROPERTY_RELATED_ENTRY, FhirObject.toArray(relatedEntry));
            return this;
        }

        public CatalogEntry build() {
            return new CatalogEntry(b.build());
        }
    }

    public static class CatalogEntryRelatedEntry extends FhirObject {
        public static final String RESOURCE_TYPE = "CatalogEntryRelatedEntry";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_RELATIONTYPE = "relationtype";
        public static final String PROPERTY_ITEM = "item";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CatalogEntryRelatedEntry(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of relation to the related item: child, parent,
         * packageContent, containerPackage, usedIn, uses, requires, etc.
         */
        public String relationtype() {
            return getString(PROPERTY_RELATIONTYPE);
        }

        /**
         * The reference to the related item.
         */
        public Reference item() {
            return getObject(Reference.class, PROPERTY_ITEM);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder relationtype(final String relationtype) {
                b.add(PROPERTY_RELATIONTYPE, relationtype);
                return this;
            }

            public Builder item(final Reference item) {
                b.add(PROPERTY_ITEM, item);
                return this;
            }

            public CatalogEntryRelatedEntry build() {
                return new CatalogEntryRelatedEntry(b.build());
            }
        }
    }
}
