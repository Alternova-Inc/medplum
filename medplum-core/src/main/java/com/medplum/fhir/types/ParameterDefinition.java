/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class ParameterDefinition extends FhirResource {
    public static final String RESOURCE_TYPE = "ParameterDefinition";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_USE = "use";
    public static final String PROPERTY_MIN = "min";
    public static final String PROPERTY_MAX = "max";
    public static final String PROPERTY_DOCUMENTATION = "documentation";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_PROFILE = "profile";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ParameterDefinition(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * The name of the parameter used to allow access to the value of the parameter in evaluation contexts.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * Whether the parameter is input or output for the module.
     */
    public String use() {
        return getString(PROPERTY_USE);
    }

    /**
     * The minimum number of times this parameter SHALL appear in the request or response.
     */
    public Integer min() {
        return data.getInt(PROPERTY_MIN);
    }

    /**
     * The maximum number of times this element is permitted to appear in the request or response.
     */
    public String max() {
        return getString(PROPERTY_MAX);
    }

    /**
     * A brief discussion of what the parameter is for and how it is used by the module.
     */
    public String documentation() {
        return getString(PROPERTY_DOCUMENTATION);
    }

    /**
     * The type of the parameter.
     */
    public String type() {
        return getString(PROPERTY_TYPE);
    }

    /**
     * If specified, this indicates a profile that the input data must conform to, or that the output data will conform to.
     */
    public String profile() {
        return getString(PROPERTY_PROFILE);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder use(final String use) {
            b.add(PROPERTY_USE, use);
            return this;
        }

        public Builder min(final Integer min) {
            b.add(PROPERTY_MIN, min);
            return this;
        }

        public Builder max(final String max) {
            b.add(PROPERTY_MAX, max);
            return this;
        }

        public Builder documentation(final String documentation) {
            b.add(PROPERTY_DOCUMENTATION, documentation);
            return this;
        }

        public Builder type(final String type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder profile(final String profile) {
            b.add(PROPERTY_PROFILE, profile);
            return this;
        }

        public ParameterDefinition build() {
            return new ParameterDefinition(b.build());
        }
    }
}
