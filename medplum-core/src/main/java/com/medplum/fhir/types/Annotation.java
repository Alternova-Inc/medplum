/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Annotation extends FhirResource {
    public static final String RESOURCE_TYPE = "Annotation";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_AUTHORREFERENCE = "authorReference";
    public static final String PROPERTY_AUTHORSTRING = "authorString";
    public static final String PROPERTY_TIME = "time";
    public static final String PROPERTY_TEXT = "text";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Annotation(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * The individual responsible for making the annotation.
     */
    public Reference authorReference() {
        return getObject(Reference.class, PROPERTY_AUTHORREFERENCE);
    }

    /**
     * The individual responsible for making the annotation.
     */
    public String authorString() {
        return getString(PROPERTY_AUTHORSTRING);
    }

    /**
     * Indicates when this particular annotation was made.
     */
    public java.time.Instant time() {
        return java.time.Instant.parse(data.getString(PROPERTY_TIME));
    }

    /**
     * The text of the annotation in markdown format.
     */
    public String text() {
        return getString(PROPERTY_TEXT);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder authorReference(final Reference authorReference) {
            b.add(PROPERTY_AUTHORREFERENCE, authorReference);
            return this;
        }

        public Builder authorString(final String authorString) {
            b.add(PROPERTY_AUTHORSTRING, authorString);
            return this;
        }

        public Builder time(final java.time.Instant time) {
            b.add(PROPERTY_TIME, time.toString());
            return this;
        }

        public Builder text(final String text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Annotation build() {
            return new Annotation(b.build());
        }
    }
}
