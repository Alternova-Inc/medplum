/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class ConceptMap extends FhirResource {
    public static final String RESOURCE_TYPE = "ConceptMap";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_VERSION = "version";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_TITLE = "title";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_EXPERIMENTAL = "experimental";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_PUBLISHER = "publisher";
    public static final String PROPERTY_CONTACT = "contact";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_USE_CONTEXT = "useContext";
    public static final String PROPERTY_JURISDICTION = "jurisdiction";
    public static final String PROPERTY_PURPOSE = "purpose";
    public static final String PROPERTY_COPYRIGHT = "copyright";
    public static final String PROPERTY_SOURCE_URI = "sourceUri";
    public static final String PROPERTY_SOURCE_CANONICAL = "sourceCanonical";
    public static final String PROPERTY_TARGET_URI = "targetUri";
    public static final String PROPERTY_TARGET_CANONICAL = "targetCanonical";
    public static final String PROPERTY_GROUP = "group";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ConceptMap(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * An absolute URI that is used to identify this concept map when it is
     * referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this concept map is (or will be) published. This URL can
     * be the target of a canonical reference. It SHALL remain the same when
     * the concept map is stored on different servers.
     */
    public java.net.URI url() {
        return getUri(PROPERTY_URL);
    }

    /**
     * A formal identifier that is used to identify this concept map when it
     * is represented in other formats, or referenced in a specification,
     * model, design or an instance.
     */
    public Identifier identifier() {
        return getObject(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The identifier that is used to identify this version of the concept
     * map when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the concept map author
     * and is not expected to be globally unique. For example, it might be a
     * timestamp (e.g. yyyymmdd) if a managed version is not available. There
     * is also no expectation that versions can be placed in a
     * lexicographical sequence.
     */
    public String version() {
        return getString(PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the concept map. This name should
     * be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for the concept map.
     */
    public String title() {
        return getString(PROPERTY_TITLE);
    }

    /**
     * The status of this concept map. Enables tracking the life-cycle of the
     * content.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this concept map is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the concept map was published.
     * The date must change when the business version changes and it must
     * change if the status code changes. In addition, it should change when
     * the substantive content of the concept map changes.
     */
    public java.time.Instant date() {
        return getInstant(PROPERTY_DATE);
    }

    /**
     * The name of the organization or individual that published the concept
     * map.
     */
    public String publisher() {
        return getString(PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, PROPERTY_CONTACT);
    }

    /**
     * A free text natural language description of the concept map from a
     * consumer's perspective.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate concept map instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the concept map is intended to
     * be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this concept map is needed and why it has been
     * designed as it has.
     */
    public String purpose() {
        return getString(PROPERTY_PURPOSE);
    }

    /**
     * A copyright statement relating to the concept map and/or its contents.
     * Copyright statements are generally legal restrictions on the use and
     * publishing of the concept map.
     */
    public String copyright() {
        return getString(PROPERTY_COPYRIGHT);
    }

    /**
     * Identifier for the source value set that contains the concepts that
     * are being mapped and provides context for the mappings.
     */
    public String sourceUri() {
        return getString(PROPERTY_SOURCE_URI);
    }

    /**
     * Identifier for the source value set that contains the concepts that
     * are being mapped and provides context for the mappings.
     */
    public String sourceCanonical() {
        return getString(PROPERTY_SOURCE_CANONICAL);
    }

    /**
     * The target value set provides context for the mappings. Note that the
     * mapping is made between concepts, not between value sets, but the
     * value set provides important context about how the concept mapping
     * choices are made.
     */
    public String targetUri() {
        return getString(PROPERTY_TARGET_URI);
    }

    /**
     * The target value set provides context for the mappings. Note that the
     * mapping is made between concepts, not between value sets, but the
     * value set provides important context about how the concept mapping
     * choices are made.
     */
    public String targetCanonical() {
        return getString(PROPERTY_TARGET_CANONICAL);
    }

    /**
     * A group of mappings that all have the same source and target system.
     */
    public java.util.List<ConceptMapGroup> group() {
        return getList(ConceptMapGroup.class, PROPERTY_GROUP);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder url(final java.net.URI url) {
            b.add(PROPERTY_URL, url.toString());
            return this;
        }

        public Builder identifier(final Identifier identifier) {
            b.add(PROPERTY_IDENTIFIER, identifier);
            return this;
        }

        public Builder version(final String version) {
            b.add(PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(PROPERTY_TITLE, title);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder copyright(final String copyright) {
            b.add(PROPERTY_COPYRIGHT, copyright);
            return this;
        }

        public Builder sourceUri(final String sourceUri) {
            b.add(PROPERTY_SOURCE_URI, sourceUri);
            return this;
        }

        public Builder sourceCanonical(final String sourceCanonical) {
            b.add(PROPERTY_SOURCE_CANONICAL, sourceCanonical);
            return this;
        }

        public Builder targetUri(final String targetUri) {
            b.add(PROPERTY_TARGET_URI, targetUri);
            return this;
        }

        public Builder targetCanonical(final String targetCanonical) {
            b.add(PROPERTY_TARGET_CANONICAL, targetCanonical);
            return this;
        }

        public Builder group(final java.util.List<ConceptMapGroup> group) {
            b.add(PROPERTY_GROUP, FhirObject.toArray(group));
            return this;
        }

        public ConceptMap build() {
            return new ConceptMap(b.build());
        }
    }

    public static class ConceptMapDependsOn extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapDependsOn";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_PROPERTY = "property";
        public static final String PROPERTY_SYSTEM = "system";
        public static final String PROPERTY_VALUE = "value";
        public static final String PROPERTY_DISPLAY = "display";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapDependsOn(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A reference to an element that holds a coded value that corresponds to
         * a code system property. The idea is that the information model carries
         * an element somewhere that is labeled to correspond with a code system
         * property.
         */
        public java.net.URI property() {
            return getUri(PROPERTY_PROPERTY);
        }

        /**
         * An absolute URI that identifies the code system of the dependency code
         * (if the source/dependency is a value set that crosses code systems).
         */
        public String system() {
            return getString(PROPERTY_SYSTEM);
        }

        /**
         * Identity (code or path) or the element/item/ValueSet/text that the map
         * depends on / refers to.
         */
        public String value() {
            return getString(PROPERTY_VALUE);
        }

        /**
         * The display for the code. The display is only provided to help editors
         * when editing the concept map.
         */
        public String display() {
            return getString(PROPERTY_DISPLAY);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder property(final java.net.URI property) {
                b.add(PROPERTY_PROPERTY, property.toString());
                return this;
            }

            public Builder system(final String system) {
                b.add(PROPERTY_SYSTEM, system);
                return this;
            }

            public Builder value(final String value) {
                b.add(PROPERTY_VALUE, value);
                return this;
            }

            public Builder display(final String display) {
                b.add(PROPERTY_DISPLAY, display);
                return this;
            }

            public ConceptMapDependsOn build() {
                return new ConceptMapDependsOn(b.build());
            }
        }
    }

    public static class ConceptMapElement extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapElement";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_DISPLAY = "display";
        public static final String PROPERTY_TARGET = "target";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapElement(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Identity (code or path) or the element/item being mapped.
         */
        public String code() {
            return getString(PROPERTY_CODE);
        }

        /**
         * The display for the code. The display is only provided to help editors
         * when editing the concept map.
         */
        public String display() {
            return getString(PROPERTY_DISPLAY);
        }

        /**
         * A concept from the target value set that this concept maps to.
         */
        public java.util.List<ConceptMapTarget> target() {
            return getList(ConceptMapTarget.class, PROPERTY_TARGET);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder target(final java.util.List<ConceptMapTarget> target) {
                b.add(PROPERTY_TARGET, FhirObject.toArray(target));
                return this;
            }

            public ConceptMapElement build() {
                return new ConceptMapElement(b.build());
            }
        }
    }

    public static class ConceptMapGroup extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapGroup";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_SOURCE = "source";
        public static final String PROPERTY_SOURCE_VERSION = "sourceVersion";
        public static final String PROPERTY_TARGET = "target";
        public static final String PROPERTY_TARGET_VERSION = "targetVersion";
        public static final String PROPERTY_ELEMENT = "element";
        public static final String PROPERTY_UNMAPPED = "unmapped";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapGroup(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * An absolute URI that identifies the source system where the concepts
         * to be mapped are defined.
         */
        public java.net.URI source() {
            return getUri(PROPERTY_SOURCE);
        }

        /**
         * The specific version of the code system, as determined by the code
         * system authority.
         */
        public String sourceVersion() {
            return getString(PROPERTY_SOURCE_VERSION);
        }

        /**
         * An absolute URI that identifies the target system that the concepts
         * will be mapped to.
         */
        public java.net.URI target() {
            return getUri(PROPERTY_TARGET);
        }

        /**
         * The specific version of the code system, as determined by the code
         * system authority.
         */
        public String targetVersion() {
            return getString(PROPERTY_TARGET_VERSION);
        }

        /**
         * Mappings for an individual concept in the source to one or more
         * concepts in the target.
         */
        public java.util.List<ConceptMapElement> element() {
            return getList(ConceptMapElement.class, PROPERTY_ELEMENT);
        }

        /**
         * What to do when there is no mapping for the source concept. &quot;Unmapped&quot;
         * does not include codes that are unmatched, and the unmapped element is
         * ignored in a code is specified to have equivalence = unmatched.
         */
        public ConceptMapUnmapped unmapped() {
            return getObject(ConceptMapUnmapped.class, PROPERTY_UNMAPPED);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder source(final java.net.URI source) {
                b.add(PROPERTY_SOURCE, source.toString());
                return this;
            }

            public Builder sourceVersion(final String sourceVersion) {
                b.add(PROPERTY_SOURCE_VERSION, sourceVersion);
                return this;
            }

            public Builder target(final java.net.URI target) {
                b.add(PROPERTY_TARGET, target.toString());
                return this;
            }

            public Builder targetVersion(final String targetVersion) {
                b.add(PROPERTY_TARGET_VERSION, targetVersion);
                return this;
            }

            public Builder element(final java.util.List<ConceptMapElement> element) {
                b.add(PROPERTY_ELEMENT, FhirObject.toArray(element));
                return this;
            }

            public Builder unmapped(final ConceptMapUnmapped unmapped) {
                b.add(PROPERTY_UNMAPPED, unmapped);
                return this;
            }

            public ConceptMapGroup build() {
                return new ConceptMapGroup(b.build());
            }
        }
    }

    public static class ConceptMapTarget extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapTarget";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_DISPLAY = "display";
        public static final String PROPERTY_EQUIVALENCE = "equivalence";
        public static final String PROPERTY_COMMENT = "comment";
        public static final String PROPERTY_DEPENDS_ON = "dependsOn";
        public static final String PROPERTY_PRODUCT = "product";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapTarget(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Identity (code or path) or the element/item that the map refers to.
         */
        public String code() {
            return getString(PROPERTY_CODE);
        }

        /**
         * The display for the code. The display is only provided to help editors
         * when editing the concept map.
         */
        public String display() {
            return getString(PROPERTY_DISPLAY);
        }

        /**
         * The equivalence between the source and target concepts (counting for
         * the dependencies and products). The equivalence is read from target to
         * source (e.g. the target is 'wider' than the source).
         */
        public String equivalence() {
            return getString(PROPERTY_EQUIVALENCE);
        }

        /**
         * A description of status/issues in mapping that conveys additional
         * information not represented in  the structured data.
         */
        public String comment() {
            return getString(PROPERTY_COMMENT);
        }

        /**
         * A set of additional dependencies for this mapping to hold. This
         * mapping is only applicable if the specified element can be resolved,
         * and it has the specified value.
         */
        public java.util.List<ConceptMapDependsOn> dependsOn() {
            return getList(ConceptMapDependsOn.class, PROPERTY_DEPENDS_ON);
        }

        /**
         * A set of additional outcomes from this mapping to other elements. To
         * properly execute this mapping, the specified element must be mapped to
         * some data element or source that is in context. The mapping may still
         * be useful without a place for the additional data elements, but the
         * equivalence cannot be relied on.
         */
        public java.util.List<ConceptMapDependsOn> product() {
            return getList(ConceptMapDependsOn.class, PROPERTY_PRODUCT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final String code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder equivalence(final String equivalence) {
                b.add(PROPERTY_EQUIVALENCE, equivalence);
                return this;
            }

            public Builder comment(final String comment) {
                b.add(PROPERTY_COMMENT, comment);
                return this;
            }

            public Builder dependsOn(final java.util.List<ConceptMapDependsOn> dependsOn) {
                b.add(PROPERTY_DEPENDS_ON, FhirObject.toArray(dependsOn));
                return this;
            }

            public Builder product(final java.util.List<ConceptMapDependsOn> product) {
                b.add(PROPERTY_PRODUCT, FhirObject.toArray(product));
                return this;
            }

            public ConceptMapTarget build() {
                return new ConceptMapTarget(b.build());
            }
        }
    }

    public static class ConceptMapUnmapped extends FhirObject {
        public static final String RESOURCE_TYPE = "ConceptMapUnmapped";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_MODE = "mode";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_DISPLAY = "display";
        public static final String PROPERTY_URL = "url";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ConceptMapUnmapped(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Defines which action to take if there is no match for the source
         * concept in the target system designated for the group. One of 3
         * actions are possible: use the unmapped code (this is useful when doing
         * a mapping between versions, and only a few codes have changed), use a
         * fixed code (a default code), or alternatively, a reference to a
         * different concept map can be provided (by canonical URL).
         */
        public String mode() {
            return getString(PROPERTY_MODE);
        }

        /**
         * The fixed code to use when the mode = 'fixed'  - all unmapped codes
         * are mapped to a single fixed code.
         */
        public String code() {
            return getString(PROPERTY_CODE);
        }

        /**
         * The display for the code. The display is only provided to help editors
         * when editing the concept map.
         */
        public String display() {
            return getString(PROPERTY_DISPLAY);
        }

        /**
         * The canonical reference to an additional ConceptMap resource instance
         * to use for mapping if this ConceptMap resource contains no matching
         * mapping for the source concept.
         */
        public String url() {
            return getString(PROPERTY_URL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder mode(final String mode) {
                b.add(PROPERTY_MODE, mode);
                return this;
            }

            public Builder code(final String code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder display(final String display) {
                b.add(PROPERTY_DISPLAY, display);
                return this;
            }

            public Builder url(final String url) {
                b.add(PROPERTY_URL, url);
                return this;
            }

            public ConceptMapUnmapped build() {
                return new ConceptMapUnmapped(b.build());
            }
        }
    }
}
