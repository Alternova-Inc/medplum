/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class SampledData extends FhirResource {
    public static final String RESOURCE_TYPE = "SampledData";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_ORIGIN = "origin";
    public static final String PROPERTY_PERIOD = "period";
    public static final String PROPERTY_FACTOR = "factor";
    public static final String PROPERTY_LOWER_LIMIT = "lowerLimit";
    public static final String PROPERTY_UPPER_LIMIT = "upperLimit";
    public static final String PROPERTY_DIMENSIONS = "dimensions";
    public static final String PROPERTY_DATA = "data";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public SampledData(final JsonObject data) {
        super(data);
    }

    /**
     * Unique id for the element within a resource (for internal references).
     * This may be any string value that does not contain spaces.
     */
    public String id() {
        return getString(PROPERTY_ID);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the element. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * The base quantity that a measured value of zero represents. In
     * addition, this provides the units of the entire measurement series.
     */
    public Quantity origin() {
        return getObject(Quantity.class, PROPERTY_ORIGIN);
    }

    /**
     * The length of time between sampling times, measured in milliseconds.
     */
    public Double period() {
        return data.getJsonNumber(PROPERTY_PERIOD).doubleValue();
    }

    /**
     * A correction factor that is applied to the sampled data points before
     * they are added to the origin.
     */
    public Double factor() {
        return data.getJsonNumber(PROPERTY_FACTOR).doubleValue();
    }

    /**
     * The lower limit of detection of the measured points. This is needed if
     * any of the data points have the value &quot;L&quot; (lower than detection
     * limit).
     */
    public Double lowerLimit() {
        return data.getJsonNumber(PROPERTY_LOWER_LIMIT).doubleValue();
    }

    /**
     * The upper limit of detection of the measured points. This is needed if
     * any of the data points have the value &quot;U&quot; (higher than detection
     * limit).
     */
    public Double upperLimit() {
        return data.getJsonNumber(PROPERTY_UPPER_LIMIT).doubleValue();
    }

    /**
     * The number of sample points at each time point. If this value is
     * greater than one, then the dimensions will be interlaced - all the
     * sample points for a point in time will be recorded at once.
     */
    public Integer dimensions() {
        return data.getInt(PROPERTY_DIMENSIONS);
    }

    /**
     * A series of data points which are decimal values separated by a single
     * space (character u20). The special values &quot;E&quot; (error), &quot;L&quot; (below
     * detection limit) and &quot;U&quot; (above detection limit) can also be used in
     * place of a decimal value.
     */
    public String data() {
        return getString(PROPERTY_DATA);
    }

    public static class Builder {
        private final JsonObjectBuilder b;

        private Builder() {
            b = Json.createObjectBuilder();
        }

        private Builder(final JsonObject data) {
            b = Json.createObjectBuilder(data);
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder origin(final Quantity origin) {
            b.add(PROPERTY_ORIGIN, origin);
            return this;
        }

        public Builder period(final Double period) {
            b.add(PROPERTY_PERIOD, period);
            return this;
        }

        public Builder factor(final Double factor) {
            b.add(PROPERTY_FACTOR, factor);
            return this;
        }

        public Builder lowerLimit(final Double lowerLimit) {
            b.add(PROPERTY_LOWER_LIMIT, lowerLimit);
            return this;
        }

        public Builder upperLimit(final Double upperLimit) {
            b.add(PROPERTY_UPPER_LIMIT, upperLimit);
            return this;
        }

        public Builder dimensions(final Integer dimensions) {
            b.add(PROPERTY_DIMENSIONS, dimensions);
            return this;
        }

        public Builder data(final String data) {
            b.add(PROPERTY_DATA, data);
            return this;
        }

        public SampledData build() {
            return new SampledData(b.build());
        }
    }
}
