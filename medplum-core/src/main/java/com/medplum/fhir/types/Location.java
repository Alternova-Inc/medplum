/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Location extends FhirResource {
    public static final String RESOURCE_TYPE = "Location";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_OPERATIONALSTATUS = "operationalStatus";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_ALIAS = "alias";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_MODE = "mode";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_TELECOM = "telecom";
    public static final String PROPERTY_ADDRESS = "address";
    public static final String PROPERTY_PHYSICALTYPE = "physicalType";
    public static final String PROPERTY_POSITION = "position";
    public static final String PROPERTY_MANAGINGORGANIZATION = "managingOrganization";
    public static final String PROPERTY_PARTOF = "partOf";
    public static final String PROPERTY_HOURSOFOPERATION = "hoursOfOperation";
    public static final String PROPERTY_AVAILABILITYEXCEPTIONS = "availabilityExceptions";
    public static final String PROPERTY_ENDPOINT = "endpoint";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Location(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * Unique code or number identifying the location to its users.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The status property covers the general availability of the resource,
     * not the current value which may be covered by the operationStatus, or
     * by a schedule/slots if they are configured for the location.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * The operational status covers operation values most relevant to beds
     * (but can also apply to rooms/units/chairs/etc. such as an isolation
     * unit/dialysis chair). This typically covers concepts such as
     * contamination, housekeeping, and other activities like maintenance.
     */
    public Coding operationalStatus() {
        return getObject(Coding.class, PROPERTY_OPERATIONALSTATUS);
    }

    /**
     * Name of the location as used by humans. Does not need to be unique.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * A list of alternate names that the location is known as, or was known
     * as, in the past.
     */
    public java.util.List<String> alias() {
        return getList(String.class, PROPERTY_ALIAS);
    }

    /**
     * Description of the Location, which helps in finding or referencing the
     * place.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * Indicates whether a resource instance represents a specific location
     * or a class of locations.
     */
    public String mode() {
        return getString(PROPERTY_MODE);
    }

    /**
     * Indicates the type of function performed at the location.
     */
    public java.util.List<CodeableConcept> type() {
        return getList(CodeableConcept.class, PROPERTY_TYPE);
    }

    /**
     * The contact details of communication devices available at the
     * location. This can include phone numbers, fax numbers, mobile numbers,
     * email addresses and web sites.
     */
    public java.util.List<ContactPoint> telecom() {
        return getList(ContactPoint.class, PROPERTY_TELECOM);
    }

    /**
     * Physical location.
     */
    public Address address() {
        return getObject(Address.class, PROPERTY_ADDRESS);
    }

    /**
     * Physical form of the location, e.g. building, room, vehicle, road.
     */
    public CodeableConcept physicalType() {
        return getObject(CodeableConcept.class, PROPERTY_PHYSICALTYPE);
    }

    /**
     * The absolute geographic location of the Location, expressed using the
     * WGS84 datum (This is the same co-ordinate system used in KML).
     */
    public LocationPosition position() {
        return getObject(LocationPosition.class, PROPERTY_POSITION);
    }

    /**
     * The organization responsible for the provisioning and upkeep of the
     * location.
     */
    public Reference managingOrganization() {
        return getObject(Reference.class, PROPERTY_MANAGINGORGANIZATION);
    }

    /**
     * Another Location of which this Location is physically a part of.
     */
    public Reference partOf() {
        return getObject(Reference.class, PROPERTY_PARTOF);
    }

    /**
     * What days/times during a week is this location usually open.
     */
    public java.util.List<LocationHoursOfOperation> hoursOfOperation() {
        return getList(LocationHoursOfOperation.class, PROPERTY_HOURSOFOPERATION);
    }

    /**
     * A description of when the locations opening ours are different to
     * normal, e.g. public holiday availability. Succinctly describing all
     * possible exceptions to normal site availability as detailed in the
     * opening hours Times.
     */
    public String availabilityExceptions() {
        return getString(PROPERTY_AVAILABILITYEXCEPTIONS);
    }

    /**
     * Technical endpoints providing access to services operated for the
     * location.
     */
    public java.util.List<Reference> endpoint() {
        return getList(Reference.class, PROPERTY_ENDPOINT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder operationalStatus(final Coding operationalStatus) {
            b.add(PROPERTY_OPERATIONALSTATUS, operationalStatus);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder alias(final java.util.List<String> alias) {
            b.add(PROPERTY_ALIAS, FhirObject.toStringArray(alias));
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder mode(final String mode) {
            b.add(PROPERTY_MODE, mode);
            return this;
        }

        public Builder type(final java.util.List<CodeableConcept> type) {
            b.add(PROPERTY_TYPE, FhirObject.toArray(type));
            return this;
        }

        public Builder telecom(final java.util.List<ContactPoint> telecom) {
            b.add(PROPERTY_TELECOM, FhirObject.toArray(telecom));
            return this;
        }

        public Builder address(final Address address) {
            b.add(PROPERTY_ADDRESS, address);
            return this;
        }

        public Builder physicalType(final CodeableConcept physicalType) {
            b.add(PROPERTY_PHYSICALTYPE, physicalType);
            return this;
        }

        public Builder position(final LocationPosition position) {
            b.add(PROPERTY_POSITION, position);
            return this;
        }

        public Builder managingOrganization(final Reference managingOrganization) {
            b.add(PROPERTY_MANAGINGORGANIZATION, managingOrganization);
            return this;
        }

        public Builder partOf(final Reference partOf) {
            b.add(PROPERTY_PARTOF, partOf);
            return this;
        }

        public Builder hoursOfOperation(final java.util.List<LocationHoursOfOperation> hoursOfOperation) {
            b.add(PROPERTY_HOURSOFOPERATION, FhirObject.toArray(hoursOfOperation));
            return this;
        }

        public Builder availabilityExceptions(final String availabilityExceptions) {
            b.add(PROPERTY_AVAILABILITYEXCEPTIONS, availabilityExceptions);
            return this;
        }

        public Builder endpoint(final java.util.List<Reference> endpoint) {
            b.add(PROPERTY_ENDPOINT, FhirObject.toArray(endpoint));
            return this;
        }

        public Location build() {
            return new Location(b.build());
        }
    }

    public static class LocationHoursOfOperation extends FhirObject {
        public static final String RESOURCE_TYPE = "LocationHoursOfOperation";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_DAYSOFWEEK = "daysOfWeek";
        public static final String PROPERTY_ALLDAY = "allDay";
        public static final String PROPERTY_OPENINGTIME = "openingTime";
        public static final String PROPERTY_CLOSINGTIME = "closingTime";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public LocationHoursOfOperation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Indicates which days of the week are available between the start and
         * end Times.
         */
        public java.util.List<String> daysOfWeek() {
            return getList(String.class, PROPERTY_DAYSOFWEEK);
        }

        /**
         * The Location is open all day.
         */
        public Boolean allDay() {
            return data.getBoolean(PROPERTY_ALLDAY);
        }

        /**
         * Time that the Location opens.
         */
        public java.time.Instant openingTime() {
            return java.time.Instant.parse(data.getString(PROPERTY_OPENINGTIME));
        }

        /**
         * Time that the Location closes.
         */
        public java.time.Instant closingTime() {
            return java.time.Instant.parse(data.getString(PROPERTY_CLOSINGTIME));
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder daysOfWeek(final java.util.List<String> daysOfWeek) {
                b.add(PROPERTY_DAYSOFWEEK, FhirObject.toStringArray(daysOfWeek));
                return this;
            }

            public Builder allDay(final Boolean allDay) {
                b.add(PROPERTY_ALLDAY, allDay);
                return this;
            }

            public Builder openingTime(final java.time.Instant openingTime) {
                b.add(PROPERTY_OPENINGTIME, openingTime.toString());
                return this;
            }

            public Builder closingTime(final java.time.Instant closingTime) {
                b.add(PROPERTY_CLOSINGTIME, closingTime.toString());
                return this;
            }

            public LocationHoursOfOperation build() {
                return new LocationHoursOfOperation(b.build());
            }
        }
    }

    public static class LocationPosition extends FhirObject {
        public static final String RESOURCE_TYPE = "LocationPosition";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_LONGITUDE = "longitude";
        public static final String PROPERTY_LATITUDE = "latitude";
        public static final String PROPERTY_ALTITUDE = "altitude";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public LocationPosition(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Longitude. The value domain and the interpretation are the same as for
         * the text of the longitude element in KML (see notes below).
         */
        public Double longitude() {
            return data.getJsonNumber(PROPERTY_LONGITUDE).doubleValue();
        }

        /**
         * Latitude. The value domain and the interpretation are the same as for
         * the text of the latitude element in KML (see notes below).
         */
        public Double latitude() {
            return data.getJsonNumber(PROPERTY_LATITUDE).doubleValue();
        }

        /**
         * Altitude. The value domain and the interpretation are the same as for
         * the text of the altitude element in KML (see notes below).
         */
        public Double altitude() {
            return data.getJsonNumber(PROPERTY_ALTITUDE).doubleValue();
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder longitude(final Double longitude) {
                b.add(PROPERTY_LONGITUDE, longitude);
                return this;
            }

            public Builder latitude(final Double latitude) {
                b.add(PROPERTY_LATITUDE, latitude);
                return this;
            }

            public Builder altitude(final Double altitude) {
                b.add(PROPERTY_ALTITUDE, altitude);
                return this;
            }

            public LocationPosition build() {
                return new LocationPosition(b.build());
            }
        }
    }
}
