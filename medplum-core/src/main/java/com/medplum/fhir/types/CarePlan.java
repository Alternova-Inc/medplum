/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class CarePlan extends FhirResource {
    public static final String RESOURCE_TYPE = "CarePlan";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_INSTANTIATESCANONICAL = "instantiatesCanonical";
    public static final String PROPERTY_INSTANTIATESURI = "instantiatesUri";
    public static final String PROPERTY_BASEDON = "basedOn";
    public static final String PROPERTY_REPLACES = "replaces";
    public static final String PROPERTY_PARTOF = "partOf";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_INTENT = "intent";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_TITLE = "title";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_PERIOD = "period";
    public static final String PROPERTY_CREATED = "created";
    public static final String PROPERTY_AUTHOR = "author";
    public static final String PROPERTY_CONTRIBUTOR = "contributor";
    public static final String PROPERTY_CARETEAM = "careTeam";
    public static final String PROPERTY_ADDRESSES = "addresses";
    public static final String PROPERTY_SUPPORTINGINFO = "supportingInfo";
    public static final String PROPERTY_GOAL = "goal";
    public static final String PROPERTY_ACTIVITY = "activity";
    public static final String PROPERTY_NOTE = "note";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public CarePlan(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * Business identifiers assigned to this care plan by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    public java.util.List<String> instantiatesCanonical() {
        return getList(String.class, PROPERTY_INSTANTIATESCANONICAL);
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan.
     */
    public java.util.List<String> instantiatesUri() {
        return getList(String.class, PROPERTY_INSTANTIATESURI);
    }

    /**
     * A care plan that is fulfilled in whole or in part by this care plan.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASEDON);
    }

    /**
     * Completed or terminated care plan whose function is taken by this new care plan.
     */
    public java.util.List<Reference> replaces() {
        return getList(Reference.class, PROPERTY_REPLACES);
    }

    /**
     * A larger care plan of which this particular care plan is a component or step.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, PROPERTY_PARTOF);
    }

    /**
     * Indicates whether the plan is currently being acted upon, represents future intentions or is now a historical record.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Indicates the level of authority/intentionality associated with the care plan and where the care plan fits into the workflow chain.
     */
    public String intent() {
        return getString(PROPERTY_INTENT);
    }

    /**
     * Identifies what "kind" of plan this is to support differentiation between multiple co-existing plans; e.g. "Home health", "psychiatric", "asthma", "disease management", "wellness plan", etc.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, PROPERTY_CATEGORY);
    }

    /**
     * Human-friendly name for the care plan.
     */
    public String title() {
        return getString(PROPERTY_TITLE);
    }

    /**
     * A description of the scope and nature of the plan.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * Identifies the patient or group whose intended care is described by the plan.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * The Encounter during which this CarePlan was created or to which the creation of this record is tightly associated.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * Indicates when the plan did (or is intended to) come into effect and end.
     */
    public Period period() {
        return getObject(Period.class, PROPERTY_PERIOD);
    }

    /**
     * Represents when this particular CarePlan record was created in the system, which is often a system-generated date.
     */
    public java.time.Instant created() {
        return java.time.Instant.parse(data.getString(PROPERTY_CREATED));
    }

    /**
     * When populated, the author is responsible for the care plan.  The care plan is attributed to the author.
     */
    public Reference author() {
        return getObject(Reference.class, PROPERTY_AUTHOR);
    }

    /**
     * Identifies the individual(s) or organization who provided the contents of the care plan.
     */
    public java.util.List<Reference> contributor() {
        return getList(Reference.class, PROPERTY_CONTRIBUTOR);
    }

    /**
     * Identifies all people and organizations who are expected to be involved in the care envisioned by this plan.
     */
    public java.util.List<Reference> careTeam() {
        return getList(Reference.class, PROPERTY_CARETEAM);
    }

    /**
     * Identifies the conditions/problems/concerns/diagnoses/etc. whose management and/or mitigation are handled by this plan.
     */
    public java.util.List<Reference> addresses() {
        return getList(Reference.class, PROPERTY_ADDRESSES);
    }

    /**
     * Identifies portions of the patient's record that specifically influenced the formation of the plan.  These might include comorbidities, recent procedures, limitations, recent assessments, etc.
     */
    public java.util.List<Reference> supportingInfo() {
        return getList(Reference.class, PROPERTY_SUPPORTINGINFO);
    }

    /**
     * Describes the intended objective(s) of carrying out the care plan.
     */
    public java.util.List<Reference> goal() {
        return getList(Reference.class, PROPERTY_GOAL);
    }

    /**
     * Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
     */
    public java.util.List<CarePlanActivity> activity() {
        return getList(CarePlanActivity.class, PROPERTY_ACTIVITY);
    }

    /**
     * General notes about the care plan not covered elsewhere.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
            b.add(PROPERTY_INSTANTIATESCANONICAL, FhirObject.toStringArray(instantiatesCanonical));
            return this;
        }

        public Builder instantiatesUri(final java.util.List<String> instantiatesUri) {
            b.add(PROPERTY_INSTANTIATESURI, FhirObject.toStringArray(instantiatesUri));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASEDON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder replaces(final java.util.List<Reference> replaces) {
            b.add(PROPERTY_REPLACES, FhirObject.toArray(replaces));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(PROPERTY_PARTOF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(PROPERTY_INTENT, intent);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder title(final String title) {
            b.add(PROPERTY_TITLE, title);
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder period(final Period period) {
            b.add(PROPERTY_PERIOD, period);
            return this;
        }

        public Builder created(final java.time.Instant created) {
            b.add(PROPERTY_CREATED, created.toString());
            return this;
        }

        public Builder author(final Reference author) {
            b.add(PROPERTY_AUTHOR, author);
            return this;
        }

        public Builder contributor(final java.util.List<Reference> contributor) {
            b.add(PROPERTY_CONTRIBUTOR, FhirObject.toArray(contributor));
            return this;
        }

        public Builder careTeam(final java.util.List<Reference> careTeam) {
            b.add(PROPERTY_CARETEAM, FhirObject.toArray(careTeam));
            return this;
        }

        public Builder addresses(final java.util.List<Reference> addresses) {
            b.add(PROPERTY_ADDRESSES, FhirObject.toArray(addresses));
            return this;
        }

        public Builder supportingInfo(final java.util.List<Reference> supportingInfo) {
            b.add(PROPERTY_SUPPORTINGINFO, FhirObject.toArray(supportingInfo));
            return this;
        }

        public Builder goal(final java.util.List<Reference> goal) {
            b.add(PROPERTY_GOAL, FhirObject.toArray(goal));
            return this;
        }

        public Builder activity(final java.util.List<CarePlanActivity> activity) {
            b.add(PROPERTY_ACTIVITY, FhirObject.toArray(activity));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public CarePlan build() {
            return new CarePlan(b.build());
        }
    }

    public static class CarePlanActivity extends FhirObject {
        public static final String RESOURCE_TYPE = "CarePlanActivity";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_OUTCOMECODEABLECONCEPT = "outcomeCodeableConcept";
        public static final String PROPERTY_OUTCOMEREFERENCE = "outcomeReference";
        public static final String PROPERTY_PROGRESS = "progress";
        public static final String PROPERTY_REFERENCE = "reference";
        public static final String PROPERTY_DETAIL = "detail";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CarePlanActivity(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Identifies the outcome at the point when the status of the activity is assessed.  For example, the outcome of an education activity could be patient understands (or not).
         */
        public java.util.List<CodeableConcept> outcomeCodeableConcept() {
            return getList(CodeableConcept.class, PROPERTY_OUTCOMECODEABLECONCEPT);
        }

        /**
         * Details of the outcome or action resulting from the activity.  The reference to an "event" resource, such as Procedure or Encounter or Observation, is the result/outcome of the activity itself.  The activity can be conveyed using CarePlan.activity.detail OR using the CarePlan.activity.reference (a reference to a “request” resource).
         */
        public java.util.List<Reference> outcomeReference() {
            return getList(Reference.class, PROPERTY_OUTCOMEREFERENCE);
        }

        /**
         * Notes about the adherence/status/progress of the activity.
         */
        public java.util.List<Annotation> progress() {
            return getList(Annotation.class, PROPERTY_PROGRESS);
        }

        /**
         * The details of the proposed activity represented in a specific resource.
         */
        public Reference reference() {
            return getObject(Reference.class, PROPERTY_REFERENCE);
        }

        /**
         * A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
         */
        public CarePlanDetail detail() {
            return getObject(CarePlanDetail.class, PROPERTY_DETAIL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder outcomeCodeableConcept(final java.util.List<CodeableConcept> outcomeCodeableConcept) {
                b.add(PROPERTY_OUTCOMECODEABLECONCEPT, FhirObject.toArray(outcomeCodeableConcept));
                return this;
            }

            public Builder outcomeReference(final java.util.List<Reference> outcomeReference) {
                b.add(PROPERTY_OUTCOMEREFERENCE, FhirObject.toArray(outcomeReference));
                return this;
            }

            public Builder progress(final java.util.List<Annotation> progress) {
                b.add(PROPERTY_PROGRESS, FhirObject.toArray(progress));
                return this;
            }

            public Builder reference(final Reference reference) {
                b.add(PROPERTY_REFERENCE, reference);
                return this;
            }

            public Builder detail(final CarePlanDetail detail) {
                b.add(PROPERTY_DETAIL, detail);
                return this;
            }

            public CarePlanActivity build() {
                return new CarePlanActivity(b.build());
            }
        }
    }

    public static class CarePlanDetail extends FhirObject {
        public static final String RESOURCE_TYPE = "CarePlanDetail";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_KIND = "kind";
        public static final String PROPERTY_INSTANTIATESCANONICAL = "instantiatesCanonical";
        public static final String PROPERTY_INSTANTIATESURI = "instantiatesUri";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_REASONCODE = "reasonCode";
        public static final String PROPERTY_REASONREFERENCE = "reasonReference";
        public static final String PROPERTY_GOAL = "goal";
        public static final String PROPERTY_STATUS = "status";
        public static final String PROPERTY_STATUSREASON = "statusReason";
        public static final String PROPERTY_DONOTPERFORM = "doNotPerform";
        public static final String PROPERTY_SCHEDULEDTIMING = "scheduledTiming";
        public static final String PROPERTY_SCHEDULEDPERIOD = "scheduledPeriod";
        public static final String PROPERTY_SCHEDULEDSTRING = "scheduledString";
        public static final String PROPERTY_LOCATION = "location";
        public static final String PROPERTY_PERFORMER = "performer";
        public static final String PROPERTY_PRODUCTCODEABLECONCEPT = "productCodeableConcept";
        public static final String PROPERTY_PRODUCTREFERENCE = "productReference";
        public static final String PROPERTY_DAILYAMOUNT = "dailyAmount";
        public static final String PROPERTY_QUANTITY = "quantity";
        public static final String PROPERTY_DESCRIPTION = "description";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CarePlanDetail(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A description of the kind of resource the in-line definition of a care plan activity is representing.  The CarePlan.activity.detail is an in-line definition when a resource is not referenced using CarePlan.activity.reference.  For example, a MedicationRequest, a ServiceRequest, or a CommunicationRequest.
         */
        public String kind() {
            return getString(PROPERTY_KIND);
        }

        /**
         * The URL pointing to a FHIR-defined protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
         */
        public java.util.List<String> instantiatesCanonical() {
            return getList(String.class, PROPERTY_INSTANTIATESCANONICAL);
        }

        /**
         * The URL pointing to an externally maintained protocol, guideline, questionnaire or other definition that is adhered to in whole or in part by this CarePlan activity.
         */
        public java.util.List<String> instantiatesUri() {
            return getList(String.class, PROPERTY_INSTANTIATESURI);
        }

        /**
         * Detailed description of the type of planned activity; e.g. what lab test, what procedure, what kind of encounter.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, PROPERTY_CODE);
        }

        /**
         * Provides the rationale that drove the inclusion of this particular activity as part of the plan or the reason why the activity was prohibited.
         */
        public java.util.List<CodeableConcept> reasonCode() {
            return getList(CodeableConcept.class, PROPERTY_REASONCODE);
        }

        /**
         * Indicates another resource, such as the health condition(s), whose existence justifies this request and drove the inclusion of this particular activity as part of the plan.
         */
        public java.util.List<Reference> reasonReference() {
            return getList(Reference.class, PROPERTY_REASONREFERENCE);
        }

        /**
         * Internal reference that identifies the goals that this activity is intended to contribute towards meeting.
         */
        public java.util.List<Reference> goal() {
            return getList(Reference.class, PROPERTY_GOAL);
        }

        /**
         * Identifies what progress is being made for the specific activity.
         */
        public String status() {
            return getString(PROPERTY_STATUS);
        }

        /**
         * Provides reason why the activity isn't yet started, is on hold, was cancelled, etc.
         */
        public CodeableConcept statusReason() {
            return getObject(CodeableConcept.class, PROPERTY_STATUSREASON);
        }

        /**
         * If true, indicates that the described activity is one that must NOT be engaged in when following the plan.  If false, or missing, indicates that the described activity is one that should be engaged in when following the plan.
         */
        public Boolean doNotPerform() {
            return data.getBoolean(PROPERTY_DONOTPERFORM);
        }

        /**
         * The period, timing or frequency upon which the described activity is to occur.
         */
        public Timing scheduledTiming() {
            return getObject(Timing.class, PROPERTY_SCHEDULEDTIMING);
        }

        /**
         * The period, timing or frequency upon which the described activity is to occur.
         */
        public Period scheduledPeriod() {
            return getObject(Period.class, PROPERTY_SCHEDULEDPERIOD);
        }

        /**
         * The period, timing or frequency upon which the described activity is to occur.
         */
        public String scheduledString() {
            return getString(PROPERTY_SCHEDULEDSTRING);
        }

        /**
         * Identifies the facility where the activity will occur; e.g. home, hospital, specific clinic, etc.
         */
        public Reference location() {
            return getObject(Reference.class, PROPERTY_LOCATION);
        }

        /**
         * Identifies who's expected to be involved in the activity.
         */
        public java.util.List<Reference> performer() {
            return getList(Reference.class, PROPERTY_PERFORMER);
        }

        /**
         * Identifies the food, drug or other product to be consumed or supplied in the activity.
         */
        public CodeableConcept productCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_PRODUCTCODEABLECONCEPT);
        }

        /**
         * Identifies the food, drug or other product to be consumed or supplied in the activity.
         */
        public Reference productReference() {
            return getObject(Reference.class, PROPERTY_PRODUCTREFERENCE);
        }

        /**
         * Identifies the quantity expected to be consumed in a given day.
         */
        public Quantity dailyAmount() {
            return getObject(Quantity.class, PROPERTY_DAILYAMOUNT);
        }

        /**
         * Identifies the quantity expected to be supplied, administered or consumed by the subject.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, PROPERTY_QUANTITY);
        }

        /**
         * This provides a textual description of constraints on the intended activity occurrence, including relation to other activities.  It may also include objectives, pre-conditions and end-conditions.  Finally, it may convey specifics about the activity such as body site, method, route, etc.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder kind(final String kind) {
                b.add(PROPERTY_KIND, kind);
                return this;
            }

            public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
                b.add(PROPERTY_INSTANTIATESCANONICAL, FhirObject.toStringArray(instantiatesCanonical));
                return this;
            }

            public Builder instantiatesUri(final java.util.List<String> instantiatesUri) {
                b.add(PROPERTY_INSTANTIATESURI, FhirObject.toStringArray(instantiatesUri));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
                b.add(PROPERTY_REASONCODE, FhirObject.toArray(reasonCode));
                return this;
            }

            public Builder reasonReference(final java.util.List<Reference> reasonReference) {
                b.add(PROPERTY_REASONREFERENCE, FhirObject.toArray(reasonReference));
                return this;
            }

            public Builder goal(final java.util.List<Reference> goal) {
                b.add(PROPERTY_GOAL, FhirObject.toArray(goal));
                return this;
            }

            public Builder status(final String status) {
                b.add(PROPERTY_STATUS, status);
                return this;
            }

            public Builder statusReason(final CodeableConcept statusReason) {
                b.add(PROPERTY_STATUSREASON, statusReason);
                return this;
            }

            public Builder doNotPerform(final Boolean doNotPerform) {
                b.add(PROPERTY_DONOTPERFORM, doNotPerform);
                return this;
            }

            public Builder scheduledTiming(final Timing scheduledTiming) {
                b.add(PROPERTY_SCHEDULEDTIMING, scheduledTiming);
                return this;
            }

            public Builder scheduledPeriod(final Period scheduledPeriod) {
                b.add(PROPERTY_SCHEDULEDPERIOD, scheduledPeriod);
                return this;
            }

            public Builder scheduledString(final String scheduledString) {
                b.add(PROPERTY_SCHEDULEDSTRING, scheduledString);
                return this;
            }

            public Builder location(final Reference location) {
                b.add(PROPERTY_LOCATION, location);
                return this;
            }

            public Builder performer(final java.util.List<Reference> performer) {
                b.add(PROPERTY_PERFORMER, FhirObject.toArray(performer));
                return this;
            }

            public Builder productCodeableConcept(final CodeableConcept productCodeableConcept) {
                b.add(PROPERTY_PRODUCTCODEABLECONCEPT, productCodeableConcept);
                return this;
            }

            public Builder productReference(final Reference productReference) {
                b.add(PROPERTY_PRODUCTREFERENCE, productReference);
                return this;
            }

            public Builder dailyAmount(final Quantity dailyAmount) {
                b.add(PROPERTY_DAILYAMOUNT, dailyAmount);
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public CarePlanDetail build() {
                return new CarePlanDetail(b.build());
            }
        }
    }
}
