/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class ClinicalImpression extends FhirResource {
    public static final String RESOURCE_TYPE = "ClinicalImpression";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_STATUS_REASON = "statusReason";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_EFFECTIVE_DATE_TIME = "effectiveDateTime";
    public static final String PROPERTY_EFFECTIVE_PERIOD = "effectivePeriod";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_ASSESSOR = "assessor";
    public static final String PROPERTY_PREVIOUS = "previous";
    public static final String PROPERTY_PROBLEM = "problem";
    public static final String PROPERTY_INVESTIGATION = "investigation";
    public static final String PROPERTY_PROTOCOL = "protocol";
    public static final String PROPERTY_SUMMARY = "summary";
    public static final String PROPERTY_FINDING = "finding";
    public static final String PROPERTY_PROGNOSIS_CODEABLE_CONCEPT = "prognosisCodeableConcept";
    public static final String PROPERTY_PROGNOSIS_REFERENCE = "prognosisReference";
    public static final String PROPERTY_SUPPORTING_INFO = "supportingInfo";
    public static final String PROPERTY_NOTE = "note";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ClinicalImpression(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Business identifiers assigned to this clinical impression by the
     * performer or other systems which remain constant as the resource is
     * updated and propagates from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Identifies the workflow status of the assessment.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Captures the reason for the current state of the ClinicalImpression.
     */
    public CodeableConcept statusReason() {
        return getObject(CodeableConcept.class, PROPERTY_STATUS_REASON);
    }

    /**
     * Categorizes the type of clinical assessment performed.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, PROPERTY_CODE);
    }

    /**
     * A summary of the context and/or cause of the assessment - why / where
     * it was performed, and what patient events/status prompted it.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * The patient or group of individuals assessed as part of this record.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * The Encounter during which this ClinicalImpression was created or to
     * which the creation of this record is tightly associated.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * The point in time or period over which the subject was assessed.
     */
    public String effectiveDateTime() {
        return getString(PROPERTY_EFFECTIVE_DATE_TIME);
    }

    /**
     * The point in time or period over which the subject was assessed.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * Indicates when the documentation of the assessment was complete.
     */
    public java.time.Instant date() {
        return java.time.Instant.parse(data.getString(PROPERTY_DATE));
    }

    /**
     * The clinician performing the assessment.
     */
    public Reference assessor() {
        return getObject(Reference.class, PROPERTY_ASSESSOR);
    }

    /**
     * A reference to the last assessment that was conducted on this patient.
     * Assessments are often/usually ongoing in nature; a care provider
     * (practitioner or team) will make new assessments on an ongoing basis
     * as new data arises or the patient's conditions changes.
     */
    public Reference previous() {
        return getObject(Reference.class, PROPERTY_PREVIOUS);
    }

    /**
     * A list of the relevant problems/conditions for a patient.
     */
    public java.util.List<Reference> problem() {
        return getList(Reference.class, PROPERTY_PROBLEM);
    }

    /**
     * One or more sets of investigations (signs, symptoms, etc.). The actual
     * grouping of investigations varies greatly depending on the type and
     * context of the assessment. These investigations may include data
     * generated during the assessment process, or data previously generated
     * and recorded that is pertinent to the outcomes.
     */
    public java.util.List<ClinicalImpressionInvestigation> investigation() {
        return getList(ClinicalImpressionInvestigation.class, PROPERTY_INVESTIGATION);
    }

    /**
     * Reference to a specific published clinical protocol that was followed
     * during this assessment, and/or that provides evidence in support of
     * the diagnosis.
     */
    public java.util.List<String> protocol() {
        return getList(String.class, PROPERTY_PROTOCOL);
    }

    /**
     * A text summary of the investigations and the diagnosis.
     */
    public String summary() {
        return getString(PROPERTY_SUMMARY);
    }

    /**
     * Specific findings or diagnoses that were considered likely or relevant
     * to ongoing treatment.
     */
    public java.util.List<ClinicalImpressionFinding> finding() {
        return getList(ClinicalImpressionFinding.class, PROPERTY_FINDING);
    }

    /**
     * Estimate of likely outcome.
     */
    public java.util.List<CodeableConcept> prognosisCodeableConcept() {
        return getList(CodeableConcept.class, PROPERTY_PROGNOSIS_CODEABLE_CONCEPT);
    }

    /**
     * RiskAssessment expressing likely outcome.
     */
    public java.util.List<Reference> prognosisReference() {
        return getList(Reference.class, PROPERTY_PROGNOSIS_REFERENCE);
    }

    /**
     * Information supporting the clinical impression.
     */
    public java.util.List<Reference> supportingInfo() {
        return getList(Reference.class, PROPERTY_SUPPORTING_INFO);
    }

    /**
     * Commentary about the impression, typically recorded after the
     * impression itself was made, though supplemental notes by the original
     * author could also appear.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReason(final CodeableConcept statusReason) {
            b.add(PROPERTY_STATUS_REASON, statusReason);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder effectiveDateTime(final String effectiveDateTime) {
            b.add(PROPERTY_EFFECTIVE_DATE_TIME, effectiveDateTime);
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder assessor(final Reference assessor) {
            b.add(PROPERTY_ASSESSOR, assessor);
            return this;
        }

        public Builder previous(final Reference previous) {
            b.add(PROPERTY_PREVIOUS, previous);
            return this;
        }

        public Builder problem(final java.util.List<Reference> problem) {
            b.add(PROPERTY_PROBLEM, FhirObject.toArray(problem));
            return this;
        }

        public Builder investigation(final java.util.List<ClinicalImpressionInvestigation> investigation) {
            b.add(PROPERTY_INVESTIGATION, FhirObject.toArray(investigation));
            return this;
        }

        public Builder protocol(final java.util.List<String> protocol) {
            b.add(PROPERTY_PROTOCOL, FhirObject.toStringArray(protocol));
            return this;
        }

        public Builder summary(final String summary) {
            b.add(PROPERTY_SUMMARY, summary);
            return this;
        }

        public Builder finding(final java.util.List<ClinicalImpressionFinding> finding) {
            b.add(PROPERTY_FINDING, FhirObject.toArray(finding));
            return this;
        }

        public Builder prognosisCodeableConcept(final java.util.List<CodeableConcept> prognosisCodeableConcept) {
            b.add(PROPERTY_PROGNOSIS_CODEABLE_CONCEPT, FhirObject.toArray(prognosisCodeableConcept));
            return this;
        }

        public Builder prognosisReference(final java.util.List<Reference> prognosisReference) {
            b.add(PROPERTY_PROGNOSIS_REFERENCE, FhirObject.toArray(prognosisReference));
            return this;
        }

        public Builder supportingInfo(final java.util.List<Reference> supportingInfo) {
            b.add(PROPERTY_SUPPORTING_INFO, FhirObject.toArray(supportingInfo));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public ClinicalImpression build() {
            return new ClinicalImpression(b.build());
        }
    }

    public static class ClinicalImpressionFinding extends FhirObject {
        public static final String RESOURCE_TYPE = "ClinicalImpressionFinding";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_ITEM_CODEABLE_CONCEPT = "itemCodeableConcept";
        public static final String PROPERTY_ITEM_REFERENCE = "itemReference";
        public static final String PROPERTY_BASIS = "basis";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClinicalImpressionFinding(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Specific text or code for finding or diagnosis, which may include
         * ruled-out or resolved conditions.
         */
        public CodeableConcept itemCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_ITEM_CODEABLE_CONCEPT);
        }

        /**
         * Specific reference for finding or diagnosis, which may include
         * ruled-out or resolved conditions.
         */
        public Reference itemReference() {
            return getObject(Reference.class, PROPERTY_ITEM_REFERENCE);
        }

        /**
         * Which investigations support finding or diagnosis.
         */
        public String basis() {
            return getString(PROPERTY_BASIS);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder itemCodeableConcept(final CodeableConcept itemCodeableConcept) {
                b.add(PROPERTY_ITEM_CODEABLE_CONCEPT, itemCodeableConcept);
                return this;
            }

            public Builder itemReference(final Reference itemReference) {
                b.add(PROPERTY_ITEM_REFERENCE, itemReference);
                return this;
            }

            public Builder basis(final String basis) {
                b.add(PROPERTY_BASIS, basis);
                return this;
            }

            public ClinicalImpressionFinding build() {
                return new ClinicalImpressionFinding(b.build());
            }
        }
    }

    public static class ClinicalImpressionInvestigation extends FhirObject {
        public static final String RESOURCE_TYPE = "ClinicalImpressionInvestigation";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_ITEM = "item";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ClinicalImpressionInvestigation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A name/code for the group (&quot;set&quot;) of investigations. Typically, this
         * will be something like &quot;signs&quot;, &quot;symptoms&quot;, &quot;clinical&quot;, &quot;diagnostic&quot;,
         * but the list is not constrained, and others such groups such as
         * (exposure|family|travel|nutritional) history may be used.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, PROPERTY_CODE);
        }

        /**
         * A record of a specific investigation that was undertaken.
         */
        public java.util.List<Reference> item() {
            return getList(Reference.class, PROPERTY_ITEM);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder item(final java.util.List<Reference> item) {
                b.add(PROPERTY_ITEM, FhirObject.toArray(item));
                return this;
            }

            public ClinicalImpressionInvestigation build() {
                return new ClinicalImpressionInvestigation(b.build());
            }
        }
    }
}
