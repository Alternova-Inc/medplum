/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class SearchParameter extends FhirResource {
    public static final String RESOURCE_TYPE = "SearchParameter";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_VERSION = "version";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_DERIVED_FROM = "derivedFrom";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_EXPERIMENTAL = "experimental";
    public static final String PROPERTY_DATE = "date";
    public static final String PROPERTY_PUBLISHER = "publisher";
    public static final String PROPERTY_CONTACT = "contact";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_USE_CONTEXT = "useContext";
    public static final String PROPERTY_JURISDICTION = "jurisdiction";
    public static final String PROPERTY_PURPOSE = "purpose";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_BASE = "base";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_EXPRESSION = "expression";
    public static final String PROPERTY_XPATH = "xpath";
    public static final String PROPERTY_XPATH_USAGE = "xpathUsage";
    public static final String PROPERTY_TARGET = "target";
    public static final String PROPERTY_MULTIPLE_OR = "multipleOr";
    public static final String PROPERTY_MULTIPLE_AND = "multipleAnd";
    public static final String PROPERTY_COMPARATOR = "comparator";
    public static final String PROPERTY_MODIFIER = "modifier";
    public static final String PROPERTY_CHAIN = "chain";
    public static final String PROPERTY_COMPONENT = "component";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public SearchParameter(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * An absolute URI that is used to identify this search parameter when it
     * is referenced in a specification, model, design or an instance; also
     * called its canonical identifier. This SHOULD be globally unique and
     * SHOULD be a literal address at which at which an authoritative
     * instance of this search parameter is (or will be) published. This URL
     * can be the target of a canonical reference. It SHALL remain the same
     * when the search parameter is stored on different servers.
     */
    public String url() {
        return getString(PROPERTY_URL);
    }

    /**
     * The identifier that is used to identify this version of the search
     * parameter when it is referenced in a specification, model, design or
     * instance. This is an arbitrary value managed by the search parameter
     * author and is not expected to be globally unique. For example, it
     * might be a timestamp (e.g. yyyymmdd) if a managed version is not
     * available. There is also no expectation that versions can be placed in
     * a lexicographical sequence.
     */
    public String version() {
        return getString(PROPERTY_VERSION);
    }

    /**
     * A natural language name identifying the search parameter. This name
     * should be usable as an identifier for the module by machine processing
     * applications such as code generation.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * Where this search parameter is originally defined. If a derivedFrom is
     * provided, then the details in the search parameter must be consistent
     * with the definition from which it is defined. i.e. the parameter
     * should have the same meaning, and (usually) the functionality should
     * be a proper subset of the underlying search parameter.
     */
    public String derivedFrom() {
        return getString(PROPERTY_DERIVED_FROM);
    }

    /**
     * The status of this search parameter. Enables tracking the life-cycle
     * of the content.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A Boolean value to indicate that this search parameter is authored for
     * testing purposes (or education/evaluation/marketing) and is not
     * intended to be used for genuine usage.
     */
    public Boolean experimental() {
        return data.getBoolean(PROPERTY_EXPERIMENTAL);
    }

    /**
     * The date  (and optionally time) when the search parameter was
     * published. The date must change when the business version changes and
     * it must change if the status code changes. In addition, it should
     * change when the substantive content of the search parameter changes.
     */
    public java.time.Instant date() {
        return java.time.Instant.parse(data.getString(PROPERTY_DATE));
    }

    /**
     * The name of the organization or individual that published the search
     * parameter.
     */
    public String publisher() {
        return getString(PROPERTY_PUBLISHER);
    }

    /**
     * Contact details to assist a user in finding and communicating with the
     * publisher.
     */
    public java.util.List<ContactDetail> contact() {
        return getList(ContactDetail.class, PROPERTY_CONTACT);
    }

    /**
     * And how it used.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * The content was developed with a focus and intent of supporting the
     * contexts that are listed. These contexts may be general categories
     * (gender, age, ...) or may be references to specific programs
     * (insurance plans, studies, ...) and may be used to assist with
     * indexing and searching for appropriate search parameter instances.
     */
    public java.util.List<UsageContext> useContext() {
        return getList(UsageContext.class, PROPERTY_USE_CONTEXT);
    }

    /**
     * A legal or geographic region in which the search parameter is intended
     * to be used.
     */
    public java.util.List<CodeableConcept> jurisdiction() {
        return getList(CodeableConcept.class, PROPERTY_JURISDICTION);
    }

    /**
     * Explanation of why this search parameter is needed and why it has been
     * designed as it has.
     */
    public String purpose() {
        return getString(PROPERTY_PURPOSE);
    }

    /**
     * The code used in the URL or the parameter name in a parameters
     * resource for this search parameter.
     */
    public String code() {
        return getString(PROPERTY_CODE);
    }

    /**
     * The base resource type(s) that this search parameter can be used
     * against.
     */
    public java.util.List<String> base() {
        return getList(String.class, PROPERTY_BASE);
    }

    /**
     * The type of value that a search parameter may contain, and how the
     * content is interpreted.
     */
    public String type() {
        return getString(PROPERTY_TYPE);
    }

    /**
     * A FHIRPath expression that returns a set of elements for the search
     * parameter.
     */
    public String expression() {
        return getString(PROPERTY_EXPRESSION);
    }

    /**
     * An XPath expression that returns a set of elements for the search
     * parameter.
     */
    public String xpath() {
        return getString(PROPERTY_XPATH);
    }

    /**
     * How the search parameter relates to the set of elements returned by
     * evaluating the xpath query.
     */
    public String xpathUsage() {
        return getString(PROPERTY_XPATH_USAGE);
    }

    /**
     * Types of resource (if a resource is referenced).
     */
    public java.util.List<String> target() {
        return getList(String.class, PROPERTY_TARGET);
    }

    /**
     * Whether multiple values are allowed for each time the parameter
     * exists. Values are separated by commas, and the parameter matches if
     * any of the values match.
     */
    public Boolean multipleOr() {
        return data.getBoolean(PROPERTY_MULTIPLE_OR);
    }

    /**
     * Whether multiple parameters are allowed - e.g. more than one parameter
     * with the same name. The search matches if all the parameters match.
     */
    public Boolean multipleAnd() {
        return data.getBoolean(PROPERTY_MULTIPLE_AND);
    }

    /**
     * Comparators supported for the search parameter.
     */
    public java.util.List<String> comparator() {
        return getList(String.class, PROPERTY_COMPARATOR);
    }

    /**
     * A modifier supported for the search parameter.
     */
    public java.util.List<String> modifier() {
        return getList(String.class, PROPERTY_MODIFIER);
    }

    /**
     * Contains the names of any search parameters which may be chained to
     * the containing search parameter. Chained parameters may be added to
     * search parameters of type reference and specify that resources will
     * only be returned if they contain a reference to a resource which
     * matches the chained parameter value. Values for this field should be
     * drawn from SearchParameter.code for a parameter on the target resource
     * type.
     */
    public java.util.List<String> chain() {
        return getList(String.class, PROPERTY_CHAIN);
    }

    /**
     * Used to define the parts of a composite search parameter.
     */
    public java.util.List<SearchParameterComponent> component() {
        return getList(SearchParameterComponent.class, PROPERTY_COMPONENT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder url(final String url) {
            b.add(PROPERTY_URL, url);
            return this;
        }

        public Builder version(final String version) {
            b.add(PROPERTY_VERSION, version);
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder derivedFrom(final String derivedFrom) {
            b.add(PROPERTY_DERIVED_FROM, derivedFrom);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder experimental(final Boolean experimental) {
            b.add(PROPERTY_EXPERIMENTAL, experimental);
            return this;
        }

        public Builder date(final java.time.Instant date) {
            b.add(PROPERTY_DATE, date.toString());
            return this;
        }

        public Builder publisher(final String publisher) {
            b.add(PROPERTY_PUBLISHER, publisher);
            return this;
        }

        public Builder contact(final java.util.List<ContactDetail> contact) {
            b.add(PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder useContext(final java.util.List<UsageContext> useContext) {
            b.add(PROPERTY_USE_CONTEXT, FhirObject.toArray(useContext));
            return this;
        }

        public Builder jurisdiction(final java.util.List<CodeableConcept> jurisdiction) {
            b.add(PROPERTY_JURISDICTION, FhirObject.toArray(jurisdiction));
            return this;
        }

        public Builder purpose(final String purpose) {
            b.add(PROPERTY_PURPOSE, purpose);
            return this;
        }

        public Builder code(final String code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder base(final java.util.List<String> base) {
            b.add(PROPERTY_BASE, FhirObject.toStringArray(base));
            return this;
        }

        public Builder type(final String type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder expression(final String expression) {
            b.add(PROPERTY_EXPRESSION, expression);
            return this;
        }

        public Builder xpath(final String xpath) {
            b.add(PROPERTY_XPATH, xpath);
            return this;
        }

        public Builder xpathUsage(final String xpathUsage) {
            b.add(PROPERTY_XPATH_USAGE, xpathUsage);
            return this;
        }

        public Builder target(final java.util.List<String> target) {
            b.add(PROPERTY_TARGET, FhirObject.toStringArray(target));
            return this;
        }

        public Builder multipleOr(final Boolean multipleOr) {
            b.add(PROPERTY_MULTIPLE_OR, multipleOr);
            return this;
        }

        public Builder multipleAnd(final Boolean multipleAnd) {
            b.add(PROPERTY_MULTIPLE_AND, multipleAnd);
            return this;
        }

        public Builder comparator(final java.util.List<String> comparator) {
            b.add(PROPERTY_COMPARATOR, FhirObject.toStringArray(comparator));
            return this;
        }

        public Builder modifier(final java.util.List<String> modifier) {
            b.add(PROPERTY_MODIFIER, FhirObject.toStringArray(modifier));
            return this;
        }

        public Builder chain(final java.util.List<String> chain) {
            b.add(PROPERTY_CHAIN, FhirObject.toStringArray(chain));
            return this;
        }

        public Builder component(final java.util.List<SearchParameterComponent> component) {
            b.add(PROPERTY_COMPONENT, FhirObject.toArray(component));
            return this;
        }

        public SearchParameter build() {
            return new SearchParameter(b.build());
        }
    }

    public static class SearchParameterComponent extends FhirObject {
        public static final String RESOURCE_TYPE = "SearchParameterComponent";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_DEFINITION = "definition";
        public static final String PROPERTY_EXPRESSION = "expression";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SearchParameterComponent(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The definition of the search parameter that describes this part.
         */
        public String definition() {
            return getString(PROPERTY_DEFINITION);
        }

        /**
         * A sub-expression that defines how to extract values for this component
         * from the output of the main SearchParameter.expression.
         */
        public String expression() {
            return getString(PROPERTY_EXPRESSION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder definition(final String definition) {
                b.add(PROPERTY_DEFINITION, definition);
                return this;
            }

            public Builder expression(final String expression) {
                b.add(PROPERTY_EXPRESSION, expression);
                return this;
            }

            public SearchParameterComponent build() {
                return new SearchParameterComponent(b.build());
            }
        }
    }
}
