/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Contract extends FhirResource {
    public static final String RESOURCE_TYPE = "Contract";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_URL = "url";
    public static final String PROPERTY_VERSION = "version";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_LEGAL_STATE = "legalState";
    public static final String PROPERTY_INSTANTIATES_CANONICAL = "instantiatesCanonical";
    public static final String PROPERTY_INSTANTIATES_URI = "instantiatesUri";
    public static final String PROPERTY_CONTENT_DERIVATIVE = "contentDerivative";
    public static final String PROPERTY_ISSUED = "issued";
    public static final String PROPERTY_APPLIES = "applies";
    public static final String PROPERTY_EXPIRATION_TYPE = "expirationType";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_AUTHORITY = "authority";
    public static final String PROPERTY_DOMAIN = "domain";
    public static final String PROPERTY_SITE = "site";
    public static final String PROPERTY_NAME = "name";
    public static final String PROPERTY_TITLE = "title";
    public static final String PROPERTY_SUBTITLE = "subtitle";
    public static final String PROPERTY_ALIAS = "alias";
    public static final String PROPERTY_AUTHOR = "author";
    public static final String PROPERTY_SCOPE = "scope";
    public static final String PROPERTY_TOPIC_CODEABLE_CONCEPT = "topicCodeableConcept";
    public static final String PROPERTY_TOPIC_REFERENCE = "topicReference";
    public static final String PROPERTY_TYPE = "type";
    public static final String PROPERTY_SUB_TYPE = "subType";
    public static final String PROPERTY_CONTENT_DEFINITION = "contentDefinition";
    public static final String PROPERTY_TERM = "term";
    public static final String PROPERTY_SUPPORTING_INFO = "supportingInfo";
    public static final String PROPERTY_RELEVANT_HISTORY = "relevantHistory";
    public static final String PROPERTY_SIGNER = "signer";
    public static final String PROPERTY_FRIENDLY = "friendly";
    public static final String PROPERTY_LEGAL = "legal";
    public static final String PROPERTY_RULE = "rule";
    public static final String PROPERTY_LEGALLY_BINDING_ATTACHMENT = "legallyBindingAttachment";
    public static final String PROPERTY_LEGALLY_BINDING_REFERENCE = "legallyBindingReference";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Contract(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Unique identifier for this Contract or a derivative that references a
     * Source Contract.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Canonical identifier for this contract, represented as a URI (globally
     * unique).
     */
    public String url() {
        return getString(PROPERTY_URL);
    }

    /**
     * An edition identifier used for business purposes to label business
     * significant variants.
     */
    public String version() {
        return getString(PROPERTY_VERSION);
    }

    /**
     * The status of the resource instance.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Legal states of the formation of a legal instrument, which is a
     * formally executed written document that can be formally attributed to
     * its author, records and formally expresses a legally enforceable act,
     * process, or contractual duty, obligation, or right, and therefore
     * evidences that act, process, or agreement.
     */
    public CodeableConcept legalState() {
        return getObject(CodeableConcept.class, PROPERTY_LEGAL_STATE);
    }

    /**
     * The URL pointing to a FHIR-defined Contract Definition that is adhered
     * to in whole or part by this Contract.
     */
    public Reference instantiatesCanonical() {
        return getObject(Reference.class, PROPERTY_INSTANTIATES_CANONICAL);
    }

    /**
     * The URL pointing to an externally maintained definition that is
     * adhered to in whole or in part by this Contract.
     */
    public String instantiatesUri() {
        return getString(PROPERTY_INSTANTIATES_URI);
    }

    /**
     * The minimal content derived from the basal information source at a
     * specific stage in its lifecycle.
     */
    public CodeableConcept contentDerivative() {
        return getObject(CodeableConcept.class, PROPERTY_CONTENT_DERIVATIVE);
    }

    /**
     * When this  Contract was issued.
     */
    public java.time.Instant issued() {
        return java.time.Instant.parse(data.getString(PROPERTY_ISSUED));
    }

    /**
     * Relevant time or time-period when this Contract is applicable.
     */
    public Period applies() {
        return getObject(Period.class, PROPERTY_APPLIES);
    }

    /**
     * Event resulting in discontinuation or termination of this Contract
     * instance by one or more parties to the contract.
     */
    public CodeableConcept expirationType() {
        return getObject(CodeableConcept.class, PROPERTY_EXPIRATION_TYPE);
    }

    /**
     * The target entity impacted by or of interest to parties to the
     * agreement.
     */
    public java.util.List<Reference> subject() {
        return getList(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * A formally or informally recognized grouping of people, principals,
     * organizations, or jurisdictions formed for the purpose of achieving
     * some form of collective action such as the promulgation,
     * administration and enforcement of contracts and policies.
     */
    public java.util.List<Reference> authority() {
        return getList(Reference.class, PROPERTY_AUTHORITY);
    }

    /**
     * Recognized governance framework or system operating with a
     * circumscribed scope in accordance with specified principles, policies,
     * processes or procedures for managing rights, actions, or behaviors of
     * parties or principals relative to resources.
     */
    public java.util.List<Reference> domain() {
        return getList(Reference.class, PROPERTY_DOMAIN);
    }

    /**
     * Sites in which the contract is complied with,  exercised, or in force.
     */
    public java.util.List<Reference> site() {
        return getList(Reference.class, PROPERTY_SITE);
    }

    /**
     * A natural language name identifying this Contract definition,
     * derivative, or instance in any legal state. Provides additional
     * information about its content. This name should be usable as an
     * identifier for the module by machine processing applications such as
     * code generation.
     */
    public String name() {
        return getString(PROPERTY_NAME);
    }

    /**
     * A short, descriptive, user-friendly title for this Contract
     * definition, derivative, or instance in any legal state.t giving
     * additional information about its content.
     */
    public String title() {
        return getString(PROPERTY_TITLE);
    }

    /**
     * An explanatory or alternate user-friendly title for this Contract
     * definition, derivative, or instance in any legal state.t giving
     * additional information about its content.
     */
    public String subtitle() {
        return getString(PROPERTY_SUBTITLE);
    }

    /**
     * Alternative representation of the title for this Contract definition,
     * derivative, or instance in any legal state., e.g., a domain specific
     * contract number related to legislation.
     */
    public java.util.List<String> alias() {
        return getList(String.class, PROPERTY_ALIAS);
    }

    /**
     * The individual or organization that authored the Contract definition,
     * derivative, or instance in any legal state.
     */
    public Reference author() {
        return getObject(Reference.class, PROPERTY_AUTHOR);
    }

    /**
     * A selector of legal concerns for this Contract definition, derivative,
     * or instance in any legal state.
     */
    public CodeableConcept scope() {
        return getObject(CodeableConcept.class, PROPERTY_SCOPE);
    }

    /**
     * Narrows the range of legal concerns to focus on the achievement of
     * specific contractual objectives.
     */
    public CodeableConcept topicCodeableConcept() {
        return getObject(CodeableConcept.class, PROPERTY_TOPIC_CODEABLE_CONCEPT);
    }

    /**
     * Narrows the range of legal concerns to focus on the achievement of
     * specific contractual objectives.
     */
    public Reference topicReference() {
        return getObject(Reference.class, PROPERTY_TOPIC_REFERENCE);
    }

    /**
     * A high-level category for the legal instrument, whether constructed as
     * a Contract definition, derivative, or instance in any legal state. 
     * Provides additional information about its content within the context
     * of the Contract's scope to distinguish the kinds of systems that would
     * be interested in the contract.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, PROPERTY_TYPE);
    }

    /**
     * Sub-category for the Contract that distinguishes the kinds of systems
     * that would be interested in the Contract within the context of the
     * Contract's scope.
     */
    public java.util.List<CodeableConcept> subType() {
        return getList(CodeableConcept.class, PROPERTY_SUB_TYPE);
    }

    /**
     * Precusory content developed with a focus and intent of supporting the
     * formation a Contract instance, which may be associated with and
     * transformable into a Contract.
     */
    public ContractContentDefinition contentDefinition() {
        return getObject(ContractContentDefinition.class, PROPERTY_CONTENT_DEFINITION);
    }

    /**
     * One or more Contract Provisions, which may be related and conveyed as
     * a group, and may contain nested groups.
     */
    public java.util.List<ContractTerm> term() {
        return getList(ContractTerm.class, PROPERTY_TERM);
    }

    /**
     * Information that may be needed by/relevant to the performer in their
     * execution of this term action.
     */
    public java.util.List<Reference> supportingInfo() {
        return getList(Reference.class, PROPERTY_SUPPORTING_INFO);
    }

    /**
     * Links to Provenance records for past versions of this Contract
     * definition, derivative, or instance, which identify key state
     * transitions or updates that are likely to be relevant to a user
     * looking at the current version of the Contract.  The Provence.entity
     * indicates the target that was changed in the update.
     * http://build.fhir.org/provenance-definitions.html#Provenance.entity.
     */
    public java.util.List<Reference> relevantHistory() {
        return getList(Reference.class, PROPERTY_RELEVANT_HISTORY);
    }

    /**
     * Parties with legal standing in the Contract, including the principal
     * parties, the grantor(s) and grantee(s), which are any person or
     * organization bound by the contract, and any ancillary parties, which
     * facilitate the execution of the contract such as a notary or witness.
     */
    public java.util.List<ContractSigner> signer() {
        return getList(ContractSigner.class, PROPERTY_SIGNER);
    }

    /**
     * The &quot;patient friendly language&quot; versionof the Contract in whole or in
     * parts. &quot;Patient friendly language&quot; means the representation of the
     * Contract and Contract Provisions in a manner that is readily
     * accessible and understandable by a layperson in accordance with best
     * practices for communication styles that ensure that those agreeing to
     * or signing the Contract understand the roles, actions, obligations,
     * responsibilities, and implication of the agreement.
     */
    public java.util.List<ContractFriendly> friendly() {
        return getList(ContractFriendly.class, PROPERTY_FRIENDLY);
    }

    /**
     * List of Legal expressions or representations of this Contract.
     */
    public java.util.List<ContractLegal> legal() {
        return getList(ContractLegal.class, PROPERTY_LEGAL);
    }

    /**
     * List of Computable Policy Rule Language Representations of this
     * Contract.
     */
    public java.util.List<ContractRule> rule() {
        return getList(ContractRule.class, PROPERTY_RULE);
    }

    /**
     * Legally binding Contract: This is the signed and legally recognized
     * representation of the Contract, which is considered the &quot;source of
     * truth&quot; and which would be the basis for legal action related to
     * enforcement of this Contract.
     */
    public Attachment legallyBindingAttachment() {
        return getObject(Attachment.class, PROPERTY_LEGALLY_BINDING_ATTACHMENT);
    }

    /**
     * Legally binding Contract: This is the signed and legally recognized
     * representation of the Contract, which is considered the &quot;source of
     * truth&quot; and which would be the basis for legal action related to
     * enforcement of this Contract.
     */
    public Reference legallyBindingReference() {
        return getObject(Reference.class, PROPERTY_LEGALLY_BINDING_REFERENCE);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder url(final String url) {
            b.add(PROPERTY_URL, url);
            return this;
        }

        public Builder version(final String version) {
            b.add(PROPERTY_VERSION, version);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder legalState(final CodeableConcept legalState) {
            b.add(PROPERTY_LEGAL_STATE, legalState);
            return this;
        }

        public Builder instantiatesCanonical(final Reference instantiatesCanonical) {
            b.add(PROPERTY_INSTANTIATES_CANONICAL, instantiatesCanonical);
            return this;
        }

        public Builder instantiatesUri(final String instantiatesUri) {
            b.add(PROPERTY_INSTANTIATES_URI, instantiatesUri);
            return this;
        }

        public Builder contentDerivative(final CodeableConcept contentDerivative) {
            b.add(PROPERTY_CONTENT_DERIVATIVE, contentDerivative);
            return this;
        }

        public Builder issued(final java.time.Instant issued) {
            b.add(PROPERTY_ISSUED, issued.toString());
            return this;
        }

        public Builder applies(final Period applies) {
            b.add(PROPERTY_APPLIES, applies);
            return this;
        }

        public Builder expirationType(final CodeableConcept expirationType) {
            b.add(PROPERTY_EXPIRATION_TYPE, expirationType);
            return this;
        }

        public Builder subject(final java.util.List<Reference> subject) {
            b.add(PROPERTY_SUBJECT, FhirObject.toArray(subject));
            return this;
        }

        public Builder authority(final java.util.List<Reference> authority) {
            b.add(PROPERTY_AUTHORITY, FhirObject.toArray(authority));
            return this;
        }

        public Builder domain(final java.util.List<Reference> domain) {
            b.add(PROPERTY_DOMAIN, FhirObject.toArray(domain));
            return this;
        }

        public Builder site(final java.util.List<Reference> site) {
            b.add(PROPERTY_SITE, FhirObject.toArray(site));
            return this;
        }

        public Builder name(final String name) {
            b.add(PROPERTY_NAME, name);
            return this;
        }

        public Builder title(final String title) {
            b.add(PROPERTY_TITLE, title);
            return this;
        }

        public Builder subtitle(final String subtitle) {
            b.add(PROPERTY_SUBTITLE, subtitle);
            return this;
        }

        public Builder alias(final java.util.List<String> alias) {
            b.add(PROPERTY_ALIAS, FhirObject.toStringArray(alias));
            return this;
        }

        public Builder author(final Reference author) {
            b.add(PROPERTY_AUTHOR, author);
            return this;
        }

        public Builder scope(final CodeableConcept scope) {
            b.add(PROPERTY_SCOPE, scope);
            return this;
        }

        public Builder topicCodeableConcept(final CodeableConcept topicCodeableConcept) {
            b.add(PROPERTY_TOPIC_CODEABLE_CONCEPT, topicCodeableConcept);
            return this;
        }

        public Builder topicReference(final Reference topicReference) {
            b.add(PROPERTY_TOPIC_REFERENCE, topicReference);
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(PROPERTY_TYPE, type);
            return this;
        }

        public Builder subType(final java.util.List<CodeableConcept> subType) {
            b.add(PROPERTY_SUB_TYPE, FhirObject.toArray(subType));
            return this;
        }

        public Builder contentDefinition(final ContractContentDefinition contentDefinition) {
            b.add(PROPERTY_CONTENT_DEFINITION, contentDefinition);
            return this;
        }

        public Builder term(final java.util.List<ContractTerm> term) {
            b.add(PROPERTY_TERM, FhirObject.toArray(term));
            return this;
        }

        public Builder supportingInfo(final java.util.List<Reference> supportingInfo) {
            b.add(PROPERTY_SUPPORTING_INFO, FhirObject.toArray(supportingInfo));
            return this;
        }

        public Builder relevantHistory(final java.util.List<Reference> relevantHistory) {
            b.add(PROPERTY_RELEVANT_HISTORY, FhirObject.toArray(relevantHistory));
            return this;
        }

        public Builder signer(final java.util.List<ContractSigner> signer) {
            b.add(PROPERTY_SIGNER, FhirObject.toArray(signer));
            return this;
        }

        public Builder friendly(final java.util.List<ContractFriendly> friendly) {
            b.add(PROPERTY_FRIENDLY, FhirObject.toArray(friendly));
            return this;
        }

        public Builder legal(final java.util.List<ContractLegal> legal) {
            b.add(PROPERTY_LEGAL, FhirObject.toArray(legal));
            return this;
        }

        public Builder rule(final java.util.List<ContractRule> rule) {
            b.add(PROPERTY_RULE, FhirObject.toArray(rule));
            return this;
        }

        public Builder legallyBindingAttachment(final Attachment legallyBindingAttachment) {
            b.add(PROPERTY_LEGALLY_BINDING_ATTACHMENT, legallyBindingAttachment);
            return this;
        }

        public Builder legallyBindingReference(final Reference legallyBindingReference) {
            b.add(PROPERTY_LEGALLY_BINDING_REFERENCE, legallyBindingReference);
            return this;
        }

        public Contract build() {
            return new Contract(b.build());
        }
    }

    public static class ContractAction extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractAction";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_DO_NOT_PERFORM = "doNotPerform";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_SUBJECT = "subject";
        public static final String PROPERTY_INTENT = "intent";
        public static final String PROPERTY_LINK_ID = "linkId";
        public static final String PROPERTY_STATUS = "status";
        public static final String PROPERTY_CONTEXT = "context";
        public static final String PROPERTY_CONTEXT_LINK_ID = "contextLinkId";
        public static final String PROPERTY_OCCURRENCE_DATE_TIME = "occurrenceDateTime";
        public static final String PROPERTY_OCCURRENCE_PERIOD = "occurrencePeriod";
        public static final String PROPERTY_OCCURRENCE_TIMING = "occurrenceTiming";
        public static final String PROPERTY_REQUESTER = "requester";
        public static final String PROPERTY_REQUESTER_LINK_ID = "requesterLinkId";
        public static final String PROPERTY_PERFORMER_TYPE = "performerType";
        public static final String PROPERTY_PERFORMER_ROLE = "performerRole";
        public static final String PROPERTY_PERFORMER = "performer";
        public static final String PROPERTY_PERFORMER_LINK_ID = "performerLinkId";
        public static final String PROPERTY_REASON_CODE = "reasonCode";
        public static final String PROPERTY_REASON_REFERENCE = "reasonReference";
        public static final String PROPERTY_REASON = "reason";
        public static final String PROPERTY_REASON_LINK_ID = "reasonLinkId";
        public static final String PROPERTY_NOTE = "note";
        public static final String PROPERTY_SECURITY_LABEL_NUMBER = "securityLabelNumber";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractAction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * True if the term prohibits the  action.
         */
        public Boolean doNotPerform() {
            return data.getBoolean(PROPERTY_DO_NOT_PERFORM);
        }

        /**
         * Activity or service obligation to be done or not done, performed or
         * not performed, effectuated or not by this Contract term.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Entity of the action.
         */
        public java.util.List<ContractSubject> subject() {
            return getList(ContractSubject.class, PROPERTY_SUBJECT);
        }

        /**
         * Reason or purpose for the action stipulated by this Contract
         * Provision.
         */
        public CodeableConcept intent() {
            return getObject(CodeableConcept.class, PROPERTY_INTENT);
        }

        /**
         * Id [identifier??] of the clause or question text related to this
         * action in the referenced form or QuestionnaireResponse.
         */
        public java.util.List<String> linkId() {
            return getList(String.class, PROPERTY_LINK_ID);
        }

        /**
         * Current state of the term action.
         */
        public CodeableConcept status() {
            return getObject(CodeableConcept.class, PROPERTY_STATUS);
        }

        /**
         * Encounter or Episode with primary association to specified term
         * activity.
         */
        public Reference context() {
            return getObject(Reference.class, PROPERTY_CONTEXT);
        }

        /**
         * Id [identifier??] of the clause or question text related to the
         * requester of this action in the referenced form or
         * QuestionnaireResponse.
         */
        public java.util.List<String> contextLinkId() {
            return getList(String.class, PROPERTY_CONTEXT_LINK_ID);
        }

        /**
         * When action happens.
         */
        public String occurrenceDateTime() {
            return getString(PROPERTY_OCCURRENCE_DATE_TIME);
        }

        /**
         * When action happens.
         */
        public Period occurrencePeriod() {
            return getObject(Period.class, PROPERTY_OCCURRENCE_PERIOD);
        }

        /**
         * When action happens.
         */
        public Timing occurrenceTiming() {
            return getObject(Timing.class, PROPERTY_OCCURRENCE_TIMING);
        }

        /**
         * Who or what initiated the action and has responsibility for its
         * activation.
         */
        public java.util.List<Reference> requester() {
            return getList(Reference.class, PROPERTY_REQUESTER);
        }

        /**
         * Id [identifier??] of the clause or question text related to the
         * requester of this action in the referenced form or
         * QuestionnaireResponse.
         */
        public java.util.List<String> requesterLinkId() {
            return getList(String.class, PROPERTY_REQUESTER_LINK_ID);
        }

        /**
         * The type of individual that is desired or required to perform or not
         * perform the action.
         */
        public java.util.List<CodeableConcept> performerType() {
            return getList(CodeableConcept.class, PROPERTY_PERFORMER_TYPE);
        }

        /**
         * The type of role or competency of an individual desired or required to
         * perform or not perform the action.
         */
        public CodeableConcept performerRole() {
            return getObject(CodeableConcept.class, PROPERTY_PERFORMER_ROLE);
        }

        /**
         * Indicates who or what is being asked to perform (or not perform) the
         * ction.
         */
        public Reference performer() {
            return getObject(Reference.class, PROPERTY_PERFORMER);
        }

        /**
         * Id [identifier??] of the clause or question text related to the reason
         * type or reference of this  action in the referenced form or
         * QuestionnaireResponse.
         */
        public java.util.List<String> performerLinkId() {
            return getList(String.class, PROPERTY_PERFORMER_LINK_ID);
        }

        /**
         * Rationale for the action to be performed or not performed. Describes
         * why the action is permitted or prohibited.
         */
        public java.util.List<CodeableConcept> reasonCode() {
            return getList(CodeableConcept.class, PROPERTY_REASON_CODE);
        }

        /**
         * Indicates another resource whose existence justifies permitting or not
         * permitting this action.
         */
        public java.util.List<Reference> reasonReference() {
            return getList(Reference.class, PROPERTY_REASON_REFERENCE);
        }

        /**
         * Describes why the action is to be performed or not performed in
         * textual form.
         */
        public java.util.List<String> reason() {
            return getList(String.class, PROPERTY_REASON);
        }

        /**
         * Id [identifier??] of the clause or question text related to the reason
         * type or reference of this  action in the referenced form or
         * QuestionnaireResponse.
         */
        public java.util.List<String> reasonLinkId() {
            return getList(String.class, PROPERTY_REASON_LINK_ID);
        }

        /**
         * Comments made about the term action made by the requester, performer,
         * subject or other participants.
         */
        public java.util.List<Annotation> note() {
            return getList(Annotation.class, PROPERTY_NOTE);
        }

        /**
         * Security labels that protects the action.
         */
        public java.util.List<Integer> securityLabelNumber() {
            return getList(Integer.class, PROPERTY_SECURITY_LABEL_NUMBER);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder doNotPerform(final Boolean doNotPerform) {
                b.add(PROPERTY_DO_NOT_PERFORM, doNotPerform);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder subject(final java.util.List<ContractSubject> subject) {
                b.add(PROPERTY_SUBJECT, FhirObject.toArray(subject));
                return this;
            }

            public Builder intent(final CodeableConcept intent) {
                b.add(PROPERTY_INTENT, intent);
                return this;
            }

            public Builder linkId(final java.util.List<String> linkId) {
                b.add(PROPERTY_LINK_ID, FhirObject.toStringArray(linkId));
                return this;
            }

            public Builder status(final CodeableConcept status) {
                b.add(PROPERTY_STATUS, status);
                return this;
            }

            public Builder context(final Reference context) {
                b.add(PROPERTY_CONTEXT, context);
                return this;
            }

            public Builder contextLinkId(final java.util.List<String> contextLinkId) {
                b.add(PROPERTY_CONTEXT_LINK_ID, FhirObject.toStringArray(contextLinkId));
                return this;
            }

            public Builder occurrenceDateTime(final String occurrenceDateTime) {
                b.add(PROPERTY_OCCURRENCE_DATE_TIME, occurrenceDateTime);
                return this;
            }

            public Builder occurrencePeriod(final Period occurrencePeriod) {
                b.add(PROPERTY_OCCURRENCE_PERIOD, occurrencePeriod);
                return this;
            }

            public Builder occurrenceTiming(final Timing occurrenceTiming) {
                b.add(PROPERTY_OCCURRENCE_TIMING, occurrenceTiming);
                return this;
            }

            public Builder requester(final java.util.List<Reference> requester) {
                b.add(PROPERTY_REQUESTER, FhirObject.toArray(requester));
                return this;
            }

            public Builder requesterLinkId(final java.util.List<String> requesterLinkId) {
                b.add(PROPERTY_REQUESTER_LINK_ID, FhirObject.toStringArray(requesterLinkId));
                return this;
            }

            public Builder performerType(final java.util.List<CodeableConcept> performerType) {
                b.add(PROPERTY_PERFORMER_TYPE, FhirObject.toArray(performerType));
                return this;
            }

            public Builder performerRole(final CodeableConcept performerRole) {
                b.add(PROPERTY_PERFORMER_ROLE, performerRole);
                return this;
            }

            public Builder performer(final Reference performer) {
                b.add(PROPERTY_PERFORMER, performer);
                return this;
            }

            public Builder performerLinkId(final java.util.List<String> performerLinkId) {
                b.add(PROPERTY_PERFORMER_LINK_ID, FhirObject.toStringArray(performerLinkId));
                return this;
            }

            public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
                b.add(PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
                return this;
            }

            public Builder reasonReference(final java.util.List<Reference> reasonReference) {
                b.add(PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
                return this;
            }

            public Builder reason(final java.util.List<String> reason) {
                b.add(PROPERTY_REASON, FhirObject.toStringArray(reason));
                return this;
            }

            public Builder reasonLinkId(final java.util.List<String> reasonLinkId) {
                b.add(PROPERTY_REASON_LINK_ID, FhirObject.toStringArray(reasonLinkId));
                return this;
            }

            public Builder note(final java.util.List<Annotation> note) {
                b.add(PROPERTY_NOTE, FhirObject.toArray(note));
                return this;
            }

            public Builder securityLabelNumber(final java.util.List<Integer> securityLabelNumber) {
                b.add(PROPERTY_SECURITY_LABEL_NUMBER, FhirObject.toIntegerArray(securityLabelNumber));
                return this;
            }

            public ContractAction build() {
                return new ContractAction(b.build());
            }
        }
    }

    public static class ContractAnswer extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractAnswer";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_VALUE_BOOLEAN = "valueBoolean";
        public static final String PROPERTY_VALUE_DECIMAL = "valueDecimal";
        public static final String PROPERTY_VALUE_INTEGER = "valueInteger";
        public static final String PROPERTY_VALUE_DATE = "valueDate";
        public static final String PROPERTY_VALUE_DATE_TIME = "valueDateTime";
        public static final String PROPERTY_VALUE_TIME = "valueTime";
        public static final String PROPERTY_VALUE_STRING = "valueString";
        public static final String PROPERTY_VALUE_URI = "valueUri";
        public static final String PROPERTY_VALUE_ATTACHMENT = "valueAttachment";
        public static final String PROPERTY_VALUE_CODING = "valueCoding";
        public static final String PROPERTY_VALUE_QUANTITY = "valueQuantity";
        public static final String PROPERTY_VALUE_REFERENCE = "valueReference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractAnswer(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(PROPERTY_VALUE_BOOLEAN);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public Integer valueDecimal() {
            return data.getInt(PROPERTY_VALUE_DECIMAL);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public Integer valueInteger() {
            return data.getInt(PROPERTY_VALUE_INTEGER);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public String valueDate() {
            return getString(PROPERTY_VALUE_DATE);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public String valueDateTime() {
            return getString(PROPERTY_VALUE_DATE_TIME);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public String valueTime() {
            return getString(PROPERTY_VALUE_TIME);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public String valueString() {
            return getString(PROPERTY_VALUE_STRING);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public String valueUri() {
            return getString(PROPERTY_VALUE_URI);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, PROPERTY_VALUE_ATTACHMENT);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, PROPERTY_VALUE_CODING);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, PROPERTY_VALUE_QUANTITY);
        }

        /**
         * Response to an offer clause or question text,  which enables selection
         * of values to be agreed to, e.g., the period of participation, the date
         * of occupancy of a rental, warrently duration, or whether biospecimen
         * may be used for further research.
         */
        public Reference valueReference() {
            return getObject(Reference.class, PROPERTY_VALUE_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(PROPERTY_VALUE_DECIMAL, valueDecimal);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(PROPERTY_VALUE_INTEGER, valueInteger);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(PROPERTY_VALUE_DATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(PROPERTY_VALUE_DATE_TIME, valueDateTime);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(PROPERTY_VALUE_TIME, valueTime);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(PROPERTY_VALUE_URI, valueUri);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(PROPERTY_VALUE_ATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(PROPERTY_VALUE_CODING, valueCoding);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(PROPERTY_VALUE_REFERENCE, valueReference);
                return this;
            }

            public ContractAnswer build() {
                return new ContractAnswer(b.build());
            }
        }
    }

    public static class ContractAsset extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractAsset";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_SCOPE = "scope";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_TYPE_REFERENCE = "typeReference";
        public static final String PROPERTY_SUBTYPE = "subtype";
        public static final String PROPERTY_RELATIONSHIP = "relationship";
        public static final String PROPERTY_CONTEXT = "context";
        public static final String PROPERTY_CONDITION = "condition";
        public static final String PROPERTY_PERIOD_TYPE = "periodType";
        public static final String PROPERTY_PERIOD = "period";
        public static final String PROPERTY_USE_PERIOD = "usePeriod";
        public static final String PROPERTY_TEXT = "text";
        public static final String PROPERTY_LINK_ID = "linkId";
        public static final String PROPERTY_ANSWER = "answer";
        public static final String PROPERTY_SECURITY_LABEL_NUMBER = "securityLabelNumber";
        public static final String PROPERTY_VALUED_ITEM = "valuedItem";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractAsset(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Differentiates the kind of the asset .
         */
        public CodeableConcept scope() {
            return getObject(CodeableConcept.class, PROPERTY_SCOPE);
        }

        /**
         * Target entity type about which the term may be concerned.
         */
        public java.util.List<CodeableConcept> type() {
            return getList(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Associated entities.
         */
        public java.util.List<Reference> typeReference() {
            return getList(Reference.class, PROPERTY_TYPE_REFERENCE);
        }

        /**
         * May be a subtype or part of an offered asset.
         */
        public java.util.List<CodeableConcept> subtype() {
            return getList(CodeableConcept.class, PROPERTY_SUBTYPE);
        }

        /**
         * Specifies the applicability of the term to an asset resource instance,
         * and instances it refers to orinstances that refer to it, and/or are
         * owned by the offeree.
         */
        public Coding relationship() {
            return getObject(Coding.class, PROPERTY_RELATIONSHIP);
        }

        /**
         * Circumstance of the asset.
         */
        public java.util.List<ContractContext> context() {
            return getList(ContractContext.class, PROPERTY_CONTEXT);
        }

        /**
         * Description of the quality and completeness of the asset that imay be
         * a factor in its valuation.
         */
        public String condition() {
            return getString(PROPERTY_CONDITION);
        }

        /**
         * Type of Asset availability for use or ownership.
         */
        public java.util.List<CodeableConcept> periodType() {
            return getList(CodeableConcept.class, PROPERTY_PERIOD_TYPE);
        }

        /**
         * Asset relevant contractual time period.
         */
        public java.util.List<Period> period() {
            return getList(Period.class, PROPERTY_PERIOD);
        }

        /**
         * Time period of asset use.
         */
        public java.util.List<Period> usePeriod() {
            return getList(Period.class, PROPERTY_USE_PERIOD);
        }

        /**
         * Clause or question text (Prose Object) concerning the asset in a
         * linked form, such as a QuestionnaireResponse used in the formation of
         * the contract.
         */
        public String text() {
            return getString(PROPERTY_TEXT);
        }

        /**
         * Id [identifier??] of the clause or question text about the asset in
         * the referenced form or QuestionnaireResponse.
         */
        public java.util.List<String> linkId() {
            return getList(String.class, PROPERTY_LINK_ID);
        }

        /**
         * Response to assets.
         */
        public java.util.List<ContractAnswer> answer() {
            return getList(ContractAnswer.class, PROPERTY_ANSWER);
        }

        /**
         * Security labels that protects the asset.
         */
        public java.util.List<Integer> securityLabelNumber() {
            return getList(Integer.class, PROPERTY_SECURITY_LABEL_NUMBER);
        }

        /**
         * Contract Valued Item List.
         */
        public java.util.List<ContractValuedItem> valuedItem() {
            return getList(ContractValuedItem.class, PROPERTY_VALUED_ITEM);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder scope(final CodeableConcept scope) {
                b.add(PROPERTY_SCOPE, scope);
                return this;
            }

            public Builder type(final java.util.List<CodeableConcept> type) {
                b.add(PROPERTY_TYPE, FhirObject.toArray(type));
                return this;
            }

            public Builder typeReference(final java.util.List<Reference> typeReference) {
                b.add(PROPERTY_TYPE_REFERENCE, FhirObject.toArray(typeReference));
                return this;
            }

            public Builder subtype(final java.util.List<CodeableConcept> subtype) {
                b.add(PROPERTY_SUBTYPE, FhirObject.toArray(subtype));
                return this;
            }

            public Builder relationship(final Coding relationship) {
                b.add(PROPERTY_RELATIONSHIP, relationship);
                return this;
            }

            public Builder context(final java.util.List<ContractContext> context) {
                b.add(PROPERTY_CONTEXT, FhirObject.toArray(context));
                return this;
            }

            public Builder condition(final String condition) {
                b.add(PROPERTY_CONDITION, condition);
                return this;
            }

            public Builder periodType(final java.util.List<CodeableConcept> periodType) {
                b.add(PROPERTY_PERIOD_TYPE, FhirObject.toArray(periodType));
                return this;
            }

            public Builder period(final java.util.List<Period> period) {
                b.add(PROPERTY_PERIOD, FhirObject.toArray(period));
                return this;
            }

            public Builder usePeriod(final java.util.List<Period> usePeriod) {
                b.add(PROPERTY_USE_PERIOD, FhirObject.toArray(usePeriod));
                return this;
            }

            public Builder text(final String text) {
                b.add(PROPERTY_TEXT, text);
                return this;
            }

            public Builder linkId(final java.util.List<String> linkId) {
                b.add(PROPERTY_LINK_ID, FhirObject.toStringArray(linkId));
                return this;
            }

            public Builder answer(final java.util.List<ContractAnswer> answer) {
                b.add(PROPERTY_ANSWER, FhirObject.toArray(answer));
                return this;
            }

            public Builder securityLabelNumber(final java.util.List<Integer> securityLabelNumber) {
                b.add(PROPERTY_SECURITY_LABEL_NUMBER, FhirObject.toIntegerArray(securityLabelNumber));
                return this;
            }

            public Builder valuedItem(final java.util.List<ContractValuedItem> valuedItem) {
                b.add(PROPERTY_VALUED_ITEM, FhirObject.toArray(valuedItem));
                return this;
            }

            public ContractAsset build() {
                return new ContractAsset(b.build());
            }
        }
    }

    public static class ContractContentDefinition extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractContentDefinition";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_SUB_TYPE = "subType";
        public static final String PROPERTY_PUBLISHER = "publisher";
        public static final String PROPERTY_PUBLICATION_DATE = "publicationDate";
        public static final String PROPERTY_PUBLICATION_STATUS = "publicationStatus";
        public static final String PROPERTY_COPYRIGHT = "copyright";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractContentDefinition(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Precusory content structure and use, i.e., a boilerplate, template,
         * application for a contract such as an insurance policy or benefits
         * under a program, e.g., workers compensation.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Detailed Precusory content type.
         */
        public CodeableConcept subType() {
            return getObject(CodeableConcept.class, PROPERTY_SUB_TYPE);
        }

        /**
         * The  individual or organization that published the Contract precursor
         * content.
         */
        public Reference publisher() {
            return getObject(Reference.class, PROPERTY_PUBLISHER);
        }

        /**
         * The date (and optionally time) when the contract was published. The
         * date must change when the business version changes and it must change
         * if the status code changes. In addition, it should change when the
         * substantive content of the contract changes.
         */
        public java.time.Instant publicationDate() {
            return java.time.Instant.parse(data.getString(PROPERTY_PUBLICATION_DATE));
        }

        /**
         * amended | appended | cancelled | disputed | entered-in-error |
         * executable | executed | negotiable | offered | policy | rejected |
         * renewed | revoked | resolved | terminated.
         */
        public String publicationStatus() {
            return getString(PROPERTY_PUBLICATION_STATUS);
        }

        /**
         * A copyright statement relating to Contract precursor content.
         * Copyright statements are generally legal restrictions on the use and
         * publishing of the Contract precursor content.
         */
        public String copyright() {
            return getString(PROPERTY_COPYRIGHT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder subType(final CodeableConcept subType) {
                b.add(PROPERTY_SUB_TYPE, subType);
                return this;
            }

            public Builder publisher(final Reference publisher) {
                b.add(PROPERTY_PUBLISHER, publisher);
                return this;
            }

            public Builder publicationDate(final java.time.Instant publicationDate) {
                b.add(PROPERTY_PUBLICATION_DATE, publicationDate.toString());
                return this;
            }

            public Builder publicationStatus(final String publicationStatus) {
                b.add(PROPERTY_PUBLICATION_STATUS, publicationStatus);
                return this;
            }

            public Builder copyright(final String copyright) {
                b.add(PROPERTY_COPYRIGHT, copyright);
                return this;
            }

            public ContractContentDefinition build() {
                return new ContractContentDefinition(b.build());
            }
        }
    }

    public static class ContractContext extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractContext";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_REFERENCE = "reference";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_TEXT = "text";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractContext(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Asset context reference may include the creator, custodian, or owning
         * Person or Organization (e.g., bank, repository),  location held, e.g.,
         * building,  jurisdiction.
         */
        public Reference reference() {
            return getObject(Reference.class, PROPERTY_REFERENCE);
        }

        /**
         * Coded representation of the context generally or of the Referenced
         * entity, such as the asset holder type or location.
         */
        public java.util.List<CodeableConcept> code() {
            return getList(CodeableConcept.class, PROPERTY_CODE);
        }

        /**
         * Context description.
         */
        public String text() {
            return getString(PROPERTY_TEXT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder reference(final Reference reference) {
                b.add(PROPERTY_REFERENCE, reference);
                return this;
            }

            public Builder code(final java.util.List<CodeableConcept> code) {
                b.add(PROPERTY_CODE, FhirObject.toArray(code));
                return this;
            }

            public Builder text(final String text) {
                b.add(PROPERTY_TEXT, text);
                return this;
            }

            public ContractContext build() {
                return new ContractContext(b.build());
            }
        }
    }

    public static class ContractFriendly extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractFriendly";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CONTENT_ATTACHMENT = "contentAttachment";
        public static final String PROPERTY_CONTENT_REFERENCE = "contentReference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractFriendly(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Human readable rendering of this Contract in a format and
         * representation intended to enhance comprehension and ensure
         * understandability.
         */
        public Attachment contentAttachment() {
            return getObject(Attachment.class, PROPERTY_CONTENT_ATTACHMENT);
        }

        /**
         * Human readable rendering of this Contract in a format and
         * representation intended to enhance comprehension and ensure
         * understandability.
         */
        public Reference contentReference() {
            return getObject(Reference.class, PROPERTY_CONTENT_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder contentAttachment(final Attachment contentAttachment) {
                b.add(PROPERTY_CONTENT_ATTACHMENT, contentAttachment);
                return this;
            }

            public Builder contentReference(final Reference contentReference) {
                b.add(PROPERTY_CONTENT_REFERENCE, contentReference);
                return this;
            }

            public ContractFriendly build() {
                return new ContractFriendly(b.build());
            }
        }
    }

    public static class ContractLegal extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractLegal";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CONTENT_ATTACHMENT = "contentAttachment";
        public static final String PROPERTY_CONTENT_REFERENCE = "contentReference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractLegal(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Contract legal text in human renderable form.
         */
        public Attachment contentAttachment() {
            return getObject(Attachment.class, PROPERTY_CONTENT_ATTACHMENT);
        }

        /**
         * Contract legal text in human renderable form.
         */
        public Reference contentReference() {
            return getObject(Reference.class, PROPERTY_CONTENT_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder contentAttachment(final Attachment contentAttachment) {
                b.add(PROPERTY_CONTENT_ATTACHMENT, contentAttachment);
                return this;
            }

            public Builder contentReference(final Reference contentReference) {
                b.add(PROPERTY_CONTENT_REFERENCE, contentReference);
                return this;
            }

            public ContractLegal build() {
                return new ContractLegal(b.build());
            }
        }
    }

    public static class ContractOffer extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractOffer";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_IDENTIFIER = "identifier";
        public static final String PROPERTY_PARTY = "party";
        public static final String PROPERTY_TOPIC = "topic";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_DECISION = "decision";
        public static final String PROPERTY_DECISION_MODE = "decisionMode";
        public static final String PROPERTY_ANSWER = "answer";
        public static final String PROPERTY_TEXT = "text";
        public static final String PROPERTY_LINK_ID = "linkId";
        public static final String PROPERTY_SECURITY_LABEL_NUMBER = "securityLabelNumber";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractOffer(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Unique identifier for this particular Contract Provision.
         */
        public java.util.List<Identifier> identifier() {
            return getList(Identifier.class, PROPERTY_IDENTIFIER);
        }

        /**
         * Offer Recipient.
         */
        public java.util.List<ContractParty> party() {
            return getList(ContractParty.class, PROPERTY_PARTY);
        }

        /**
         * The owner of an asset has the residual control rights over the asset:
         * the right to decide all usages of the asset in any way not
         * inconsistent with a prior contract, custom, or law (Hart, 1995, p.
         * 30).
         */
        public Reference topic() {
            return getObject(Reference.class, PROPERTY_TOPIC);
        }

        /**
         * Type of Contract Provision such as specific requirements, purposes for
         * actions, obligations, prohibitions, e.g. life time maximum benefit.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Type of choice made by accepting party with respect to an offer made
         * by an offeror/ grantee.
         */
        public CodeableConcept decision() {
            return getObject(CodeableConcept.class, PROPERTY_DECISION);
        }

        /**
         * How the decision about a Contract was conveyed.
         */
        public java.util.List<CodeableConcept> decisionMode() {
            return getList(CodeableConcept.class, PROPERTY_DECISION_MODE);
        }

        /**
         * Response to offer text.
         */
        public java.util.List<ContractAnswer> answer() {
            return getList(ContractAnswer.class, PROPERTY_ANSWER);
        }

        /**
         * Human readable form of this Contract Offer.
         */
        public String text() {
            return getString(PROPERTY_TEXT);
        }

        /**
         * The id of the clause or question text of the offer in the referenced
         * questionnaire/response.
         */
        public java.util.List<String> linkId() {
            return getList(String.class, PROPERTY_LINK_ID);
        }

        /**
         * Security labels that protects the offer.
         */
        public java.util.List<Integer> securityLabelNumber() {
            return getList(Integer.class, PROPERTY_SECURITY_LABEL_NUMBER);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final java.util.List<Identifier> identifier) {
                b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
                return this;
            }

            public Builder party(final java.util.List<ContractParty> party) {
                b.add(PROPERTY_PARTY, FhirObject.toArray(party));
                return this;
            }

            public Builder topic(final Reference topic) {
                b.add(PROPERTY_TOPIC, topic);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder decision(final CodeableConcept decision) {
                b.add(PROPERTY_DECISION, decision);
                return this;
            }

            public Builder decisionMode(final java.util.List<CodeableConcept> decisionMode) {
                b.add(PROPERTY_DECISION_MODE, FhirObject.toArray(decisionMode));
                return this;
            }

            public Builder answer(final java.util.List<ContractAnswer> answer) {
                b.add(PROPERTY_ANSWER, FhirObject.toArray(answer));
                return this;
            }

            public Builder text(final String text) {
                b.add(PROPERTY_TEXT, text);
                return this;
            }

            public Builder linkId(final java.util.List<String> linkId) {
                b.add(PROPERTY_LINK_ID, FhirObject.toStringArray(linkId));
                return this;
            }

            public Builder securityLabelNumber(final java.util.List<Integer> securityLabelNumber) {
                b.add(PROPERTY_SECURITY_LABEL_NUMBER, FhirObject.toIntegerArray(securityLabelNumber));
                return this;
            }

            public ContractOffer build() {
                return new ContractOffer(b.build());
            }
        }
    }

    public static class ContractParty extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractParty";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_REFERENCE = "reference";
        public static final String PROPERTY_ROLE = "role";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractParty(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Participant in the offer.
         */
        public java.util.List<Reference> reference() {
            return getList(Reference.class, PROPERTY_REFERENCE);
        }

        /**
         * How the party participates in the offer.
         */
        public CodeableConcept role() {
            return getObject(CodeableConcept.class, PROPERTY_ROLE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder reference(final java.util.List<Reference> reference) {
                b.add(PROPERTY_REFERENCE, FhirObject.toArray(reference));
                return this;
            }

            public Builder role(final CodeableConcept role) {
                b.add(PROPERTY_ROLE, role);
                return this;
            }

            public ContractParty build() {
                return new ContractParty(b.build());
            }
        }
    }

    public static class ContractRule extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractRule";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CONTENT_ATTACHMENT = "contentAttachment";
        public static final String PROPERTY_CONTENT_REFERENCE = "contentReference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractRule(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Computable Contract conveyed using a policy rule language (e.g. XACML,
         * DKAL, SecPal).
         */
        public Attachment contentAttachment() {
            return getObject(Attachment.class, PROPERTY_CONTENT_ATTACHMENT);
        }

        /**
         * Computable Contract conveyed using a policy rule language (e.g. XACML,
         * DKAL, SecPal).
         */
        public Reference contentReference() {
            return getObject(Reference.class, PROPERTY_CONTENT_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder contentAttachment(final Attachment contentAttachment) {
                b.add(PROPERTY_CONTENT_ATTACHMENT, contentAttachment);
                return this;
            }

            public Builder contentReference(final Reference contentReference) {
                b.add(PROPERTY_CONTENT_REFERENCE, contentReference);
                return this;
            }

            public ContractRule build() {
                return new ContractRule(b.build());
            }
        }
    }

    public static class ContractSecurityLabel extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractSecurityLabel";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_NUMBER = "number";
        public static final String PROPERTY_CLASSIFICATION = "classification";
        public static final String PROPERTY_CATEGORY = "category";
        public static final String PROPERTY_CONTROL = "control";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractSecurityLabel(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Number used to link this term or term element to the applicable
         * Security Label.
         */
        public java.util.List<Integer> number() {
            return getList(Integer.class, PROPERTY_NUMBER);
        }

        /**
         * Security label privacy tag that species the level of confidentiality
         * protection required for this term and/or term elements.
         */
        public Coding classification() {
            return getObject(Coding.class, PROPERTY_CLASSIFICATION);
        }

        /**
         * Security label privacy tag that species the applicable privacy and
         * security policies governing this term and/or term elements.
         */
        public java.util.List<Coding> category() {
            return getList(Coding.class, PROPERTY_CATEGORY);
        }

        /**
         * Security label privacy tag that species the manner in which term
         * and/or term elements are to be protected.
         */
        public java.util.List<Coding> control() {
            return getList(Coding.class, PROPERTY_CONTROL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder number(final java.util.List<Integer> number) {
                b.add(PROPERTY_NUMBER, FhirObject.toIntegerArray(number));
                return this;
            }

            public Builder classification(final Coding classification) {
                b.add(PROPERTY_CLASSIFICATION, classification);
                return this;
            }

            public Builder category(final java.util.List<Coding> category) {
                b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
                return this;
            }

            public Builder control(final java.util.List<Coding> control) {
                b.add(PROPERTY_CONTROL, FhirObject.toArray(control));
                return this;
            }

            public ContractSecurityLabel build() {
                return new ContractSecurityLabel(b.build());
            }
        }
    }

    public static class ContractSigner extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractSigner";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_PARTY = "party";
        public static final String PROPERTY_SIGNATURE = "signature";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractSigner(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Role of this Contract signer, e.g. notary, grantee.
         */
        public Coding type() {
            return getObject(Coding.class, PROPERTY_TYPE);
        }

        /**
         * Party which is a signator to this Contract.
         */
        public Reference party() {
            return getObject(Reference.class, PROPERTY_PARTY);
        }

        /**
         * Legally binding Contract DSIG signature contents in Base64.
         */
        public java.util.List<Signature> signature() {
            return getList(Signature.class, PROPERTY_SIGNATURE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final Coding type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder party(final Reference party) {
                b.add(PROPERTY_PARTY, party);
                return this;
            }

            public Builder signature(final java.util.List<Signature> signature) {
                b.add(PROPERTY_SIGNATURE, FhirObject.toArray(signature));
                return this;
            }

            public ContractSigner build() {
                return new ContractSigner(b.build());
            }
        }
    }

    public static class ContractSubject extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractSubject";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_REFERENCE = "reference";
        public static final String PROPERTY_ROLE = "role";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractSubject(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The entity the action is performed or not performed on or for.
         */
        public java.util.List<Reference> reference() {
            return getList(Reference.class, PROPERTY_REFERENCE);
        }

        /**
         * Role type of agent assigned roles in this Contract.
         */
        public CodeableConcept role() {
            return getObject(CodeableConcept.class, PROPERTY_ROLE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder reference(final java.util.List<Reference> reference) {
                b.add(PROPERTY_REFERENCE, FhirObject.toArray(reference));
                return this;
            }

            public Builder role(final CodeableConcept role) {
                b.add(PROPERTY_ROLE, role);
                return this;
            }

            public ContractSubject build() {
                return new ContractSubject(b.build());
            }
        }
    }

    public static class ContractTerm extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractTerm";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_IDENTIFIER = "identifier";
        public static final String PROPERTY_ISSUED = "issued";
        public static final String PROPERTY_APPLIES = "applies";
        public static final String PROPERTY_TOPIC_CODEABLE_CONCEPT = "topicCodeableConcept";
        public static final String PROPERTY_TOPIC_REFERENCE = "topicReference";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_SUB_TYPE = "subType";
        public static final String PROPERTY_TEXT = "text";
        public static final String PROPERTY_SECURITY_LABEL = "securityLabel";
        public static final String PROPERTY_OFFER = "offer";
        public static final String PROPERTY_ASSET = "asset";
        public static final String PROPERTY_ACTION = "action";
        public static final String PROPERTY_GROUP = "group";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractTerm(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Unique identifier for this particular Contract Provision.
         */
        public Identifier identifier() {
            return getObject(Identifier.class, PROPERTY_IDENTIFIER);
        }

        /**
         * When this Contract Provision was issued.
         */
        public java.time.Instant issued() {
            return java.time.Instant.parse(data.getString(PROPERTY_ISSUED));
        }

        /**
         * Relevant time or time-period when this Contract Provision is
         * applicable.
         */
        public Period applies() {
            return getObject(Period.class, PROPERTY_APPLIES);
        }

        /**
         * The entity that the term applies to.
         */
        public CodeableConcept topicCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_TOPIC_CODEABLE_CONCEPT);
        }

        /**
         * The entity that the term applies to.
         */
        public Reference topicReference() {
            return getObject(Reference.class, PROPERTY_TOPIC_REFERENCE);
        }

        /**
         * A legal clause or condition contained within a contract that requires
         * one or both parties to perform a particular requirement by some
         * specified time or prevents one or both parties from performing a
         * particular requirement by some specified time.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * A specialized legal clause or condition based on overarching contract
         * type.
         */
        public CodeableConcept subType() {
            return getObject(CodeableConcept.class, PROPERTY_SUB_TYPE);
        }

        /**
         * Statement of a provision in a policy or a contract.
         */
        public String text() {
            return getString(PROPERTY_TEXT);
        }

        /**
         * Security labels that protect the handling of information about the
         * term and its elements, which may be specifically identified..
         */
        public java.util.List<ContractSecurityLabel> securityLabel() {
            return getList(ContractSecurityLabel.class, PROPERTY_SECURITY_LABEL);
        }

        /**
         * The matter of concern in the context of this provision of the
         * agrement.
         */
        public ContractOffer offer() {
            return getObject(ContractOffer.class, PROPERTY_OFFER);
        }

        /**
         * Contract Term Asset List.
         */
        public java.util.List<ContractAsset> asset() {
            return getList(ContractAsset.class, PROPERTY_ASSET);
        }

        /**
         * An actor taking a role in an activity for which it can be assigned
         * some degree of responsibility for the activity taking place.
         */
        public java.util.List<ContractAction> action() {
            return getList(ContractAction.class, PROPERTY_ACTION);
        }

        /**
         * Nested group of Contract Provisions.
         */
        public java.util.List<ContractTerm> group() {
            return getList(ContractTerm.class, PROPERTY_GROUP);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final Identifier identifier) {
                b.add(PROPERTY_IDENTIFIER, identifier);
                return this;
            }

            public Builder issued(final java.time.Instant issued) {
                b.add(PROPERTY_ISSUED, issued.toString());
                return this;
            }

            public Builder applies(final Period applies) {
                b.add(PROPERTY_APPLIES, applies);
                return this;
            }

            public Builder topicCodeableConcept(final CodeableConcept topicCodeableConcept) {
                b.add(PROPERTY_TOPIC_CODEABLE_CONCEPT, topicCodeableConcept);
                return this;
            }

            public Builder topicReference(final Reference topicReference) {
                b.add(PROPERTY_TOPIC_REFERENCE, topicReference);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder subType(final CodeableConcept subType) {
                b.add(PROPERTY_SUB_TYPE, subType);
                return this;
            }

            public Builder text(final String text) {
                b.add(PROPERTY_TEXT, text);
                return this;
            }

            public Builder securityLabel(final java.util.List<ContractSecurityLabel> securityLabel) {
                b.add(PROPERTY_SECURITY_LABEL, FhirObject.toArray(securityLabel));
                return this;
            }

            public Builder offer(final ContractOffer offer) {
                b.add(PROPERTY_OFFER, offer);
                return this;
            }

            public Builder asset(final java.util.List<ContractAsset> asset) {
                b.add(PROPERTY_ASSET, FhirObject.toArray(asset));
                return this;
            }

            public Builder action(final java.util.List<ContractAction> action) {
                b.add(PROPERTY_ACTION, FhirObject.toArray(action));
                return this;
            }

            public Builder group(final java.util.List<ContractTerm> group) {
                b.add(PROPERTY_GROUP, FhirObject.toArray(group));
                return this;
            }

            public ContractTerm build() {
                return new ContractTerm(b.build());
            }
        }
    }

    public static class ContractValuedItem extends FhirObject {
        public static final String RESOURCE_TYPE = "ContractValuedItem";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_ENTITY_CODEABLE_CONCEPT = "entityCodeableConcept";
        public static final String PROPERTY_ENTITY_REFERENCE = "entityReference";
        public static final String PROPERTY_IDENTIFIER = "identifier";
        public static final String PROPERTY_EFFECTIVE_TIME = "effectiveTime";
        public static final String PROPERTY_QUANTITY = "quantity";
        public static final String PROPERTY_UNIT_PRICE = "unitPrice";
        public static final String PROPERTY_FACTOR = "factor";
        public static final String PROPERTY_POINTS = "points";
        public static final String PROPERTY_NET = "net";
        public static final String PROPERTY_PAYMENT = "payment";
        public static final String PROPERTY_PAYMENT_DATE = "paymentDate";
        public static final String PROPERTY_RESPONSIBLE = "responsible";
        public static final String PROPERTY_RECIPIENT = "recipient";
        public static final String PROPERTY_LINK_ID = "linkId";
        public static final String PROPERTY_SECURITY_LABEL_NUMBER = "securityLabelNumber";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public ContractValuedItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Specific type of Contract Valued Item that may be priced.
         */
        public CodeableConcept entityCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_ENTITY_CODEABLE_CONCEPT);
        }

        /**
         * Specific type of Contract Valued Item that may be priced.
         */
        public Reference entityReference() {
            return getObject(Reference.class, PROPERTY_ENTITY_REFERENCE);
        }

        /**
         * Identifies a Contract Valued Item instance.
         */
        public Identifier identifier() {
            return getObject(Identifier.class, PROPERTY_IDENTIFIER);
        }

        /**
         * Indicates the time during which this Contract ValuedItem information
         * is effective.
         */
        public java.time.Instant effectiveTime() {
            return java.time.Instant.parse(data.getString(PROPERTY_EFFECTIVE_TIME));
        }

        /**
         * Specifies the units by which the Contract Valued Item is measured or
         * counted, and quantifies the countable or measurable Contract Valued
         * Item instances.
         */
        public Quantity quantity() {
            return getObject(Quantity.class, PROPERTY_QUANTITY);
        }

        /**
         * A Contract Valued Item unit valuation measure.
         */
        public Money unitPrice() {
            return getObject(Money.class, PROPERTY_UNIT_PRICE);
        }

        /**
         * A real number that represents a multiplier used in determining the
         * overall value of the Contract Valued Item delivered. The concept of a
         * Factor allows for a discount or surcharge multiplier to be applied to
         * a monetary amount.
         */
        public Double factor() {
            return data.getJsonNumber(PROPERTY_FACTOR).doubleValue();
        }

        /**
         * An amount that expresses the weighting (based on difficulty, cost
         * and/or resource intensiveness) associated with the Contract Valued
         * Item delivered. The concept of Points allows for assignment of point
         * values for a Contract Valued Item, such that a monetary amount can be
         * assigned to each point.
         */
        public Double points() {
            return data.getJsonNumber(PROPERTY_POINTS).doubleValue();
        }

        /**
         * Expresses the product of the Contract Valued Item unitQuantity and the
         * unitPriceAmt. For example, the formula: unit Quantity * unit Price
         * (Cost per Point) * factor Number  * points = net Amount. Quantity,
         * factor and points are assumed to be 1 if not supplied.
         */
        public Money net() {
            return getObject(Money.class, PROPERTY_NET);
        }

        /**
         * Terms of valuation.
         */
        public String payment() {
            return getString(PROPERTY_PAYMENT);
        }

        /**
         * When payment is due.
         */
        public java.time.Instant paymentDate() {
            return java.time.Instant.parse(data.getString(PROPERTY_PAYMENT_DATE));
        }

        /**
         * Who will make payment.
         */
        public Reference responsible() {
            return getObject(Reference.class, PROPERTY_RESPONSIBLE);
        }

        /**
         * Who will receive payment.
         */
        public Reference recipient() {
            return getObject(Reference.class, PROPERTY_RECIPIENT);
        }

        /**
         * Id  of the clause or question text related to the context of this
         * valuedItem in the referenced form or QuestionnaireResponse.
         */
        public java.util.List<String> linkId() {
            return getList(String.class, PROPERTY_LINK_ID);
        }

        /**
         * A set of security labels that define which terms are controlled by
         * this condition.
         */
        public java.util.List<Integer> securityLabelNumber() {
            return getList(Integer.class, PROPERTY_SECURITY_LABEL_NUMBER);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder entityCodeableConcept(final CodeableConcept entityCodeableConcept) {
                b.add(PROPERTY_ENTITY_CODEABLE_CONCEPT, entityCodeableConcept);
                return this;
            }

            public Builder entityReference(final Reference entityReference) {
                b.add(PROPERTY_ENTITY_REFERENCE, entityReference);
                return this;
            }

            public Builder identifier(final Identifier identifier) {
                b.add(PROPERTY_IDENTIFIER, identifier);
                return this;
            }

            public Builder effectiveTime(final java.time.Instant effectiveTime) {
                b.add(PROPERTY_EFFECTIVE_TIME, effectiveTime.toString());
                return this;
            }

            public Builder quantity(final Quantity quantity) {
                b.add(PROPERTY_QUANTITY, quantity);
                return this;
            }

            public Builder unitPrice(final Money unitPrice) {
                b.add(PROPERTY_UNIT_PRICE, unitPrice);
                return this;
            }

            public Builder factor(final Double factor) {
                b.add(PROPERTY_FACTOR, factor);
                return this;
            }

            public Builder points(final Double points) {
                b.add(PROPERTY_POINTS, points);
                return this;
            }

            public Builder net(final Money net) {
                b.add(PROPERTY_NET, net);
                return this;
            }

            public Builder payment(final String payment) {
                b.add(PROPERTY_PAYMENT, payment);
                return this;
            }

            public Builder paymentDate(final java.time.Instant paymentDate) {
                b.add(PROPERTY_PAYMENT_DATE, paymentDate.toString());
                return this;
            }

            public Builder responsible(final Reference responsible) {
                b.add(PROPERTY_RESPONSIBLE, responsible);
                return this;
            }

            public Builder recipient(final Reference recipient) {
                b.add(PROPERTY_RECIPIENT, recipient);
                return this;
            }

            public Builder linkId(final java.util.List<String> linkId) {
                b.add(PROPERTY_LINK_ID, FhirObject.toStringArray(linkId));
                return this;
            }

            public Builder securityLabelNumber(final java.util.List<Integer> securityLabelNumber) {
                b.add(PROPERTY_SECURITY_LABEL_NUMBER, FhirObject.toIntegerArray(securityLabelNumber));
                return this;
            }

            public ContractValuedItem build() {
                return new ContractValuedItem(b.build());
            }
        }
    }
}
