/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class BiologicallyDerivedProduct extends FhirResource {
    public static final String RESOURCE_TYPE = "BiologicallyDerivedProduct";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_PRODUCTCATEGORY = "productCategory";
    public static final String PROPERTY_PRODUCTCODE = "productCode";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_REQUEST = "request";
    public static final String PROPERTY_QUANTITY = "quantity";
    public static final String PROPERTY_PARENT = "parent";
    public static final String PROPERTY_COLLECTION = "collection";
    public static final String PROPERTY_PROCESSING = "processing";
    public static final String PROPERTY_MANIPULATION = "manipulation";
    public static final String PROPERTY_STORAGE = "storage";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public BiologicallyDerivedProduct(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * This records identifiers associated with this biologically derived
     * product instance that are defined by business processes and/or used to
     * refer to it when a direct URL reference to the resource itself is not
     * appropriate (e.g. in CDA documents, or in written / printed
     * documentation).
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Broad category of this product.
     */
    public String productCategory() {
        return getString(PROPERTY_PRODUCTCATEGORY);
    }

    /**
     * A code that identifies the kind of this biologically derived product
     * (SNOMED Ctcode).
     */
    public CodeableConcept productCode() {
        return getObject(CodeableConcept.class, PROPERTY_PRODUCTCODE);
    }

    /**
     * Whether the product is currently available.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Procedure request to obtain this biologically derived product.
     */
    public java.util.List<Reference> request() {
        return getList(Reference.class, PROPERTY_REQUEST);
    }

    /**
     * Number of discrete units within this product.
     */
    public Integer quantity() {
        return data.getInt(PROPERTY_QUANTITY);
    }

    /**
     * Parent product (if any).
     */
    public java.util.List<Reference> parent() {
        return getList(Reference.class, PROPERTY_PARENT);
    }

    /**
     * How this product was collected.
     */
    public BiologicallyDerivedProductCollection collection() {
        return getObject(BiologicallyDerivedProductCollection.class, PROPERTY_COLLECTION);
    }

    /**
     * Any processing of the product during collection that does not change
     * the fundamental nature of the product. For example adding
     * anti-coagulants during the collection of Peripheral Blood Stem Cells.
     */
    public java.util.List<BiologicallyDerivedProductProcessing> processing() {
        return getList(BiologicallyDerivedProductProcessing.class, PROPERTY_PROCESSING);
    }

    /**
     * Any manipulation of product post-collection that is intended to alter
     * the product.  For example a buffy-coat enrichment or CD8 reduction of
     * Peripheral Blood Stem Cells to make it more suitable for infusion.
     */
    public BiologicallyDerivedProductManipulation manipulation() {
        return getObject(BiologicallyDerivedProductManipulation.class, PROPERTY_MANIPULATION);
    }

    /**
     * Product storage.
     */
    public java.util.List<BiologicallyDerivedProductStorage> storage() {
        return getList(BiologicallyDerivedProductStorage.class, PROPERTY_STORAGE);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder productCategory(final String productCategory) {
            b.add(PROPERTY_PRODUCTCATEGORY, productCategory);
            return this;
        }

        public Builder productCode(final CodeableConcept productCode) {
            b.add(PROPERTY_PRODUCTCODE, productCode);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder request(final java.util.List<Reference> request) {
            b.add(PROPERTY_REQUEST, FhirObject.toArray(request));
            return this;
        }

        public Builder quantity(final Integer quantity) {
            b.add(PROPERTY_QUANTITY, quantity);
            return this;
        }

        public Builder parent(final java.util.List<Reference> parent) {
            b.add(PROPERTY_PARENT, FhirObject.toArray(parent));
            return this;
        }

        public Builder collection(final BiologicallyDerivedProductCollection collection) {
            b.add(PROPERTY_COLLECTION, collection);
            return this;
        }

        public Builder processing(final java.util.List<BiologicallyDerivedProductProcessing> processing) {
            b.add(PROPERTY_PROCESSING, FhirObject.toArray(processing));
            return this;
        }

        public Builder manipulation(final BiologicallyDerivedProductManipulation manipulation) {
            b.add(PROPERTY_MANIPULATION, manipulation);
            return this;
        }

        public Builder storage(final java.util.List<BiologicallyDerivedProductStorage> storage) {
            b.add(PROPERTY_STORAGE, FhirObject.toArray(storage));
            return this;
        }

        public BiologicallyDerivedProduct build() {
            return new BiologicallyDerivedProduct(b.build());
        }
    }

    public static class BiologicallyDerivedProductCollection extends FhirObject {
        public static final String RESOURCE_TYPE = "BiologicallyDerivedProductCollection";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_COLLECTOR = "collector";
        public static final String PROPERTY_SOURCE = "source";
        public static final String PROPERTY_COLLECTEDDATETIME = "collectedDateTime";
        public static final String PROPERTY_COLLECTEDPERIOD = "collectedPeriod";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public BiologicallyDerivedProductCollection(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Healthcare professional who is performing the collection.
         */
        public Reference collector() {
            return getObject(Reference.class, PROPERTY_COLLECTOR);
        }

        /**
         * The patient or entity, such as a hospital or vendor in the case of a
         * processed/manipulated/manufactured product, providing the product.
         */
        public Reference source() {
            return getObject(Reference.class, PROPERTY_SOURCE);
        }

        /**
         * Time of product collection.
         */
        public String collectedDateTime() {
            return getString(PROPERTY_COLLECTEDDATETIME);
        }

        /**
         * Time of product collection.
         */
        public Period collectedPeriod() {
            return getObject(Period.class, PROPERTY_COLLECTEDPERIOD);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder collector(final Reference collector) {
                b.add(PROPERTY_COLLECTOR, collector);
                return this;
            }

            public Builder source(final Reference source) {
                b.add(PROPERTY_SOURCE, source);
                return this;
            }

            public Builder collectedDateTime(final String collectedDateTime) {
                b.add(PROPERTY_COLLECTEDDATETIME, collectedDateTime);
                return this;
            }

            public Builder collectedPeriod(final Period collectedPeriod) {
                b.add(PROPERTY_COLLECTEDPERIOD, collectedPeriod);
                return this;
            }

            public BiologicallyDerivedProductCollection build() {
                return new BiologicallyDerivedProductCollection(b.build());
            }
        }
    }

    public static class BiologicallyDerivedProductManipulation extends FhirObject {
        public static final String RESOURCE_TYPE = "BiologicallyDerivedProductManipulation";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_TIMEDATETIME = "timeDateTime";
        public static final String PROPERTY_TIMEPERIOD = "timePeriod";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public BiologicallyDerivedProductManipulation(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Description of manipulation.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * Time of manipulation.
         */
        public String timeDateTime() {
            return getString(PROPERTY_TIMEDATETIME);
        }

        /**
         * Time of manipulation.
         */
        public Period timePeriod() {
            return getObject(Period.class, PROPERTY_TIMEPERIOD);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder timeDateTime(final String timeDateTime) {
                b.add(PROPERTY_TIMEDATETIME, timeDateTime);
                return this;
            }

            public Builder timePeriod(final Period timePeriod) {
                b.add(PROPERTY_TIMEPERIOD, timePeriod);
                return this;
            }

            public BiologicallyDerivedProductManipulation build() {
                return new BiologicallyDerivedProductManipulation(b.build());
            }
        }
    }

    public static class BiologicallyDerivedProductProcessing extends FhirObject {
        public static final String RESOURCE_TYPE = "BiologicallyDerivedProductProcessing";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_PROCEDURE = "procedure";
        public static final String PROPERTY_ADDITIVE = "additive";
        public static final String PROPERTY_TIMEDATETIME = "timeDateTime";
        public static final String PROPERTY_TIMEPERIOD = "timePeriod";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public BiologicallyDerivedProductProcessing(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Description of of processing.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * Procesing code.
         */
        public CodeableConcept procedure() {
            return getObject(CodeableConcept.class, PROPERTY_PROCEDURE);
        }

        /**
         * Substance added during processing.
         */
        public Reference additive() {
            return getObject(Reference.class, PROPERTY_ADDITIVE);
        }

        /**
         * Time of processing.
         */
        public String timeDateTime() {
            return getString(PROPERTY_TIMEDATETIME);
        }

        /**
         * Time of processing.
         */
        public Period timePeriod() {
            return getObject(Period.class, PROPERTY_TIMEPERIOD);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder procedure(final CodeableConcept procedure) {
                b.add(PROPERTY_PROCEDURE, procedure);
                return this;
            }

            public Builder additive(final Reference additive) {
                b.add(PROPERTY_ADDITIVE, additive);
                return this;
            }

            public Builder timeDateTime(final String timeDateTime) {
                b.add(PROPERTY_TIMEDATETIME, timeDateTime);
                return this;
            }

            public Builder timePeriod(final Period timePeriod) {
                b.add(PROPERTY_TIMEPERIOD, timePeriod);
                return this;
            }

            public BiologicallyDerivedProductProcessing build() {
                return new BiologicallyDerivedProductProcessing(b.build());
            }
        }
    }

    public static class BiologicallyDerivedProductStorage extends FhirObject {
        public static final String RESOURCE_TYPE = "BiologicallyDerivedProductStorage";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_TEMPERATURE = "temperature";
        public static final String PROPERTY_SCALE = "scale";
        public static final String PROPERTY_DURATION = "duration";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public BiologicallyDerivedProductStorage(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Description of storage.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * Storage temperature.
         */
        public Double temperature() {
            return data.getJsonNumber(PROPERTY_TEMPERATURE).doubleValue();
        }

        /**
         * Temperature scale used.
         */
        public String scale() {
            return getString(PROPERTY_SCALE);
        }

        /**
         * Storage timeperiod.
         */
        public Period duration() {
            return getObject(Period.class, PROPERTY_DURATION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder temperature(final Double temperature) {
                b.add(PROPERTY_TEMPERATURE, temperature);
                return this;
            }

            public Builder scale(final String scale) {
                b.add(PROPERTY_SCALE, scale);
                return this;
            }

            public Builder duration(final Period duration) {
                b.add(PROPERTY_DURATION, duration);
                return this;
            }

            public BiologicallyDerivedProductStorage build() {
                return new BiologicallyDerivedProductStorage(b.build());
            }
        }
    }
}
