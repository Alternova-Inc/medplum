/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class SubstanceSourceMaterial extends FhirResource {
    public static final String RESOURCE_TYPE = "SubstanceSourceMaterial";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_SOURCE_MATERIAL_CLASS = "sourceMaterialClass";
    public static final String PROPERTY_SOURCE_MATERIAL_TYPE = "sourceMaterialType";
    public static final String PROPERTY_SOURCE_MATERIAL_STATE = "sourceMaterialState";
    public static final String PROPERTY_ORGANISM_ID = "organismId";
    public static final String PROPERTY_ORGANISM_NAME = "organismName";
    public static final String PROPERTY_PARENT_SUBSTANCE_ID = "parentSubstanceId";
    public static final String PROPERTY_PARENT_SUBSTANCE_NAME = "parentSubstanceName";
    public static final String PROPERTY_COUNTRY_OF_ORIGIN = "countryOfOrigin";
    public static final String PROPERTY_GEOGRAPHICAL_LOCATION = "geographicalLocation";
    public static final String PROPERTY_DEVELOPMENT_STAGE = "developmentStage";
    public static final String PROPERTY_FRACTION_DESCRIPTION = "fractionDescription";
    public static final String PROPERTY_ORGANISM = "organism";
    public static final String PROPERTY_PART_DESCRIPTION = "partDescription";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public SubstanceSourceMaterial(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it "clinically safe" for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * General high level classification of the source material specific to
     * the origin of the material.
     */
    public CodeableConcept sourceMaterialClass() {
        return getObject(CodeableConcept.class, PROPERTY_SOURCE_MATERIAL_CLASS);
    }

    /**
     * The type of the source material shall be specified based on a
     * controlled vocabulary. For vaccines, this subclause refers to the
     * class of infectious agent.
     */
    public CodeableConcept sourceMaterialType() {
        return getObject(CodeableConcept.class, PROPERTY_SOURCE_MATERIAL_TYPE);
    }

    /**
     * The state of the source material when extracted.
     */
    public CodeableConcept sourceMaterialState() {
        return getObject(CodeableConcept.class, PROPERTY_SOURCE_MATERIAL_STATE);
    }

    /**
     * The unique identifier associated with the source material parent
     * organism shall be specified.
     */
    public Identifier organismId() {
        return getObject(Identifier.class, PROPERTY_ORGANISM_ID);
    }

    /**
     * The organism accepted Scientific name shall be provided based on the
     * organism taxonomy.
     */
    public String organismName() {
        return getString(PROPERTY_ORGANISM_NAME);
    }

    /**
     * The parent of the herbal drug Ginkgo biloba, Leaf is the substance ID
     * of the substance (fresh) of Ginkgo biloba L. or Ginkgo biloba L.
     * (Whole plant).
     */
    public java.util.List<Identifier> parentSubstanceId() {
        return getList(Identifier.class, PROPERTY_PARENT_SUBSTANCE_ID);
    }

    /**
     * The parent substance of the Herbal Drug, or Herbal preparation.
     */
    public java.util.List<String> parentSubstanceName() {
        return getList(String.class, PROPERTY_PARENT_SUBSTANCE_NAME);
    }

    /**
     * The country where the plant material is harvested or the countries
     * where the plasma is sourced from as laid down in accordance with the
     * Plasma Master File. For “Plasma-derived substances” the attribute
     * country of origin provides information about the countries used for
     * the manufacturing of the Cryopoor plama or Crioprecipitate.
     */
    public java.util.List<CodeableConcept> countryOfOrigin() {
        return getList(CodeableConcept.class, PROPERTY_COUNTRY_OF_ORIGIN);
    }

    /**
     * The place/region where the plant is harvested or the places/regions
     * where the animal source material has its habitat.
     */
    public java.util.List<String> geographicalLocation() {
        return getList(String.class, PROPERTY_GEOGRAPHICAL_LOCATION);
    }

    /**
     * Stage of life for animals, plants, insects and microorganisms. This
     * information shall be provided only when the substance is significantly
     * different in these stages (e.g. foetal bovine serum).
     */
    public CodeableConcept developmentStage() {
        return getObject(CodeableConcept.class, PROPERTY_DEVELOPMENT_STAGE);
    }

    /**
     * Many complex materials are fractions of parts of plants, animals, or
     * minerals. Fraction elements are often necessary to define both
     * Substances and Specified Group 1 Substances. For substances derived
     * from Plants, fraction information will be captured at the Substance
     * information level ( . Oils, Juices and Exudates). Additional
     * information for Extracts, such as extraction solvent composition, will
     * be captured at the Specified Substance Group 1 information level. For
     * plasma-derived products fraction information will be captured at the
     * Substance and the Specified Substance Group 1 levels.
     */
    public java.util.List<SubstanceSourceMaterialFractionDescription> fractionDescription() {
        return getList(SubstanceSourceMaterialFractionDescription.class, PROPERTY_FRACTION_DESCRIPTION);
    }

    /**
     * This subclause describes the organism which the substance is derived
     * from. For vaccines, the parent organism shall be specified based on
     * these subclause elements. As an example, full taxonomy will be
     * described for the Substance Name: ., Leaf.
     */
    public SubstanceSourceMaterialOrganism organism() {
        return getObject(SubstanceSourceMaterialOrganism.class, PROPERTY_ORGANISM);
    }

    /**
     * To do.
     */
    public java.util.List<SubstanceSourceMaterialPartDescription> partDescription() {
        return getList(SubstanceSourceMaterialPartDescription.class, PROPERTY_PART_DESCRIPTION);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder sourceMaterialClass(final CodeableConcept sourceMaterialClass) {
            b.add(PROPERTY_SOURCE_MATERIAL_CLASS, sourceMaterialClass);
            return this;
        }

        public Builder sourceMaterialType(final CodeableConcept sourceMaterialType) {
            b.add(PROPERTY_SOURCE_MATERIAL_TYPE, sourceMaterialType);
            return this;
        }

        public Builder sourceMaterialState(final CodeableConcept sourceMaterialState) {
            b.add(PROPERTY_SOURCE_MATERIAL_STATE, sourceMaterialState);
            return this;
        }

        public Builder organismId(final Identifier organismId) {
            b.add(PROPERTY_ORGANISM_ID, organismId);
            return this;
        }

        public Builder organismName(final String organismName) {
            b.add(PROPERTY_ORGANISM_NAME, organismName);
            return this;
        }

        public Builder parentSubstanceId(final java.util.List<Identifier> parentSubstanceId) {
            b.add(PROPERTY_PARENT_SUBSTANCE_ID, FhirObject.toArray(parentSubstanceId));
            return this;
        }

        public Builder parentSubstanceName(final java.util.List<String> parentSubstanceName) {
            b.add(PROPERTY_PARENT_SUBSTANCE_NAME, FhirObject.toStringArray(parentSubstanceName));
            return this;
        }

        public Builder countryOfOrigin(final java.util.List<CodeableConcept> countryOfOrigin) {
            b.add(PROPERTY_COUNTRY_OF_ORIGIN, FhirObject.toArray(countryOfOrigin));
            return this;
        }

        public Builder geographicalLocation(final java.util.List<String> geographicalLocation) {
            b.add(PROPERTY_GEOGRAPHICAL_LOCATION, FhirObject.toStringArray(geographicalLocation));
            return this;
        }

        public Builder developmentStage(final CodeableConcept developmentStage) {
            b.add(PROPERTY_DEVELOPMENT_STAGE, developmentStage);
            return this;
        }

        public Builder fractionDescription(final java.util.List<SubstanceSourceMaterialFractionDescription> fractionDescription) {
            b.add(PROPERTY_FRACTION_DESCRIPTION, FhirObject.toArray(fractionDescription));
            return this;
        }

        public Builder organism(final SubstanceSourceMaterialOrganism organism) {
            b.add(PROPERTY_ORGANISM, organism);
            return this;
        }

        public Builder partDescription(final java.util.List<SubstanceSourceMaterialPartDescription> partDescription) {
            b.add(PROPERTY_PART_DESCRIPTION, FhirObject.toArray(partDescription));
            return this;
        }

        public SubstanceSourceMaterial build() {
            return new SubstanceSourceMaterial(b.build());
        }
    }

    public static class SubstanceSourceMaterialAuthor extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialAuthor";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_AUTHOR_TYPE = "authorType";
        public static final String PROPERTY_AUTHOR_DESCRIPTION = "authorDescription";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialAuthor(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The type of author of an organism species shall be specified. The
         * parenthetical author of an organism species refers to the first author
         * who published the plant/animal name (of any rank). The primary author
         * of an organism species refers to the first author(s), who validly
         * published the plant/animal name.
         */
        public CodeableConcept authorType() {
            return getObject(CodeableConcept.class, PROPERTY_AUTHOR_TYPE);
        }

        /**
         * The author of an organism species shall be specified. The author year
         * of an organism shall also be specified when applicable; refers to the
         * year in which the first author(s) published the infraspecific
         * plant/animal name (of any rank).
         */
        public String authorDescription() {
            return getString(PROPERTY_AUTHOR_DESCRIPTION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder authorType(final CodeableConcept authorType) {
                b.add(PROPERTY_AUTHOR_TYPE, authorType);
                return this;
            }

            public Builder authorDescription(final String authorDescription) {
                b.add(PROPERTY_AUTHOR_DESCRIPTION, authorDescription);
                return this;
            }

            public SubstanceSourceMaterialAuthor build() {
                return new SubstanceSourceMaterialAuthor(b.build());
            }
        }
    }

    public static class SubstanceSourceMaterialFractionDescription extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialFractionDescription";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_FRACTION = "fraction";
        public static final String PROPERTY_MATERIAL_TYPE = "materialType";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialFractionDescription(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * This element is capturing information about the fraction of a plant
         * part, or human plasma for fractionation.
         */
        public String fraction() {
            return getString(PROPERTY_FRACTION);
        }

        /**
         * The specific type of the material constituting the component. For
         * Herbal preparations the particulars of the extracts (liquid/dry) is
         * described in Specified Substance Group 1.
         */
        public CodeableConcept materialType() {
            return getObject(CodeableConcept.class, PROPERTY_MATERIAL_TYPE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder fraction(final String fraction) {
                b.add(PROPERTY_FRACTION, fraction);
                return this;
            }

            public Builder materialType(final CodeableConcept materialType) {
                b.add(PROPERTY_MATERIAL_TYPE, materialType);
                return this;
            }

            public SubstanceSourceMaterialFractionDescription build() {
                return new SubstanceSourceMaterialFractionDescription(b.build());
            }
        }
    }

    public static class SubstanceSourceMaterialHybrid extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialHybrid";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_MATERNAL_ORGANISM_ID = "maternalOrganismId";
        public static final String PROPERTY_MATERNAL_ORGANISM_NAME = "maternalOrganismName";
        public static final String PROPERTY_PATERNAL_ORGANISM_ID = "paternalOrganismId";
        public static final String PROPERTY_PATERNAL_ORGANISM_NAME = "paternalOrganismName";
        public static final String PROPERTY_HYBRID_TYPE = "hybridType";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialHybrid(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The identifier of the maternal species constituting the hybrid
         * organism shall be specified based on a controlled vocabulary. For
         * plants, the parents aren’t always known, and it is unlikely that it
         * will be known which is maternal and which is paternal.
         */
        public String maternalOrganismId() {
            return getString(PROPERTY_MATERNAL_ORGANISM_ID);
        }

        /**
         * The name of the maternal species constituting the hybrid organism
         * shall be specified. For plants, the parents aren’t always known, and
         * it is unlikely that it will be known which is maternal and which is
         * paternal.
         */
        public String maternalOrganismName() {
            return getString(PROPERTY_MATERNAL_ORGANISM_NAME);
        }

        /**
         * The identifier of the paternal species constituting the hybrid
         * organism shall be specified based on a controlled vocabulary.
         */
        public String paternalOrganismId() {
            return getString(PROPERTY_PATERNAL_ORGANISM_ID);
        }

        /**
         * The name of the paternal species constituting the hybrid organism
         * shall be specified.
         */
        public String paternalOrganismName() {
            return getString(PROPERTY_PATERNAL_ORGANISM_NAME);
        }

        /**
         * The hybrid type of an organism shall be specified.
         */
        public CodeableConcept hybridType() {
            return getObject(CodeableConcept.class, PROPERTY_HYBRID_TYPE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder maternalOrganismId(final String maternalOrganismId) {
                b.add(PROPERTY_MATERNAL_ORGANISM_ID, maternalOrganismId);
                return this;
            }

            public Builder maternalOrganismName(final String maternalOrganismName) {
                b.add(PROPERTY_MATERNAL_ORGANISM_NAME, maternalOrganismName);
                return this;
            }

            public Builder paternalOrganismId(final String paternalOrganismId) {
                b.add(PROPERTY_PATERNAL_ORGANISM_ID, paternalOrganismId);
                return this;
            }

            public Builder paternalOrganismName(final String paternalOrganismName) {
                b.add(PROPERTY_PATERNAL_ORGANISM_NAME, paternalOrganismName);
                return this;
            }

            public Builder hybridType(final CodeableConcept hybridType) {
                b.add(PROPERTY_HYBRID_TYPE, hybridType);
                return this;
            }

            public SubstanceSourceMaterialHybrid build() {
                return new SubstanceSourceMaterialHybrid(b.build());
            }
        }
    }

    public static class SubstanceSourceMaterialOrganism extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialOrganism";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_FAMILY = "family";
        public static final String PROPERTY_GENUS = "genus";
        public static final String PROPERTY_SPECIES = "species";
        public static final String PROPERTY_INTRASPECIFIC_TYPE = "intraspecificType";
        public static final String PROPERTY_INTRASPECIFIC_DESCRIPTION = "intraspecificDescription";
        public static final String PROPERTY_AUTHOR = "author";
        public static final String PROPERTY_HYBRID = "hybrid";
        public static final String PROPERTY_ORGANISM_GENERAL = "organismGeneral";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialOrganism(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The family of an organism shall be specified.
         */
        public CodeableConcept family() {
            return getObject(CodeableConcept.class, PROPERTY_FAMILY);
        }

        /**
         * The genus of an organism shall be specified; refers to the Latin
         * epithet of the genus element of the plant/animal scientific name; it
         * is present in names for genera, species and infraspecies.
         */
        public CodeableConcept genus() {
            return getObject(CodeableConcept.class, PROPERTY_GENUS);
        }

        /**
         * The species of an organism shall be specified; refers to the Latin
         * epithet of the species of the plant/animal; it is present in names for
         * species and infraspecies.
         */
        public CodeableConcept species() {
            return getObject(CodeableConcept.class, PROPERTY_SPECIES);
        }

        /**
         * The Intraspecific type of an organism shall be specified.
         */
        public CodeableConcept intraspecificType() {
            return getObject(CodeableConcept.class, PROPERTY_INTRASPECIFIC_TYPE);
        }

        /**
         * The intraspecific description of an organism shall be specified based
         * on a controlled vocabulary. For Influenza Vaccine, the intraspecific
         * description shall contain the syntax of the antigen in line with the
         * WHO convention.
         */
        public String intraspecificDescription() {
            return getString(PROPERTY_INTRASPECIFIC_DESCRIPTION);
        }

        /**
         * 4.9.13.6.1 Author type (Conditional).
         */
        public java.util.List<SubstanceSourceMaterialAuthor> author() {
            return getList(SubstanceSourceMaterialAuthor.class, PROPERTY_AUTHOR);
        }

        /**
         * 4.9.13.8.1 Hybrid species maternal organism ID (Optional).
         */
        public SubstanceSourceMaterialHybrid hybrid() {
            return getObject(SubstanceSourceMaterialHybrid.class, PROPERTY_HYBRID);
        }

        /**
         * 4.9.13.7.1 Kingdom (Conditional).
         */
        public SubstanceSourceMaterialOrganismGeneral organismGeneral() {
            return getObject(SubstanceSourceMaterialOrganismGeneral.class, PROPERTY_ORGANISM_GENERAL);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder family(final CodeableConcept family) {
                b.add(PROPERTY_FAMILY, family);
                return this;
            }

            public Builder genus(final CodeableConcept genus) {
                b.add(PROPERTY_GENUS, genus);
                return this;
            }

            public Builder species(final CodeableConcept species) {
                b.add(PROPERTY_SPECIES, species);
                return this;
            }

            public Builder intraspecificType(final CodeableConcept intraspecificType) {
                b.add(PROPERTY_INTRASPECIFIC_TYPE, intraspecificType);
                return this;
            }

            public Builder intraspecificDescription(final String intraspecificDescription) {
                b.add(PROPERTY_INTRASPECIFIC_DESCRIPTION, intraspecificDescription);
                return this;
            }

            public Builder author(final java.util.List<SubstanceSourceMaterialAuthor> author) {
                b.add(PROPERTY_AUTHOR, FhirObject.toArray(author));
                return this;
            }

            public Builder hybrid(final SubstanceSourceMaterialHybrid hybrid) {
                b.add(PROPERTY_HYBRID, hybrid);
                return this;
            }

            public Builder organismGeneral(final SubstanceSourceMaterialOrganismGeneral organismGeneral) {
                b.add(PROPERTY_ORGANISM_GENERAL, organismGeneral);
                return this;
            }

            public SubstanceSourceMaterialOrganism build() {
                return new SubstanceSourceMaterialOrganism(b.build());
            }
        }
    }

    public static class SubstanceSourceMaterialOrganismGeneral extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialOrganismGeneral";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_KINGDOM = "kingdom";
        public static final String PROPERTY_PHYLUM = "phylum";
        public static final String PROPERTY_CLASS = "class";
        public static final String PROPERTY_ORDER = "order";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialOrganismGeneral(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The kingdom of an organism shall be specified.
         */
        public CodeableConcept kingdom() {
            return getObject(CodeableConcept.class, PROPERTY_KINGDOM);
        }

        /**
         * The phylum of an organism shall be specified.
         */
        public CodeableConcept phylum() {
            return getObject(CodeableConcept.class, PROPERTY_PHYLUM);
        }

        /**
         * The class of an organism shall be specified.
         */
        public CodeableConcept classValue() {
            return getObject(CodeableConcept.class, PROPERTY_CLASS);
        }

        /**
         * The order of an organism shall be specified,.
         */
        public CodeableConcept order() {
            return getObject(CodeableConcept.class, PROPERTY_ORDER);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder kingdom(final CodeableConcept kingdom) {
                b.add(PROPERTY_KINGDOM, kingdom);
                return this;
            }

            public Builder phylum(final CodeableConcept phylum) {
                b.add(PROPERTY_PHYLUM, phylum);
                return this;
            }

            public Builder classValue(final CodeableConcept classValue) {
                b.add(PROPERTY_CLASS, classValue);
                return this;
            }

            public Builder order(final CodeableConcept order) {
                b.add(PROPERTY_ORDER, order);
                return this;
            }

            public SubstanceSourceMaterialOrganismGeneral build() {
                return new SubstanceSourceMaterialOrganismGeneral(b.build());
            }
        }
    }

    public static class SubstanceSourceMaterialPartDescription extends FhirObject {
        public static final String RESOURCE_TYPE = "SubstanceSourceMaterialPartDescription";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_PART = "part";
        public static final String PROPERTY_PART_LOCATION = "partLocation";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public SubstanceSourceMaterialPartDescription(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Entity of anatomical origin of source material within an organism.
         */
        public CodeableConcept part() {
            return getObject(CodeableConcept.class, PROPERTY_PART);
        }

        /**
         * The detailed anatomic location when the part can be extracted from
         * different anatomical locations of the organism. Multiple alternative
         * locations may apply.
         */
        public CodeableConcept partLocation() {
            return getObject(CodeableConcept.class, PROPERTY_PART_LOCATION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder part(final CodeableConcept part) {
                b.add(PROPERTY_PART, part);
                return this;
            }

            public Builder partLocation(final CodeableConcept partLocation) {
                b.add(PROPERTY_PART_LOCATION, partLocation);
                return this;
            }

            public SubstanceSourceMaterialPartDescription build() {
                return new SubstanceSourceMaterialPartDescription(b.build());
            }
        }
    }
}
