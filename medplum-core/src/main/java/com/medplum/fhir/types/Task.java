/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import java.time.Instant;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class Task extends FhirResource {
    public static final String RESOURCE_TYPE = "Task";
    public static final String PROPERTY_RESOURCETYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICITRULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_INSTANTIATESCANONICAL = "instantiatesCanonical";
    public static final String PROPERTY_INSTANTIATESURI = "instantiatesUri";
    public static final String PROPERTY_BASEDON = "basedOn";
    public static final String PROPERTY_GROUPIDENTIFIER = "groupIdentifier";
    public static final String PROPERTY_PARTOF = "partOf";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_STATUSREASON = "statusReason";
    public static final String PROPERTY_BUSINESSSTATUS = "businessStatus";
    public static final String PROPERTY_INTENT = "intent";
    public static final String PROPERTY_PRIORITY = "priority";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_DESCRIPTION = "description";
    public static final String PROPERTY_FOCUS = "focus";
    public static final String PROPERTY_FOR = "for";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_EXECUTIONPERIOD = "executionPeriod";
    public static final String PROPERTY_AUTHOREDON = "authoredOn";
    public static final String PROPERTY_LASTMODIFIED = "lastModified";
    public static final String PROPERTY_REQUESTER = "requester";
    public static final String PROPERTY_PERFORMERTYPE = "performerType";
    public static final String PROPERTY_OWNER = "owner";
    public static final String PROPERTY_LOCATION = "location";
    public static final String PROPERTY_REASONCODE = "reasonCode";
    public static final String PROPERTY_REASONREFERENCE = "reasonReference";
    public static final String PROPERTY_INSURANCE = "insurance";
    public static final String PROPERTY_NOTE = "note";
    public static final String PROPERTY_RELEVANTHISTORY = "relevantHistory";
    public static final String PROPERTY_RESTRICTION = "restriction";
    public static final String PROPERTY_INPUT = "input";
    public static final String PROPERTY_OUTPUT = "output";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Task(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICITRULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
    }

    /**
     * The business identifier for this task.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a *FHIR*-defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    public String instantiatesCanonical() {
        return getString(PROPERTY_INSTANTIATESCANONICAL);
    }

    /**
     * The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task.
     */
    public String instantiatesUri() {
        return getString(PROPERTY_INSTANTIATESURI);
    }

    /**
     * BasedOn refers to a higher-level authorization that triggered the creation of the task.  It references a "request" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the "request" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASEDON);
    }

    /**
     * An identifier that links together multiple tasks and other requests that were created in the same context.
     */
    public Identifier groupIdentifier() {
        return getObject(Identifier.class, PROPERTY_GROUPIDENTIFIER);
    }

    /**
     * Task that this particular task is part of.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, PROPERTY_PARTOF);
    }

    /**
     * The current status of the task.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * An explanation as to why this task is held, failed, was refused, etc.
     */
    public CodeableConcept statusReason() {
        return getObject(CodeableConcept.class, PROPERTY_STATUSREASON);
    }

    /**
     * Contains business-specific nuances of the business state.
     */
    public CodeableConcept businessStatus() {
        return getObject(CodeableConcept.class, PROPERTY_BUSINESSSTATUS);
    }

    /**
     * Indicates the "level" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc.
     */
    public String intent() {
        return getString(PROPERTY_INTENT);
    }

    /**
     * Indicates how quickly the Task should be addressed with respect to other requests.
     */
    public String priority() {
        return getString(PROPERTY_PRIORITY);
    }

    /**
     * A name or code (or both) briefly describing what the task involves.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, PROPERTY_CODE);
    }

    /**
     * A free-text description of what is to be performed.
     */
    public String description() {
        return getString(PROPERTY_DESCRIPTION);
    }

    /**
     * The request being actioned or the resource being manipulated by this task.
     */
    public Reference focus() {
        return getObject(Reference.class, PROPERTY_FOCUS);
    }

    /**
     * The entity who benefits from the performance of the service specified in the task (e.g., the patient).
     */
    public Reference for_() {
        return getObject(Reference.class, PROPERTY_FOR);
    }

    /**
     * The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end).
     */
    public Period executionPeriod() {
        return getObject(Period.class, PROPERTY_EXECUTIONPERIOD);
    }

    /**
     * The date and time this task was created.
     */
    public java.time.Instant authoredOn() {
        return java.time.Instant.parse(data.getString(PROPERTY_AUTHOREDON));
    }

    /**
     * The date and time of last modification to this task.
     */
    public java.time.Instant lastModified() {
        return java.time.Instant.parse(data.getString(PROPERTY_LASTMODIFIED));
    }

    /**
     * The creator of the task.
     */
    public Reference requester() {
        return getObject(Reference.class, PROPERTY_REQUESTER);
    }

    /**
     * The kind of participant that should perform the task.
     */
    public java.util.List<CodeableConcept> performerType() {
        return getList(CodeableConcept.class, PROPERTY_PERFORMERTYPE);
    }

    /**
     * Individual organization or Device currently responsible for task execution.
     */
    public Reference owner() {
        return getObject(Reference.class, PROPERTY_OWNER);
    }

    /**
     * Principal physical location where the this task is performed.
     */
    public Reference location() {
        return getObject(Reference.class, PROPERTY_LOCATION);
    }

    /**
     * A description or code indicating why this task needs to be performed.
     */
    public CodeableConcept reasonCode() {
        return getObject(CodeableConcept.class, PROPERTY_REASONCODE);
    }

    /**
     * A resource reference indicating why this task needs to be performed.
     */
    public Reference reasonReference() {
        return getObject(Reference.class, PROPERTY_REASONREFERENCE);
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or pre-determinations that may be relevant to the Task.
     */
    public java.util.List<Reference> insurance() {
        return getList(Reference.class, PROPERTY_INSURANCE);
    }

    /**
     * Free-text information captured about the task as it progresses.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    /**
     * Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task.
     */
    public java.util.List<Reference> relevantHistory() {
        return getList(Reference.class, PROPERTY_RELEVANTHISTORY);
    }

    /**
     * If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned.
     */
    public TaskRestriction restriction() {
        return getObject(TaskRestriction.class, PROPERTY_RESTRICTION);
    }

    /**
     * Additional information that may be needed in the execution of the task.
     */
    public java.util.List<TaskInput> input() {
        return getList(TaskInput.class, PROPERTY_INPUT);
    }

    /**
     * Outputs produced by the Task.
     */
    public java.util.List<TaskOutput> output() {
        return getList(TaskOutput.class, PROPERTY_OUTPUT);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCETYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICITRULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final String instantiatesCanonical) {
            b.add(PROPERTY_INSTANTIATESCANONICAL, instantiatesCanonical);
            return this;
        }

        public Builder instantiatesUri(final String instantiatesUri) {
            b.add(PROPERTY_INSTANTIATESURI, instantiatesUri);
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASEDON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder groupIdentifier(final Identifier groupIdentifier) {
            b.add(PROPERTY_GROUPIDENTIFIER, groupIdentifier);
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(PROPERTY_PARTOF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReason(final CodeableConcept statusReason) {
            b.add(PROPERTY_STATUSREASON, statusReason);
            return this;
        }

        public Builder businessStatus(final CodeableConcept businessStatus) {
            b.add(PROPERTY_BUSINESSSTATUS, businessStatus);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(PROPERTY_INTENT, intent);
            return this;
        }

        public Builder priority(final String priority) {
            b.add(PROPERTY_PRIORITY, priority);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder description(final String description) {
            b.add(PROPERTY_DESCRIPTION, description);
            return this;
        }

        public Builder focus(final Reference focus) {
            b.add(PROPERTY_FOCUS, focus);
            return this;
        }

        public Builder for_(final Reference for_) {
            b.add(PROPERTY_FOR, for_);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder executionPeriod(final Period executionPeriod) {
            b.add(PROPERTY_EXECUTIONPERIOD, executionPeriod);
            return this;
        }

        public Builder authoredOn(final java.time.Instant authoredOn) {
            b.add(PROPERTY_AUTHOREDON, authoredOn.toString());
            return this;
        }

        public Builder lastModified(final java.time.Instant lastModified) {
            b.add(PROPERTY_LASTMODIFIED, lastModified.toString());
            return this;
        }

        public Builder requester(final Reference requester) {
            b.add(PROPERTY_REQUESTER, requester);
            return this;
        }

        public Builder performerType(final java.util.List<CodeableConcept> performerType) {
            b.add(PROPERTY_PERFORMERTYPE, FhirObject.toArray(performerType));
            return this;
        }

        public Builder owner(final Reference owner) {
            b.add(PROPERTY_OWNER, owner);
            return this;
        }

        public Builder location(final Reference location) {
            b.add(PROPERTY_LOCATION, location);
            return this;
        }

        public Builder reasonCode(final CodeableConcept reasonCode) {
            b.add(PROPERTY_REASONCODE, reasonCode);
            return this;
        }

        public Builder reasonReference(final Reference reasonReference) {
            b.add(PROPERTY_REASONREFERENCE, reasonReference);
            return this;
        }

        public Builder insurance(final java.util.List<Reference> insurance) {
            b.add(PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder relevantHistory(final java.util.List<Reference> relevantHistory) {
            b.add(PROPERTY_RELEVANTHISTORY, FhirObject.toArray(relevantHistory));
            return this;
        }

        public Builder restriction(final TaskRestriction restriction) {
            b.add(PROPERTY_RESTRICTION, restriction);
            return this;
        }

        public Builder input(final java.util.List<TaskInput> input) {
            b.add(PROPERTY_INPUT, FhirObject.toArray(input));
            return this;
        }

        public Builder output(final java.util.List<TaskOutput> output) {
            b.add(PROPERTY_OUTPUT, FhirObject.toArray(output));
            return this;
        }

        public Task build() {
            return new Task(b.build());
        }
    }

    public static class TaskInput extends FhirObject {
        public static final String RESOURCE_TYPE = "TaskInput";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_VALUEBASE64BINARY = "valueBase64Binary";
        public static final String PROPERTY_VALUEBOOLEAN = "valueBoolean";
        public static final String PROPERTY_VALUECANONICAL = "valueCanonical";
        public static final String PROPERTY_VALUECODE = "valueCode";
        public static final String PROPERTY_VALUEDATE = "valueDate";
        public static final String PROPERTY_VALUEDATETIME = "valueDateTime";
        public static final String PROPERTY_VALUEDECIMAL = "valueDecimal";
        public static final String PROPERTY_VALUEID = "valueId";
        public static final String PROPERTY_VALUEINSTANT = "valueInstant";
        public static final String PROPERTY_VALUEINTEGER = "valueInteger";
        public static final String PROPERTY_VALUEMARKDOWN = "valueMarkdown";
        public static final String PROPERTY_VALUEOID = "valueOid";
        public static final String PROPERTY_VALUEPOSITIVEINT = "valuePositiveInt";
        public static final String PROPERTY_VALUESTRING = "valueString";
        public static final String PROPERTY_VALUETIME = "valueTime";
        public static final String PROPERTY_VALUEUNSIGNEDINT = "valueUnsignedInt";
        public static final String PROPERTY_VALUEURI = "valueUri";
        public static final String PROPERTY_VALUEURL = "valueUrl";
        public static final String PROPERTY_VALUEUUID = "valueUuid";
        public static final String PROPERTY_VALUEADDRESS = "valueAddress";
        public static final String PROPERTY_VALUEAGE = "valueAge";
        public static final String PROPERTY_VALUEANNOTATION = "valueAnnotation";
        public static final String PROPERTY_VALUEATTACHMENT = "valueAttachment";
        public static final String PROPERTY_VALUECODEABLECONCEPT = "valueCodeableConcept";
        public static final String PROPERTY_VALUECODING = "valueCoding";
        public static final String PROPERTY_VALUECONTACTPOINT = "valueContactPoint";
        public static final String PROPERTY_VALUECOUNT = "valueCount";
        public static final String PROPERTY_VALUEDISTANCE = "valueDistance";
        public static final String PROPERTY_VALUEDURATION = "valueDuration";
        public static final String PROPERTY_VALUEHUMANNAME = "valueHumanName";
        public static final String PROPERTY_VALUEIDENTIFIER = "valueIdentifier";
        public static final String PROPERTY_VALUEMONEY = "valueMoney";
        public static final String PROPERTY_VALUEPERIOD = "valuePeriod";
        public static final String PROPERTY_VALUEQUANTITY = "valueQuantity";
        public static final String PROPERTY_VALUERANGE = "valueRange";
        public static final String PROPERTY_VALUERATIO = "valueRatio";
        public static final String PROPERTY_VALUEREFERENCE = "valueReference";
        public static final String PROPERTY_VALUESAMPLEDDATA = "valueSampledData";
        public static final String PROPERTY_VALUESIGNATURE = "valueSignature";
        public static final String PROPERTY_VALUETIMING = "valueTiming";
        public static final String PROPERTY_VALUECONTACTDETAIL = "valueContactDetail";
        public static final String PROPERTY_VALUECONTRIBUTOR = "valueContributor";
        public static final String PROPERTY_VALUEDATAREQUIREMENT = "valueDataRequirement";
        public static final String PROPERTY_VALUEEXPRESSION = "valueExpression";
        public static final String PROPERTY_VALUEPARAMETERDEFINITION = "valueParameterDefinition";
        public static final String PROPERTY_VALUERELATEDARTIFACT = "valueRelatedArtifact";
        public static final String PROPERTY_VALUETRIGGERDEFINITION = "valueTriggerDefinition";
        public static final String PROPERTY_VALUEUSAGECONTEXT = "valueUsageContext";
        public static final String PROPERTY_VALUEDOSAGE = "valueDosage";
        public static final String PROPERTY_VALUEMETA = "valueMeta";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TaskInput(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * A code or description indicating how the input is intended to be used as part of the task execution.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueBase64Binary() {
            return getString(PROPERTY_VALUEBASE64BINARY);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(PROPERTY_VALUEBOOLEAN);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueCanonical() {
            return getString(PROPERTY_VALUECANONICAL);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueCode() {
            return getString(PROPERTY_VALUECODE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueDate() {
            return getString(PROPERTY_VALUEDATE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueDateTime() {
            return getString(PROPERTY_VALUEDATETIME);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Integer valueDecimal() {
            return data.getInt(PROPERTY_VALUEDECIMAL);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueId() {
            return getString(PROPERTY_VALUEID);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueInstant() {
            return getString(PROPERTY_VALUEINSTANT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Integer valueInteger() {
            return data.getInt(PROPERTY_VALUEINTEGER);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueMarkdown() {
            return getString(PROPERTY_VALUEMARKDOWN);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueOid() {
            return getString(PROPERTY_VALUEOID);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Integer valuePositiveInt() {
            return data.getInt(PROPERTY_VALUEPOSITIVEINT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueString() {
            return getString(PROPERTY_VALUESTRING);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueTime() {
            return getString(PROPERTY_VALUETIME);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Integer valueUnsignedInt() {
            return data.getInt(PROPERTY_VALUEUNSIGNEDINT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueUri() {
            return getString(PROPERTY_VALUEURI);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueUrl() {
            return getString(PROPERTY_VALUEURL);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public String valueUuid() {
            return getString(PROPERTY_VALUEUUID);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Address valueAddress() {
            return getObject(Address.class, PROPERTY_VALUEADDRESS);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Age valueAge() {
            return getObject(Age.class, PROPERTY_VALUEAGE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Annotation valueAnnotation() {
            return getObject(Annotation.class, PROPERTY_VALUEANNOTATION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, PROPERTY_VALUEATTACHMENT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_VALUECODEABLECONCEPT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, PROPERTY_VALUECODING);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public ContactPoint valueContactPoint() {
            return getObject(ContactPoint.class, PROPERTY_VALUECONTACTPOINT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Count valueCount() {
            return getObject(Count.class, PROPERTY_VALUECOUNT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Distance valueDistance() {
            return getObject(Distance.class, PROPERTY_VALUEDISTANCE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Duration valueDuration() {
            return getObject(Duration.class, PROPERTY_VALUEDURATION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public HumanName valueHumanName() {
            return getObject(HumanName.class, PROPERTY_VALUEHUMANNAME);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Identifier valueIdentifier() {
            return getObject(Identifier.class, PROPERTY_VALUEIDENTIFIER);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Money valueMoney() {
            return getObject(Money.class, PROPERTY_VALUEMONEY);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Period valuePeriod() {
            return getObject(Period.class, PROPERTY_VALUEPERIOD);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, PROPERTY_VALUEQUANTITY);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Range valueRange() {
            return getObject(Range.class, PROPERTY_VALUERANGE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Ratio valueRatio() {
            return getObject(Ratio.class, PROPERTY_VALUERATIO);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Reference valueReference() {
            return getObject(Reference.class, PROPERTY_VALUEREFERENCE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public SampledData valueSampledData() {
            return getObject(SampledData.class, PROPERTY_VALUESAMPLEDDATA);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Signature valueSignature() {
            return getObject(Signature.class, PROPERTY_VALUESIGNATURE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Timing valueTiming() {
            return getObject(Timing.class, PROPERTY_VALUETIMING);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public ContactDetail valueContactDetail() {
            return getObject(ContactDetail.class, PROPERTY_VALUECONTACTDETAIL);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Contributor valueContributor() {
            return getObject(Contributor.class, PROPERTY_VALUECONTRIBUTOR);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public DataRequirement valueDataRequirement() {
            return getObject(DataRequirement.class, PROPERTY_VALUEDATAREQUIREMENT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Expression valueExpression() {
            return getObject(Expression.class, PROPERTY_VALUEEXPRESSION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public ParameterDefinition valueParameterDefinition() {
            return getObject(ParameterDefinition.class, PROPERTY_VALUEPARAMETERDEFINITION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public RelatedArtifact valueRelatedArtifact() {
            return getObject(RelatedArtifact.class, PROPERTY_VALUERELATEDARTIFACT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public TriggerDefinition valueTriggerDefinition() {
            return getObject(TriggerDefinition.class, PROPERTY_VALUETRIGGERDEFINITION);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public UsageContext valueUsageContext() {
            return getObject(UsageContext.class, PROPERTY_VALUEUSAGECONTEXT);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Dosage valueDosage() {
            return getObject(Dosage.class, PROPERTY_VALUEDOSAGE);
        }

        /**
         * The value of the input parameter as a basic type.
         */
        public Meta valueMeta() {
            return getObject(Meta.class, PROPERTY_VALUEMETA);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder valueBase64Binary(final String valueBase64Binary) {
                b.add(PROPERTY_VALUEBASE64BINARY, valueBase64Binary);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(PROPERTY_VALUEBOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueCanonical(final String valueCanonical) {
                b.add(PROPERTY_VALUECANONICAL, valueCanonical);
                return this;
            }

            public Builder valueCode(final String valueCode) {
                b.add(PROPERTY_VALUECODE, valueCode);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(PROPERTY_VALUEDATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(PROPERTY_VALUEDATETIME, valueDateTime);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(PROPERTY_VALUEDECIMAL, valueDecimal);
                return this;
            }

            public Builder valueId(final String valueId) {
                b.add(PROPERTY_VALUEID, valueId);
                return this;
            }

            public Builder valueInstant(final String valueInstant) {
                b.add(PROPERTY_VALUEINSTANT, valueInstant);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(PROPERTY_VALUEINTEGER, valueInteger);
                return this;
            }

            public Builder valueMarkdown(final String valueMarkdown) {
                b.add(PROPERTY_VALUEMARKDOWN, valueMarkdown);
                return this;
            }

            public Builder valueOid(final String valueOid) {
                b.add(PROPERTY_VALUEOID, valueOid);
                return this;
            }

            public Builder valuePositiveInt(final Integer valuePositiveInt) {
                b.add(PROPERTY_VALUEPOSITIVEINT, valuePositiveInt);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(PROPERTY_VALUESTRING, valueString);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(PROPERTY_VALUETIME, valueTime);
                return this;
            }

            public Builder valueUnsignedInt(final Integer valueUnsignedInt) {
                b.add(PROPERTY_VALUEUNSIGNEDINT, valueUnsignedInt);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(PROPERTY_VALUEURI, valueUri);
                return this;
            }

            public Builder valueUrl(final String valueUrl) {
                b.add(PROPERTY_VALUEURL, valueUrl);
                return this;
            }

            public Builder valueUuid(final String valueUuid) {
                b.add(PROPERTY_VALUEUUID, valueUuid);
                return this;
            }

            public Builder valueAddress(final Address valueAddress) {
                b.add(PROPERTY_VALUEADDRESS, valueAddress);
                return this;
            }

            public Builder valueAge(final Age valueAge) {
                b.add(PROPERTY_VALUEAGE, valueAge);
                return this;
            }

            public Builder valueAnnotation(final Annotation valueAnnotation) {
                b.add(PROPERTY_VALUEANNOTATION, valueAnnotation);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(PROPERTY_VALUEATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(PROPERTY_VALUECODEABLECONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(PROPERTY_VALUECODING, valueCoding);
                return this;
            }

            public Builder valueContactPoint(final ContactPoint valueContactPoint) {
                b.add(PROPERTY_VALUECONTACTPOINT, valueContactPoint);
                return this;
            }

            public Builder valueCount(final Count valueCount) {
                b.add(PROPERTY_VALUECOUNT, valueCount);
                return this;
            }

            public Builder valueDistance(final Distance valueDistance) {
                b.add(PROPERTY_VALUEDISTANCE, valueDistance);
                return this;
            }

            public Builder valueDuration(final Duration valueDuration) {
                b.add(PROPERTY_VALUEDURATION, valueDuration);
                return this;
            }

            public Builder valueHumanName(final HumanName valueHumanName) {
                b.add(PROPERTY_VALUEHUMANNAME, valueHumanName);
                return this;
            }

            public Builder valueIdentifier(final Identifier valueIdentifier) {
                b.add(PROPERTY_VALUEIDENTIFIER, valueIdentifier);
                return this;
            }

            public Builder valueMoney(final Money valueMoney) {
                b.add(PROPERTY_VALUEMONEY, valueMoney);
                return this;
            }

            public Builder valuePeriod(final Period valuePeriod) {
                b.add(PROPERTY_VALUEPERIOD, valuePeriod);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(PROPERTY_VALUEQUANTITY, valueQuantity);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(PROPERTY_VALUERANGE, valueRange);
                return this;
            }

            public Builder valueRatio(final Ratio valueRatio) {
                b.add(PROPERTY_VALUERATIO, valueRatio);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(PROPERTY_VALUEREFERENCE, valueReference);
                return this;
            }

            public Builder valueSampledData(final SampledData valueSampledData) {
                b.add(PROPERTY_VALUESAMPLEDDATA, valueSampledData);
                return this;
            }

            public Builder valueSignature(final Signature valueSignature) {
                b.add(PROPERTY_VALUESIGNATURE, valueSignature);
                return this;
            }

            public Builder valueTiming(final Timing valueTiming) {
                b.add(PROPERTY_VALUETIMING, valueTiming);
                return this;
            }

            public Builder valueContactDetail(final ContactDetail valueContactDetail) {
                b.add(PROPERTY_VALUECONTACTDETAIL, valueContactDetail);
                return this;
            }

            public Builder valueContributor(final Contributor valueContributor) {
                b.add(PROPERTY_VALUECONTRIBUTOR, valueContributor);
                return this;
            }

            public Builder valueDataRequirement(final DataRequirement valueDataRequirement) {
                b.add(PROPERTY_VALUEDATAREQUIREMENT, valueDataRequirement);
                return this;
            }

            public Builder valueExpression(final Expression valueExpression) {
                b.add(PROPERTY_VALUEEXPRESSION, valueExpression);
                return this;
            }

            public Builder valueParameterDefinition(final ParameterDefinition valueParameterDefinition) {
                b.add(PROPERTY_VALUEPARAMETERDEFINITION, valueParameterDefinition);
                return this;
            }

            public Builder valueRelatedArtifact(final RelatedArtifact valueRelatedArtifact) {
                b.add(PROPERTY_VALUERELATEDARTIFACT, valueRelatedArtifact);
                return this;
            }

            public Builder valueTriggerDefinition(final TriggerDefinition valueTriggerDefinition) {
                b.add(PROPERTY_VALUETRIGGERDEFINITION, valueTriggerDefinition);
                return this;
            }

            public Builder valueUsageContext(final UsageContext valueUsageContext) {
                b.add(PROPERTY_VALUEUSAGECONTEXT, valueUsageContext);
                return this;
            }

            public Builder valueDosage(final Dosage valueDosage) {
                b.add(PROPERTY_VALUEDOSAGE, valueDosage);
                return this;
            }

            public Builder valueMeta(final Meta valueMeta) {
                b.add(PROPERTY_VALUEMETA, valueMeta);
                return this;
            }

            public TaskInput build() {
                return new TaskInput(b.build());
            }
        }
    }

    public static class TaskOutput extends FhirObject {
        public static final String RESOURCE_TYPE = "TaskOutput";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_VALUEBASE64BINARY = "valueBase64Binary";
        public static final String PROPERTY_VALUEBOOLEAN = "valueBoolean";
        public static final String PROPERTY_VALUECANONICAL = "valueCanonical";
        public static final String PROPERTY_VALUECODE = "valueCode";
        public static final String PROPERTY_VALUEDATE = "valueDate";
        public static final String PROPERTY_VALUEDATETIME = "valueDateTime";
        public static final String PROPERTY_VALUEDECIMAL = "valueDecimal";
        public static final String PROPERTY_VALUEID = "valueId";
        public static final String PROPERTY_VALUEINSTANT = "valueInstant";
        public static final String PROPERTY_VALUEINTEGER = "valueInteger";
        public static final String PROPERTY_VALUEMARKDOWN = "valueMarkdown";
        public static final String PROPERTY_VALUEOID = "valueOid";
        public static final String PROPERTY_VALUEPOSITIVEINT = "valuePositiveInt";
        public static final String PROPERTY_VALUESTRING = "valueString";
        public static final String PROPERTY_VALUETIME = "valueTime";
        public static final String PROPERTY_VALUEUNSIGNEDINT = "valueUnsignedInt";
        public static final String PROPERTY_VALUEURI = "valueUri";
        public static final String PROPERTY_VALUEURL = "valueUrl";
        public static final String PROPERTY_VALUEUUID = "valueUuid";
        public static final String PROPERTY_VALUEADDRESS = "valueAddress";
        public static final String PROPERTY_VALUEAGE = "valueAge";
        public static final String PROPERTY_VALUEANNOTATION = "valueAnnotation";
        public static final String PROPERTY_VALUEATTACHMENT = "valueAttachment";
        public static final String PROPERTY_VALUECODEABLECONCEPT = "valueCodeableConcept";
        public static final String PROPERTY_VALUECODING = "valueCoding";
        public static final String PROPERTY_VALUECONTACTPOINT = "valueContactPoint";
        public static final String PROPERTY_VALUECOUNT = "valueCount";
        public static final String PROPERTY_VALUEDISTANCE = "valueDistance";
        public static final String PROPERTY_VALUEDURATION = "valueDuration";
        public static final String PROPERTY_VALUEHUMANNAME = "valueHumanName";
        public static final String PROPERTY_VALUEIDENTIFIER = "valueIdentifier";
        public static final String PROPERTY_VALUEMONEY = "valueMoney";
        public static final String PROPERTY_VALUEPERIOD = "valuePeriod";
        public static final String PROPERTY_VALUEQUANTITY = "valueQuantity";
        public static final String PROPERTY_VALUERANGE = "valueRange";
        public static final String PROPERTY_VALUERATIO = "valueRatio";
        public static final String PROPERTY_VALUEREFERENCE = "valueReference";
        public static final String PROPERTY_VALUESAMPLEDDATA = "valueSampledData";
        public static final String PROPERTY_VALUESIGNATURE = "valueSignature";
        public static final String PROPERTY_VALUETIMING = "valueTiming";
        public static final String PROPERTY_VALUECONTACTDETAIL = "valueContactDetail";
        public static final String PROPERTY_VALUECONTRIBUTOR = "valueContributor";
        public static final String PROPERTY_VALUEDATAREQUIREMENT = "valueDataRequirement";
        public static final String PROPERTY_VALUEEXPRESSION = "valueExpression";
        public static final String PROPERTY_VALUEPARAMETERDEFINITION = "valueParameterDefinition";
        public static final String PROPERTY_VALUERELATEDARTIFACT = "valueRelatedArtifact";
        public static final String PROPERTY_VALUETRIGGERDEFINITION = "valueTriggerDefinition";
        public static final String PROPERTY_VALUEUSAGECONTEXT = "valueUsageContext";
        public static final String PROPERTY_VALUEDOSAGE = "valueDosage";
        public static final String PROPERTY_VALUEMETA = "valueMeta";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TaskOutput(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * The name of the Output parameter.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueBase64Binary() {
            return getString(PROPERTY_VALUEBASE64BINARY);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(PROPERTY_VALUEBOOLEAN);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueCanonical() {
            return getString(PROPERTY_VALUECANONICAL);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueCode() {
            return getString(PROPERTY_VALUECODE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueDate() {
            return getString(PROPERTY_VALUEDATE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueDateTime() {
            return getString(PROPERTY_VALUEDATETIME);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Integer valueDecimal() {
            return data.getInt(PROPERTY_VALUEDECIMAL);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueId() {
            return getString(PROPERTY_VALUEID);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueInstant() {
            return getString(PROPERTY_VALUEINSTANT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Integer valueInteger() {
            return data.getInt(PROPERTY_VALUEINTEGER);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueMarkdown() {
            return getString(PROPERTY_VALUEMARKDOWN);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueOid() {
            return getString(PROPERTY_VALUEOID);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Integer valuePositiveInt() {
            return data.getInt(PROPERTY_VALUEPOSITIVEINT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueString() {
            return getString(PROPERTY_VALUESTRING);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueTime() {
            return getString(PROPERTY_VALUETIME);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Integer valueUnsignedInt() {
            return data.getInt(PROPERTY_VALUEUNSIGNEDINT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueUri() {
            return getString(PROPERTY_VALUEURI);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueUrl() {
            return getString(PROPERTY_VALUEURL);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public String valueUuid() {
            return getString(PROPERTY_VALUEUUID);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Address valueAddress() {
            return getObject(Address.class, PROPERTY_VALUEADDRESS);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Age valueAge() {
            return getObject(Age.class, PROPERTY_VALUEAGE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Annotation valueAnnotation() {
            return getObject(Annotation.class, PROPERTY_VALUEANNOTATION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, PROPERTY_VALUEATTACHMENT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_VALUECODEABLECONCEPT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, PROPERTY_VALUECODING);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public ContactPoint valueContactPoint() {
            return getObject(ContactPoint.class, PROPERTY_VALUECONTACTPOINT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Count valueCount() {
            return getObject(Count.class, PROPERTY_VALUECOUNT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Distance valueDistance() {
            return getObject(Distance.class, PROPERTY_VALUEDISTANCE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Duration valueDuration() {
            return getObject(Duration.class, PROPERTY_VALUEDURATION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public HumanName valueHumanName() {
            return getObject(HumanName.class, PROPERTY_VALUEHUMANNAME);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Identifier valueIdentifier() {
            return getObject(Identifier.class, PROPERTY_VALUEIDENTIFIER);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Money valueMoney() {
            return getObject(Money.class, PROPERTY_VALUEMONEY);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Period valuePeriod() {
            return getObject(Period.class, PROPERTY_VALUEPERIOD);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, PROPERTY_VALUEQUANTITY);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Range valueRange() {
            return getObject(Range.class, PROPERTY_VALUERANGE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Ratio valueRatio() {
            return getObject(Ratio.class, PROPERTY_VALUERATIO);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Reference valueReference() {
            return getObject(Reference.class, PROPERTY_VALUEREFERENCE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public SampledData valueSampledData() {
            return getObject(SampledData.class, PROPERTY_VALUESAMPLEDDATA);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Signature valueSignature() {
            return getObject(Signature.class, PROPERTY_VALUESIGNATURE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Timing valueTiming() {
            return getObject(Timing.class, PROPERTY_VALUETIMING);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public ContactDetail valueContactDetail() {
            return getObject(ContactDetail.class, PROPERTY_VALUECONTACTDETAIL);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Contributor valueContributor() {
            return getObject(Contributor.class, PROPERTY_VALUECONTRIBUTOR);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public DataRequirement valueDataRequirement() {
            return getObject(DataRequirement.class, PROPERTY_VALUEDATAREQUIREMENT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Expression valueExpression() {
            return getObject(Expression.class, PROPERTY_VALUEEXPRESSION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public ParameterDefinition valueParameterDefinition() {
            return getObject(ParameterDefinition.class, PROPERTY_VALUEPARAMETERDEFINITION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public RelatedArtifact valueRelatedArtifact() {
            return getObject(RelatedArtifact.class, PROPERTY_VALUERELATEDARTIFACT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public TriggerDefinition valueTriggerDefinition() {
            return getObject(TriggerDefinition.class, PROPERTY_VALUETRIGGERDEFINITION);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public UsageContext valueUsageContext() {
            return getObject(UsageContext.class, PROPERTY_VALUEUSAGECONTEXT);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Dosage valueDosage() {
            return getObject(Dosage.class, PROPERTY_VALUEDOSAGE);
        }

        /**
         * The value of the Output parameter as a basic type.
         */
        public Meta valueMeta() {
            return getObject(Meta.class, PROPERTY_VALUEMETA);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder valueBase64Binary(final String valueBase64Binary) {
                b.add(PROPERTY_VALUEBASE64BINARY, valueBase64Binary);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(PROPERTY_VALUEBOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueCanonical(final String valueCanonical) {
                b.add(PROPERTY_VALUECANONICAL, valueCanonical);
                return this;
            }

            public Builder valueCode(final String valueCode) {
                b.add(PROPERTY_VALUECODE, valueCode);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(PROPERTY_VALUEDATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(PROPERTY_VALUEDATETIME, valueDateTime);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(PROPERTY_VALUEDECIMAL, valueDecimal);
                return this;
            }

            public Builder valueId(final String valueId) {
                b.add(PROPERTY_VALUEID, valueId);
                return this;
            }

            public Builder valueInstant(final String valueInstant) {
                b.add(PROPERTY_VALUEINSTANT, valueInstant);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(PROPERTY_VALUEINTEGER, valueInteger);
                return this;
            }

            public Builder valueMarkdown(final String valueMarkdown) {
                b.add(PROPERTY_VALUEMARKDOWN, valueMarkdown);
                return this;
            }

            public Builder valueOid(final String valueOid) {
                b.add(PROPERTY_VALUEOID, valueOid);
                return this;
            }

            public Builder valuePositiveInt(final Integer valuePositiveInt) {
                b.add(PROPERTY_VALUEPOSITIVEINT, valuePositiveInt);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(PROPERTY_VALUESTRING, valueString);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(PROPERTY_VALUETIME, valueTime);
                return this;
            }

            public Builder valueUnsignedInt(final Integer valueUnsignedInt) {
                b.add(PROPERTY_VALUEUNSIGNEDINT, valueUnsignedInt);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(PROPERTY_VALUEURI, valueUri);
                return this;
            }

            public Builder valueUrl(final String valueUrl) {
                b.add(PROPERTY_VALUEURL, valueUrl);
                return this;
            }

            public Builder valueUuid(final String valueUuid) {
                b.add(PROPERTY_VALUEUUID, valueUuid);
                return this;
            }

            public Builder valueAddress(final Address valueAddress) {
                b.add(PROPERTY_VALUEADDRESS, valueAddress);
                return this;
            }

            public Builder valueAge(final Age valueAge) {
                b.add(PROPERTY_VALUEAGE, valueAge);
                return this;
            }

            public Builder valueAnnotation(final Annotation valueAnnotation) {
                b.add(PROPERTY_VALUEANNOTATION, valueAnnotation);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(PROPERTY_VALUEATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(PROPERTY_VALUECODEABLECONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(PROPERTY_VALUECODING, valueCoding);
                return this;
            }

            public Builder valueContactPoint(final ContactPoint valueContactPoint) {
                b.add(PROPERTY_VALUECONTACTPOINT, valueContactPoint);
                return this;
            }

            public Builder valueCount(final Count valueCount) {
                b.add(PROPERTY_VALUECOUNT, valueCount);
                return this;
            }

            public Builder valueDistance(final Distance valueDistance) {
                b.add(PROPERTY_VALUEDISTANCE, valueDistance);
                return this;
            }

            public Builder valueDuration(final Duration valueDuration) {
                b.add(PROPERTY_VALUEDURATION, valueDuration);
                return this;
            }

            public Builder valueHumanName(final HumanName valueHumanName) {
                b.add(PROPERTY_VALUEHUMANNAME, valueHumanName);
                return this;
            }

            public Builder valueIdentifier(final Identifier valueIdentifier) {
                b.add(PROPERTY_VALUEIDENTIFIER, valueIdentifier);
                return this;
            }

            public Builder valueMoney(final Money valueMoney) {
                b.add(PROPERTY_VALUEMONEY, valueMoney);
                return this;
            }

            public Builder valuePeriod(final Period valuePeriod) {
                b.add(PROPERTY_VALUEPERIOD, valuePeriod);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(PROPERTY_VALUEQUANTITY, valueQuantity);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(PROPERTY_VALUERANGE, valueRange);
                return this;
            }

            public Builder valueRatio(final Ratio valueRatio) {
                b.add(PROPERTY_VALUERATIO, valueRatio);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(PROPERTY_VALUEREFERENCE, valueReference);
                return this;
            }

            public Builder valueSampledData(final SampledData valueSampledData) {
                b.add(PROPERTY_VALUESAMPLEDDATA, valueSampledData);
                return this;
            }

            public Builder valueSignature(final Signature valueSignature) {
                b.add(PROPERTY_VALUESIGNATURE, valueSignature);
                return this;
            }

            public Builder valueTiming(final Timing valueTiming) {
                b.add(PROPERTY_VALUETIMING, valueTiming);
                return this;
            }

            public Builder valueContactDetail(final ContactDetail valueContactDetail) {
                b.add(PROPERTY_VALUECONTACTDETAIL, valueContactDetail);
                return this;
            }

            public Builder valueContributor(final Contributor valueContributor) {
                b.add(PROPERTY_VALUECONTRIBUTOR, valueContributor);
                return this;
            }

            public Builder valueDataRequirement(final DataRequirement valueDataRequirement) {
                b.add(PROPERTY_VALUEDATAREQUIREMENT, valueDataRequirement);
                return this;
            }

            public Builder valueExpression(final Expression valueExpression) {
                b.add(PROPERTY_VALUEEXPRESSION, valueExpression);
                return this;
            }

            public Builder valueParameterDefinition(final ParameterDefinition valueParameterDefinition) {
                b.add(PROPERTY_VALUEPARAMETERDEFINITION, valueParameterDefinition);
                return this;
            }

            public Builder valueRelatedArtifact(final RelatedArtifact valueRelatedArtifact) {
                b.add(PROPERTY_VALUERELATEDARTIFACT, valueRelatedArtifact);
                return this;
            }

            public Builder valueTriggerDefinition(final TriggerDefinition valueTriggerDefinition) {
                b.add(PROPERTY_VALUETRIGGERDEFINITION, valueTriggerDefinition);
                return this;
            }

            public Builder valueUsageContext(final UsageContext valueUsageContext) {
                b.add(PROPERTY_VALUEUSAGECONTEXT, valueUsageContext);
                return this;
            }

            public Builder valueDosage(final Dosage valueDosage) {
                b.add(PROPERTY_VALUEDOSAGE, valueDosage);
                return this;
            }

            public Builder valueMeta(final Meta valueMeta) {
                b.add(PROPERTY_VALUEMETA, valueMeta);
                return this;
            }

            public TaskOutput build() {
                return new TaskOutput(b.build());
            }
        }
    }

    public static class TaskRestriction extends FhirObject {
        public static final String RESOURCE_TYPE = "TaskRestriction";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIEREXTENSION = "modifierExtension";
        public static final String PROPERTY_REPETITIONS = "repetitions";
        public static final String PROPERTY_PERIOD = "period";
        public static final String PROPERTY_RECIPIENT = "recipient";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public TaskRestriction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.

Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIEREXTENSION);
        }

        /**
         * Indicates the number of times the requested action should occur.
         */
        public Integer repetitions() {
            return data.getInt(PROPERTY_REPETITIONS);
        }

        /**
         * Over what time-period is fulfillment sought.
         */
        public Period period() {
            return getObject(Period.class, PROPERTY_PERIOD);
        }

        /**
         * For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?
         */
        public java.util.List<Reference> recipient() {
            return getList(Reference.class, PROPERTY_RECIPIENT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIEREXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder repetitions(final Integer repetitions) {
                b.add(PROPERTY_REPETITIONS, repetitions);
                return this;
            }

            public Builder period(final Period period) {
                b.add(PROPERTY_PERIOD, period);
                return this;
            }

            public Builder recipient(final java.util.List<Reference> recipient) {
                b.add(PROPERTY_RECIPIENT, FhirObject.toArray(recipient));
                return this;
            }

            public TaskRestriction build() {
                return new TaskRestriction(b.build());
            }
        }
    }
}
