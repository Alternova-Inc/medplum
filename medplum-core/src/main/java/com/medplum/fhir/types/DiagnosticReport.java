/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

public class DiagnosticReport extends FhirResource {
    public static final String RESOURCE_TYPE = "DiagnosticReport";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_BASED_ON = "basedOn";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_EFFECTIVE_DATE_TIME = "effectiveDateTime";
    public static final String PROPERTY_EFFECTIVE_PERIOD = "effectivePeriod";
    public static final String PROPERTY_ISSUED = "issued";
    public static final String PROPERTY_PERFORMER = "performer";
    public static final String PROPERTY_RESULTS_INTERPRETER = "resultsInterpreter";
    public static final String PROPERTY_SPECIMEN = "specimen";
    public static final String PROPERTY_RESULT = "result";
    public static final String PROPERTY_IMAGING_STUDY = "imagingStudy";
    public static final String PROPERTY_MEDIA = "media";
    public static final String PROPERTY_CONCLUSION = "conclusion";
    public static final String PROPERTY_CONCLUSION_CODE = "conclusionCode";
    public static final String PROPERTY_PRESENTED_FORM = "presentedForm";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DiagnosticReport(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public String implicitRules() {
        return getString(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Identifiers assigned to this report by the performer or other systems.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * Details concerning a service requested.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASED_ON);
    }

    /**
     * The status of the diagnostic report.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * A code that classifies the clinical discipline, department or
     * diagnostic service that created the report (e.g. cardiology,
     * biochemistry, hematology, MRI). This is used for searching, sorting
     * and display purposes.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, PROPERTY_CATEGORY);
    }

    /**
     * A code or name that describes this diagnostic report.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, PROPERTY_CODE);
    }

    /**
     * The subject of the report. Usually, but not always, this is a patient.
     * However, diagnostic services also perform analyses on specimens
     * collected from a variety of other sources.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * The healthcare event  (e.g. a patient and healthcare provider
     * interaction) which this DiagnosticReport is about.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * The time or time-period the observed values are related to. When the
     * subject of the report is a patient, this is usually either the time of
     * the procedure or of specimen collection(s), but very often the source
     * of the date/time is not known, only the date/time itself.
     */
    public String effectiveDateTime() {
        return getString(PROPERTY_EFFECTIVE_DATE_TIME);
    }

    /**
     * The time or time-period the observed values are related to. When the
     * subject of the report is a patient, this is usually either the time of
     * the procedure or of specimen collection(s), but very often the source
     * of the date/time is not known, only the date/time itself.
     */
    public Period effectivePeriod() {
        return getObject(Period.class, PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * The date and time that this version of the report was made available
     * to providers, typically after the report was reviewed and verified.
     */
    public java.time.Instant issued() {
        return java.time.Instant.parse(data.getString(PROPERTY_ISSUED));
    }

    /**
     * The diagnostic service that is responsible for issuing the report.
     */
    public java.util.List<Reference> performer() {
        return getList(Reference.class, PROPERTY_PERFORMER);
    }

    /**
     * The practitioner or organization that is responsible for the report's
     * conclusions and interpretations.
     */
    public java.util.List<Reference> resultsInterpreter() {
        return getList(Reference.class, PROPERTY_RESULTS_INTERPRETER);
    }

    /**
     * Details about the specimens on which this diagnostic report is based.
     */
    public java.util.List<Reference> specimen() {
        return getList(Reference.class, PROPERTY_SPECIMEN);
    }

    /**
     * [Observations](observation.html)  that are part of this diagnostic
     * report.
     */
    public java.util.List<Reference> result() {
        return getList(Reference.class, PROPERTY_RESULT);
    }

    /**
     * One or more links to full details of any imaging performed during the
     * diagnostic investigation. Typically, this is imaging performed by
     * DICOM enabled modalities, but this is not required. A fully enabled
     * PACS viewer can use this information to provide views of the source
     * images.
     */
    public java.util.List<Reference> imagingStudy() {
        return getList(Reference.class, PROPERTY_IMAGING_STUDY);
    }

    /**
     * A list of key images associated with this report. The images are
     * generally created during the diagnostic process, and may be directly
     * of the patient, or of treated specimens (i.e. slides of interest).
     */
    public java.util.List<DiagnosticReportMedia> media() {
        return getList(DiagnosticReportMedia.class, PROPERTY_MEDIA);
    }

    /**
     * Concise and clinically contextualized summary conclusion
     * (interpretation/impression) of the diagnostic report.
     */
    public String conclusion() {
        return getString(PROPERTY_CONCLUSION);
    }

    /**
     * One or more codes that represent the summary conclusion
     * (interpretation/impression) of the diagnostic report.
     */
    public java.util.List<CodeableConcept> conclusionCode() {
        return getList(CodeableConcept.class, PROPERTY_CONCLUSION_CODE);
    }

    /**
     * Rich text representation of the entire result as issued by the
     * diagnostic service. Multiple formats are allowed but they SHALL be
     * semantically equivalent.
     */
    public java.util.List<Attachment> presentedForm() {
        return getList(Attachment.class, PROPERTY_PRESENTED_FORM);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final String implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules);
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder effectiveDateTime(final String effectiveDateTime) {
            b.add(PROPERTY_EFFECTIVE_DATE_TIME, effectiveDateTime);
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder issued(final java.time.Instant issued) {
            b.add(PROPERTY_ISSUED, issued.toString());
            return this;
        }

        public Builder performer(final java.util.List<Reference> performer) {
            b.add(PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder resultsInterpreter(final java.util.List<Reference> resultsInterpreter) {
            b.add(PROPERTY_RESULTS_INTERPRETER, FhirObject.toArray(resultsInterpreter));
            return this;
        }

        public Builder specimen(final java.util.List<Reference> specimen) {
            b.add(PROPERTY_SPECIMEN, FhirObject.toArray(specimen));
            return this;
        }

        public Builder result(final java.util.List<Reference> result) {
            b.add(PROPERTY_RESULT, FhirObject.toArray(result));
            return this;
        }

        public Builder imagingStudy(final java.util.List<Reference> imagingStudy) {
            b.add(PROPERTY_IMAGING_STUDY, FhirObject.toArray(imagingStudy));
            return this;
        }

        public Builder media(final java.util.List<DiagnosticReportMedia> media) {
            b.add(PROPERTY_MEDIA, FhirObject.toArray(media));
            return this;
        }

        public Builder conclusion(final String conclusion) {
            b.add(PROPERTY_CONCLUSION, conclusion);
            return this;
        }

        public Builder conclusionCode(final java.util.List<CodeableConcept> conclusionCode) {
            b.add(PROPERTY_CONCLUSION_CODE, FhirObject.toArray(conclusionCode));
            return this;
        }

        public Builder presentedForm(final java.util.List<Attachment> presentedForm) {
            b.add(PROPERTY_PRESENTED_FORM, FhirObject.toArray(presentedForm));
            return this;
        }

        public DiagnosticReport build() {
            return new DiagnosticReport(b.build());
        }
    }

    public static class DiagnosticReportMedia extends FhirObject {
        public static final String RESOURCE_TYPE = "DiagnosticReportMedia";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_COMMENT = "comment";
        public static final String PROPERTY_LINK = "link";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DiagnosticReportMedia(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A comment about the image. Typically, this is used to provide an
         * explanation for why the image is included, or to draw the viewer's
         * attention to important features.
         */
        public String comment() {
            return getString(PROPERTY_COMMENT);
        }

        /**
         * Reference to the image source.
         */
        public Reference link() {
            return getObject(Reference.class, PROPERTY_LINK);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder comment(final String comment) {
                b.add(PROPERTY_COMMENT, comment);
                return this;
            }

            public Builder link(final Reference link) {
                b.add(PROPERTY_LINK, link);
                return this;
            }

            public DiagnosticReportMedia build() {
                return new DiagnosticReportMedia(b.build());
            }
        }
    }
}
