/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A record of a medication that is being consumed by a patient.   A
 * MedicationStatement may indicate that the patient may be taking the
 * medication now or has taken the medication in the past or will be
 * taking the medication in the future.  The source of this information
 * can be the patient, significant other (such as a family member or
 * spouse), or a clinician.  A common scenario where this information is
 * captured is during the history taking process during a patient visit
 * or stay.   The medication information may come from sources such as
 * the patient's memory, from a prescription bottle,  or from a list of
 * medications the patient, clinician or other party maintains.
 *
 * The primary difference between a medication statement and a medication
 * administration is that the medication administration has complete
 * administration information and is based on actual administration
 * information from the person who administered the medication.  A
 * medication statement is often, if not always, less specific.  There is
 * no required date/time when the medication was administered, in fact we
 * only know that a source has reported the patient is taking this
 * medication, where details such as time, quantity, or rate or even
 * medication product may be incomplete or missing or less precise.  As
 * stated earlier, the medication statement information may come from the
 * patient's memory, from a prescription bottle or from a list of
 * medications the patient, clinician or other party maintains.
 * Medication administration is more formal and is not missing detailed
 * information.
 */
public class MedicationStatement extends FhirResource {
    public static final String RESOURCE_TYPE = "MedicationStatement";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicationStatement(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(FhirPropertyNames.PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, FhirPropertyNames.PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, FhirPropertyNames.PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Identifiers associated with this Medication Statement that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate. They are business
     * identifiers assigned to this resource by the performer or other
     * systems and remain constant as the resource is updated and propagates
     * from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by
     * this event.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * A larger event of which this particular event is a component or step.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * A code representing the patient or other source's judgment about the
     * state of the medication used that this statement is about.  Generally,
     * this will be active or completed.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Captures the reason for the current state of the MedicationStatement.
     */
    public java.util.List<CodeableConcept> statusReason() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_STATUS_REASON);
    }

    /**
     * Indicates where the medication is expected to be consumed or
     * administered.
     */
    public CodeableConcept category() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
    }

    /**
     * Identifies the medication being administered. This is either a link to
     * a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    public CodeableConcept medicationCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MEDICATION_CODEABLE_CONCEPT);
    }

    /**
     * Identifies the medication being administered. This is either a link to
     * a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    public Reference medicationReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MEDICATION_REFERENCE);
    }

    /**
     * The person, animal or group who is/was taking the medication.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * MedicationStatement.
     */
    public Reference context() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_CONTEXT);
    }

    /**
     * The interval of time during which it is being asserted that the
     * patient is/was/will be taking the medication (or was not taking, when
     * the MedicationStatement.taken element is No).
     */
    public String effectiveDateTime() {
        return getString(FhirPropertyNames.PROPERTY_EFFECTIVE_DATE_TIME);
    }

    /**
     * The interval of time during which it is being asserted that the
     * patient is/was/will be taking the medication (or was not taking, when
     * the MedicationStatement.taken element is No).
     */
    public Period effectivePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD);
    }

    /**
     * The date when the medication statement was asserted by the information
     * source.
     */
    public java.time.Instant dateAsserted() {
        return getInstant(FhirPropertyNames.PROPERTY_DATE_ASSERTED);
    }

    /**
     * The person or organization that provided the information about the
     * taking of this medication. Note: Use derivedFrom when a
     * MedicationStatement is derived from other resources, e.g. Claim or
     * MedicationRequest.
     */
    public Reference informationSource() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_INFORMATION_SOURCE);
    }

    /**
     * Allows linking the MedicationStatement to the underlying
     * MedicationRequest, or to other information that supports or is used to
     * derive the MedicationStatement.
     */
    public java.util.List<Reference> derivedFrom() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_DERIVED_FROM);
    }

    /**
     * A reason for why the medication is being/was taken.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * Condition or observation that supports why the medication is being/was
     * taken.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_REASON_REFERENCE);
    }

    /**
     * Provides extra information about the medication statement that is not
     * conveyed by the other attributes.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Indicates how the medication is/was or should be taken by the patient.
     */
    public java.util.List<Dosage> dosage() {
        return getList(Dosage.class, FhirPropertyNames.PROPERTY_DOSAGE);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(FhirPropertyNames.PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(FhirPropertyNames.PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(FhirPropertyNames.PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(FhirPropertyNames.PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(FhirPropertyNames.PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReason(final java.util.List<CodeableConcept> statusReason) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_REASON, FhirObject.toArray(statusReason));
            return this;
        }

        public Builder category(final CodeableConcept category) {
            b.add(FhirPropertyNames.PROPERTY_CATEGORY, category);
            return this;
        }

        public Builder medicationCodeableConcept(final CodeableConcept medicationCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_MEDICATION_CODEABLE_CONCEPT, medicationCodeableConcept);
            return this;
        }

        public Builder medicationReference(final Reference medicationReference) {
            b.add(FhirPropertyNames.PROPERTY_MEDICATION_REFERENCE, medicationReference);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder context(final Reference context) {
            b.add(FhirPropertyNames.PROPERTY_CONTEXT, context);
            return this;
        }

        public Builder effectiveDateTime(final String effectiveDateTime) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_DATE_TIME, effectiveDateTime);
            return this;
        }

        public Builder effectivePeriod(final Period effectivePeriod) {
            b.add(FhirPropertyNames.PROPERTY_EFFECTIVE_PERIOD, effectivePeriod);
            return this;
        }

        public Builder dateAsserted(final java.time.Instant dateAsserted) {
            b.add(FhirPropertyNames.PROPERTY_DATE_ASSERTED, dateAsserted.toString());
            return this;
        }

        public Builder informationSource(final Reference informationSource) {
            b.add(FhirPropertyNames.PROPERTY_INFORMATION_SOURCE, informationSource);
            return this;
        }

        public Builder derivedFrom(final java.util.List<Reference> derivedFrom) {
            b.add(FhirPropertyNames.PROPERTY_DERIVED_FROM, FhirObject.toArray(derivedFrom));
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(FhirPropertyNames.PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder dosage(final java.util.List<Dosage> dosage) {
            b.add(FhirPropertyNames.PROPERTY_DOSAGE, FhirObject.toArray(dosage));
            return this;
        }

        public MedicationStatement build() {
            return new MedicationStatement(b.build());
        }
    }
}
