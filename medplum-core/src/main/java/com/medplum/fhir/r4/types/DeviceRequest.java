/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

/**
 * Represents a request for a patient to employ a medical device. The
 * device may be an implantable device, or an external assistive device,
 * such as a walker.
 */
public class DeviceRequest extends FhirResource {
    public static final String RESOURCE_TYPE = "DeviceRequest";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_INSTANTIATES_CANONICAL = "instantiatesCanonical";
    public static final String PROPERTY_INSTANTIATES_URI = "instantiatesUri";
    public static final String PROPERTY_BASED_ON = "basedOn";
    public static final String PROPERTY_PRIOR_REQUEST = "priorRequest";
    public static final String PROPERTY_GROUP_IDENTIFIER = "groupIdentifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_INTENT = "intent";
    public static final String PROPERTY_PRIORITY = "priority";
    public static final String PROPERTY_CODE_REFERENCE = "codeReference";
    public static final String PROPERTY_CODE_CODEABLE_CONCEPT = "codeCodeableConcept";
    public static final String PROPERTY_PARAMETER = "parameter";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_OCCURRENCE_DATE_TIME = "occurrenceDateTime";
    public static final String PROPERTY_OCCURRENCE_PERIOD = "occurrencePeriod";
    public static final String PROPERTY_OCCURRENCE_TIMING = "occurrenceTiming";
    public static final String PROPERTY_AUTHORED_ON = "authoredOn";
    public static final String PROPERTY_REQUESTER = "requester";
    public static final String PROPERTY_PERFORMER_TYPE = "performerType";
    public static final String PROPERTY_PERFORMER = "performer";
    public static final String PROPERTY_REASON_CODE = "reasonCode";
    public static final String PROPERTY_REASON_REFERENCE = "reasonReference";
    public static final String PROPERTY_INSURANCE = "insurance";
    public static final String PROPERTY_SUPPORTING_INFO = "supportingInfo";
    public static final String PROPERTY_NOTE = "note";
    public static final String PROPERTY_RELEVANT_HISTORY = "relevantHistory";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public DeviceRequest(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Identifiers assigned to this order by the orderer or by the receiver.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or
     * other definition that is adhered to in whole or in part by this
     * DeviceRequest.
     */
    public java.util.List<String> instantiatesCanonical() {
        return getList(String.class, PROPERTY_INSTANTIATES_CANONICAL);
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this DeviceRequest.
     */
    public java.util.List<java.net.URI> instantiatesUri() {
        return getList(java.net.URI.class, PROPERTY_INSTANTIATES_URI);
    }

    /**
     * Plan/proposal/order fulfilled by this request.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASED_ON);
    }

    /**
     * The request takes the place of the referenced completed or terminated
     * request(s).
     */
    public java.util.List<Reference> priorRequest() {
        return getList(Reference.class, PROPERTY_PRIOR_REQUEST);
    }

    /**
     * Composite request this is part of.
     */
    public Identifier groupIdentifier() {
        return getObject(Identifier.class, PROPERTY_GROUP_IDENTIFIER);
    }

    /**
     * The status of the request.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Whether the request is a proposal, plan, an original order or a reflex
     * order.
     */
    public String intent() {
        return getString(PROPERTY_INTENT);
    }

    /**
     * Indicates how quickly the {{title}} should be addressed with respect
     * to other requests.
     */
    public String priority() {
        return getString(PROPERTY_PRIORITY);
    }

    /**
     * The details of the device to be used.
     */
    public Reference codeReference() {
        return getObject(Reference.class, PROPERTY_CODE_REFERENCE);
    }

    /**
     * The details of the device to be used.
     */
    public CodeableConcept codeCodeableConcept() {
        return getObject(CodeableConcept.class, PROPERTY_CODE_CODEABLE_CONCEPT);
    }

    /**
     * Specific parameters for the ordered item.  For example, the prism
     * value for lenses.
     */
    public java.util.List<DeviceRequestParameter> parameter() {
        return getList(DeviceRequestParameter.class, PROPERTY_PARAMETER);
    }

    /**
     * The patient who will use the device.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * An encounter that provides additional context in which this request is
     * made.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * The timing schedule for the use of the device. The Schedule data type
     * allows many different expressions, for example. &quot;Every 8 hours&quot;;
     * &quot;Three times a day&quot;; &quot;1/2 an hour before breakfast for 10 days from
     * 23-Dec 2011:&quot;; &quot;15 Oct 2013, 17 Oct 2013 and 1 Nov 2013&quot;.
     */
    public String occurrenceDateTime() {
        return getString(PROPERTY_OCCURRENCE_DATE_TIME);
    }

    /**
     * The timing schedule for the use of the device. The Schedule data type
     * allows many different expressions, for example. &quot;Every 8 hours&quot;;
     * &quot;Three times a day&quot;; &quot;1/2 an hour before breakfast for 10 days from
     * 23-Dec 2011:&quot;; &quot;15 Oct 2013, 17 Oct 2013 and 1 Nov 2013&quot;.
     */
    public Period occurrencePeriod() {
        return getObject(Period.class, PROPERTY_OCCURRENCE_PERIOD);
    }

    /**
     * The timing schedule for the use of the device. The Schedule data type
     * allows many different expressions, for example. &quot;Every 8 hours&quot;;
     * &quot;Three times a day&quot;; &quot;1/2 an hour before breakfast for 10 days from
     * 23-Dec 2011:&quot;; &quot;15 Oct 2013, 17 Oct 2013 and 1 Nov 2013&quot;.
     */
    public Timing occurrenceTiming() {
        return getObject(Timing.class, PROPERTY_OCCURRENCE_TIMING);
    }

    /**
     * When the request transitioned to being actionable.
     */
    public java.time.Instant authoredOn() {
        return getInstant(PROPERTY_AUTHORED_ON);
    }

    /**
     * The individual who initiated the request and has responsibility for
     * its activation.
     */
    public Reference requester() {
        return getObject(Reference.class, PROPERTY_REQUESTER);
    }

    /**
     * Desired type of performer for doing the diagnostic testing.
     */
    public CodeableConcept performerType() {
        return getObject(CodeableConcept.class, PROPERTY_PERFORMER_TYPE);
    }

    /**
     * The desired performer for doing the diagnostic testing.
     */
    public Reference performer() {
        return getObject(Reference.class, PROPERTY_PERFORMER);
    }

    /**
     * Reason or justification for the use of this device.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, PROPERTY_REASON_CODE);
    }

    /**
     * Reason or justification for the use of this device.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, PROPERTY_REASON_REFERENCE);
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or
     * pre-determinations that may be required for delivering the requested
     * service.
     */
    public java.util.List<Reference> insurance() {
        return getList(Reference.class, PROPERTY_INSURANCE);
    }

    /**
     * Additional clinical information about the patient that may influence
     * the request fulfilment.  For example, this may include where on the
     * subject's body the device will be used (i.e. the target site).
     */
    public java.util.List<Reference> supportingInfo() {
        return getList(Reference.class, PROPERTY_SUPPORTING_INFO);
    }

    /**
     * Details about this request that were not represented at all or
     * sufficiently in one of the attributes provided in a class. These may
     * include for example a comment, an instruction, or a note associated
     * with the statement.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    /**
     * Key events in the history of the request.
     */
    public java.util.List<Reference> relevantHistory() {
        return getList(Reference.class, PROPERTY_RELEVANT_HISTORY);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
            b.add(PROPERTY_INSTANTIATES_CANONICAL, FhirObject.toStringArray(instantiatesCanonical));
            return this;
        }

        public Builder instantiatesUri(final java.util.List<java.net.URI> instantiatesUri) {
            b.add(PROPERTY_INSTANTIATES_URI, FhirObject.toUriArray(instantiatesUri));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder priorRequest(final java.util.List<Reference> priorRequest) {
            b.add(PROPERTY_PRIOR_REQUEST, FhirObject.toArray(priorRequest));
            return this;
        }

        public Builder groupIdentifier(final Identifier groupIdentifier) {
            b.add(PROPERTY_GROUP_IDENTIFIER, groupIdentifier);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(PROPERTY_INTENT, intent);
            return this;
        }

        public Builder priority(final String priority) {
            b.add(PROPERTY_PRIORITY, priority);
            return this;
        }

        public Builder codeReference(final Reference codeReference) {
            b.add(PROPERTY_CODE_REFERENCE, codeReference);
            return this;
        }

        public Builder codeCodeableConcept(final CodeableConcept codeCodeableConcept) {
            b.add(PROPERTY_CODE_CODEABLE_CONCEPT, codeCodeableConcept);
            return this;
        }

        public Builder parameter(final java.util.List<DeviceRequestParameter> parameter) {
            b.add(PROPERTY_PARAMETER, FhirObject.toArray(parameter));
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder occurrenceDateTime(final String occurrenceDateTime) {
            b.add(PROPERTY_OCCURRENCE_DATE_TIME, occurrenceDateTime);
            return this;
        }

        public Builder occurrencePeriod(final Period occurrencePeriod) {
            b.add(PROPERTY_OCCURRENCE_PERIOD, occurrencePeriod);
            return this;
        }

        public Builder occurrenceTiming(final Timing occurrenceTiming) {
            b.add(PROPERTY_OCCURRENCE_TIMING, occurrenceTiming);
            return this;
        }

        public Builder authoredOn(final java.time.Instant authoredOn) {
            b.add(PROPERTY_AUTHORED_ON, authoredOn.toString());
            return this;
        }

        public Builder requester(final Reference requester) {
            b.add(PROPERTY_REQUESTER, requester);
            return this;
        }

        public Builder performerType(final CodeableConcept performerType) {
            b.add(PROPERTY_PERFORMER_TYPE, performerType);
            return this;
        }

        public Builder performer(final Reference performer) {
            b.add(PROPERTY_PERFORMER, performer);
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder insurance(final java.util.List<Reference> insurance) {
            b.add(PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder supportingInfo(final java.util.List<Reference> supportingInfo) {
            b.add(PROPERTY_SUPPORTING_INFO, FhirObject.toArray(supportingInfo));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder relevantHistory(final java.util.List<Reference> relevantHistory) {
            b.add(PROPERTY_RELEVANT_HISTORY, FhirObject.toArray(relevantHistory));
            return this;
        }

        public DeviceRequest build() {
            return new DeviceRequest(b.build());
        }
    }

    /**
     * Represents a request for a patient to employ a medical device. The
     * device may be an implantable device, or an external assistive device,
     * such as a walker.
     */
    public static class DeviceRequestParameter extends FhirObject {
        public static final String RESOURCE_TYPE = "DeviceRequestParameter";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_VALUE_CODEABLE_CONCEPT = "valueCodeableConcept";
        public static final String PROPERTY_VALUE_QUANTITY = "valueQuantity";
        public static final String PROPERTY_VALUE_RANGE = "valueRange";
        public static final String PROPERTY_VALUE_BOOLEAN = "valueBoolean";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public DeviceRequestParameter(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A code or string that identifies the device detail being asserted.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, PROPERTY_CODE);
        }

        /**
         * The value of the device detail.
         */
        public CodeableConcept valueCodeableConcept() {
            return getObject(CodeableConcept.class, PROPERTY_VALUE_CODEABLE_CONCEPT);
        }

        /**
         * The value of the device detail.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, PROPERTY_VALUE_QUANTITY);
        }

        /**
         * The value of the device detail.
         */
        public Range valueRange() {
            return getObject(Range.class, PROPERTY_VALUE_RANGE);
        }

        /**
         * The value of the device detail.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(PROPERTY_VALUE_BOOLEAN);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(PROPERTY_CODE, code);
                return this;
            }

            public Builder valueCodeableConcept(final CodeableConcept valueCodeableConcept) {
                b.add(PROPERTY_VALUE_CODEABLE_CONCEPT, valueCodeableConcept);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueRange(final Range valueRange) {
                b.add(PROPERTY_VALUE_RANGE, valueRange);
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public DeviceRequestParameter build() {
                return new DeviceRequestParameter(b.build());
            }
        }
    }
}
