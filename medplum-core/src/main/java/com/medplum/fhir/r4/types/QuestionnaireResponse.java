/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A structured set of questions and their answers. The questions are
 * ordered and grouped into coherent subsets, corresponding to the
 * structure of the grouping of the questionnaire being responded to.
 */
public class QuestionnaireResponse extends FhirResource {
    public static final String RESOURCE_TYPE = "QuestionnaireResponse";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public QuestionnaireResponse(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(FhirPropertyNames.PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, FhirPropertyNames.PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, FhirPropertyNames.PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * A business identifier assigned to a particular completed (or partially
     * completed) questionnaire.
     */
    public Identifier identifier() {
        return getObject(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The order, proposal or plan that is fulfilled in whole or in part by
     * this QuestionnaireResponse.  For example, a ServiceRequest seeking an
     * intake assessment or a decision support recommendation to assess for
     * post-partum depression.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * A procedure or observation that this questionnaire was performed as
     * part of the execution of.  For example, the surgery a checklist was
     * executed as part of.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * The Questionnaire that defines and organizes the questions for which
     * answers are being provided.
     */
    public String questionnaire() {
        return getString(FhirPropertyNames.PROPERTY_QUESTIONNAIRE);
    }

    /**
     * The position of the questionnaire response within its overall
     * lifecycle.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The subject of the questionnaire response.  This could be a patient,
     * organization, practitioner, device, etc.  This is who/what the answers
     * apply to, but is not necessarily the source of information.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The Encounter during which this questionnaire response was created or
     * to which the creation of this record is tightly associated.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The date and/or time that this set of answers were last changed.
     */
    public java.time.Instant authored() {
        return getInstant(FhirPropertyNames.PROPERTY_AUTHORED);
    }

    /**
     * Person who received the answers to the questions in the
     * QuestionnaireResponse and recorded them in the system.
     */
    public Reference author() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_AUTHOR);
    }

    /**
     * The person who answered the questions about the subject.
     */
    public Reference source() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SOURCE);
    }

    /**
     * A group or question item from the original questionnaire for which
     * answers are provided.
     */
    public java.util.List<QuestionnaireResponseItem> item() {
        return getList(QuestionnaireResponseItem.class, FhirPropertyNames.PROPERTY_ITEM);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(FhirPropertyNames.PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(FhirPropertyNames.PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(FhirPropertyNames.PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(FhirPropertyNames.PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(FhirPropertyNames.PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final Identifier identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, identifier);
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder questionnaire(final String questionnaire) {
            b.add(FhirPropertyNames.PROPERTY_QUESTIONNAIRE, questionnaire);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder authored(final java.time.Instant authored) {
            b.add(FhirPropertyNames.PROPERTY_AUTHORED, authored.toString());
            return this;
        }

        public Builder author(final Reference author) {
            b.add(FhirPropertyNames.PROPERTY_AUTHOR, author);
            return this;
        }

        public Builder source(final Reference source) {
            b.add(FhirPropertyNames.PROPERTY_SOURCE, source);
            return this;
        }

        public Builder item(final java.util.List<QuestionnaireResponseItem> item) {
            b.add(FhirPropertyNames.PROPERTY_ITEM, FhirObject.toArray(item));
            return this;
        }

        public QuestionnaireResponse build() {
            return new QuestionnaireResponse(b.build());
        }
    }

    /**
     * A structured set of questions and their answers. The questions are
     * ordered and grouped into coherent subsets, corresponding to the
     * structure of the grouping of the questionnaire being responded to.
     */
    public static class QuestionnaireResponseAnswer extends FhirObject {
        public static final String RESOURCE_TYPE = "QuestionnaireResponseAnswer";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public QuestionnaireResponseAnswer(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public Boolean valueBoolean() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public Integer valueDecimal() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_DECIMAL);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public Integer valueInteger() {
            return data.getInt(FhirPropertyNames.PROPERTY_VALUE_INTEGER);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public String valueDate() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public String valueDateTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public String valueTime() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_TIME);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public String valueString() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_STRING);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public String valueUri() {
            return getString(FhirPropertyNames.PROPERTY_VALUE_URI);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public Attachment valueAttachment() {
            return getObject(Attachment.class, FhirPropertyNames.PROPERTY_VALUE_ATTACHMENT);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public Coding valueCoding() {
            return getObject(Coding.class, FhirPropertyNames.PROPERTY_VALUE_CODING);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public Quantity valueQuantity() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE_QUANTITY);
        }

        /**
         * The answer (or one of the answers) provided by the respondent to the
         * question.
         */
        public Reference valueReference() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_VALUE_REFERENCE);
        }

        /**
         * Nested groups and/or questions found within this particular answer.
         */
        public java.util.List<QuestionnaireResponseItem> item() {
            return getList(QuestionnaireResponseItem.class, FhirPropertyNames.PROPERTY_ITEM);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder valueBoolean(final Boolean valueBoolean) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_BOOLEAN, valueBoolean);
                return this;
            }

            public Builder valueDecimal(final Integer valueDecimal) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DECIMAL, valueDecimal);
                return this;
            }

            public Builder valueInteger(final Integer valueInteger) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_INTEGER, valueInteger);
                return this;
            }

            public Builder valueDate(final String valueDate) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE, valueDate);
                return this;
            }

            public Builder valueDateTime(final String valueDateTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_DATE_TIME, valueDateTime);
                return this;
            }

            public Builder valueTime(final String valueTime) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_TIME, valueTime);
                return this;
            }

            public Builder valueString(final String valueString) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_STRING, valueString);
                return this;
            }

            public Builder valueUri(final String valueUri) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_URI, valueUri);
                return this;
            }

            public Builder valueAttachment(final Attachment valueAttachment) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_ATTACHMENT, valueAttachment);
                return this;
            }

            public Builder valueCoding(final Coding valueCoding) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_CODING, valueCoding);
                return this;
            }

            public Builder valueQuantity(final Quantity valueQuantity) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_QUANTITY, valueQuantity);
                return this;
            }

            public Builder valueReference(final Reference valueReference) {
                b.add(FhirPropertyNames.PROPERTY_VALUE_REFERENCE, valueReference);
                return this;
            }

            public Builder item(final java.util.List<QuestionnaireResponseItem> item) {
                b.add(FhirPropertyNames.PROPERTY_ITEM, FhirObject.toArray(item));
                return this;
            }

            public QuestionnaireResponseAnswer build() {
                return new QuestionnaireResponseAnswer(b.build());
            }
        }
    }

    /**
     * A structured set of questions and their answers. The questions are
     * ordered and grouped into coherent subsets, corresponding to the
     * structure of the grouping of the questionnaire being responded to.
     */
    public static class QuestionnaireResponseItem extends FhirObject {
        public static final String RESOURCE_TYPE = "QuestionnaireResponseItem";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public QuestionnaireResponseItem(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The item from the Questionnaire that corresponds to this item in the
         * QuestionnaireResponse resource.
         */
        public String linkId() {
            return getString(FhirPropertyNames.PROPERTY_LINK_ID);
        }

        /**
         * A reference to an [[[ElementDefinition]]] that provides the details
         * for the item.
         */
        public java.net.URI definition() {
            return getUri(FhirPropertyNames.PROPERTY_DEFINITION);
        }

        /**
         * Text that is displayed above the contents of the group or as the text
         * of the question being answered.
         */
        public String text() {
            return getString(FhirPropertyNames.PROPERTY_TEXT);
        }

        /**
         * The respondent's answer(s) to the question.
         */
        public java.util.List<QuestionnaireResponseAnswer> answer() {
            return getList(QuestionnaireResponseAnswer.class, FhirPropertyNames.PROPERTY_ANSWER);
        }

        /**
         * Questions or sub-groups nested beneath a question or group.
         */
        public java.util.List<QuestionnaireResponseItem> item() {
            return getList(QuestionnaireResponseItem.class, FhirPropertyNames.PROPERTY_ITEM);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder linkId(final String linkId) {
                b.add(FhirPropertyNames.PROPERTY_LINK_ID, linkId);
                return this;
            }

            public Builder definition(final java.net.URI definition) {
                b.add(FhirPropertyNames.PROPERTY_DEFINITION, definition.toString());
                return this;
            }

            public Builder text(final String text) {
                b.add(FhirPropertyNames.PROPERTY_TEXT, text);
                return this;
            }

            public Builder answer(final java.util.List<QuestionnaireResponseAnswer> answer) {
                b.add(FhirPropertyNames.PROPERTY_ANSWER, FhirObject.toArray(answer));
                return this;
            }

            public Builder item(final java.util.List<QuestionnaireResponseItem> item) {
                b.add(FhirPropertyNames.PROPERTY_ITEM, FhirObject.toArray(item));
                return this;
            }

            public QuestionnaireResponseItem build() {
                return new QuestionnaireResponseItem(b.build());
            }
        }
    }
}
