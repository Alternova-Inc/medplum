/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A resource that represents the data of a single raw artifact as
 * digital content accessible in its native format.  A Binary resource
 * can contain any content, whether text, image, pdf, zip archive, etc.
 */
public class Binary extends FhirResource {
    public static final String RESOURCE_TYPE = "Binary";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Binary(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(FhirPropertyNames.PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
    }

    /**
     * MimeType of the binary content represented as a standard MimeType (BCP
     * 13).
     */
    public String contentType() {
        return getString(FhirPropertyNames.PROPERTY_CONTENT_TYPE);
    }

    /**
     * This element identifies another resource that can be used as a proxy
     * of the security sensitivity to use when deciding and enforcing access
     * control rules for the Binary resource. Given that the Binary resource
     * contains very few elements that can be used to determine the
     * sensitivity of the data and relationships to individuals, the
     * referenced resource stands in as a proxy equivalent for this purpose.
     * This referenced resource may be related to the Binary (e.g. Media,
     * DocumentReference), or may be some non-related Resource purely as a
     * security proxy. E.g. to identify that the binary resource relates to a
     * patient, and access should only be granted to applications that have
     * access to the patient.
     */
    public Reference securityContext() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SECURITY_CONTEXT);
    }

    /**
     * The actual content, base64 encoded.
     */
    public String data() {
        return getString(FhirPropertyNames.PROPERTY_DATA);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(FhirPropertyNames.PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(FhirPropertyNames.PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(FhirPropertyNames.PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder contentType(final String contentType) {
            b.add(FhirPropertyNames.PROPERTY_CONTENT_TYPE, contentType);
            return this;
        }

        public Builder securityContext(final Reference securityContext) {
            b.add(FhirPropertyNames.PROPERTY_SECURITY_CONTEXT, securityContext);
            return this;
        }

        public Builder data(final String data) {
            b.add(FhirPropertyNames.PROPERTY_DATA, data);
            return this;
        }

        public Binary build() {
            return new Binary(b.build());
        }
    }
}
