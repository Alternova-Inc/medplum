/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.JsonObject;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * A record of a request for service such as diagnostic investigations,
 * treatments, or operations to be performed.
 */
public class ServiceRequest extends FhirResource {
    public static final String RESOURCE_TYPE = "ServiceRequest";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public ServiceRequest(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(FhirPropertyNames.PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, FhirPropertyNames.PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, FhirPropertyNames.PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Identifiers assigned to this order instance by the orderer and/or the
     * receiver and/or order fulfiller.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or
     * other definition that is adhered to in whole or in part by this
     * ServiceRequest.
     */
    public java.util.List<String> instantiatesCanonical() {
        return getList(String.class, FhirPropertyNames.PROPERTY_INSTANTIATES_CANONICAL);
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this ServiceRequest.
     */
    public java.util.List<java.net.URI> instantiatesUri() {
        return getList(java.net.URI.class, FhirPropertyNames.PROPERTY_INSTANTIATES_URI);
    }

    /**
     * Plan/proposal/order fulfilled by this request.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_BASED_ON);
    }

    /**
     * The request takes the place of the referenced completed or terminated
     * request(s).
     */
    public java.util.List<Reference> replaces() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_REPLACES);
    }

    /**
     * A shared identifier common to all service requests that were
     * authorized more or less simultaneously by a single author,
     * representing the composite or group identifier.
     */
    public Identifier requisition() {
        return getObject(Identifier.class, FhirPropertyNames.PROPERTY_REQUISITION);
    }

    /**
     * The status of the order.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Whether the request is a proposal, plan, an original order or a reflex
     * order.
     */
    public String intent() {
        return getString(FhirPropertyNames.PROPERTY_INTENT);
    }

    /**
     * A code that classifies the service for searching, sorting and display
     * purposes (e.g. &quot;Surgical Procedure&quot;).
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
    }

    /**
     * Indicates how quickly the ServiceRequest should be addressed with
     * respect to other requests.
     */
    public String priority() {
        return getString(FhirPropertyNames.PROPERTY_PRIORITY);
    }

    /**
     * Set this to true if the record is saying that the service/procedure
     * should NOT be performed.
     */
    public Boolean doNotPerform() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_DO_NOT_PERFORM);
    }

    /**
     * A code that identifies a particular service (i.e., procedure,
     * diagnostic investigation, or panel of investigations) that have been
     * requested.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
    }

    /**
     * Additional details and instructions about the how the services are to
     * be delivered.   For example, and order for a urinary catheter may have
     * an order detail for an external or indwelling catheter, or an order
     * for a bandage may require additional instructions specifying how the
     * bandage should be applied.
     */
    public java.util.List<CodeableConcept> orderDetail() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_ORDER_DETAIL);
    }

    /**
     * An amount of service being requested which can be a quantity ( for
     * example $1,500 home modification), a ratio ( for example, 20 half day
     * visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    public Quantity quantityQuantity() {
        return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY_QUANTITY);
    }

    /**
     * An amount of service being requested which can be a quantity ( for
     * example $1,500 home modification), a ratio ( for example, 20 half day
     * visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    public Ratio quantityRatio() {
        return getObject(Ratio.class, FhirPropertyNames.PROPERTY_QUANTITY_RATIO);
    }

    /**
     * An amount of service being requested which can be a quantity ( for
     * example $1,500 home modification), a ratio ( for example, 20 half day
     * visits per month), or a range (2.0 to 1.8 Gy per fraction).
     */
    public Range quantityRange() {
        return getObject(Range.class, FhirPropertyNames.PROPERTY_QUANTITY_RANGE);
    }

    /**
     * On whom or what the service is to be performed. This is usually a
     * human patient, but can also be requested on animals, groups of humans
     * or animals, devices such as dialysis machines, or even locations
     * (typically for environmental scans).
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * An encounter that provides additional information about the healthcare
     * context in which this request is made.
     */
    public Reference encounter() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ENCOUNTER);
    }

    /**
     * The date/time at which the requested service should occur.
     */
    public String occurrenceDateTime() {
        return getString(FhirPropertyNames.PROPERTY_OCCURRENCE_DATE_TIME);
    }

    /**
     * The date/time at which the requested service should occur.
     */
    public Period occurrencePeriod() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_OCCURRENCE_PERIOD);
    }

    /**
     * The date/time at which the requested service should occur.
     */
    public Timing occurrenceTiming() {
        return getObject(Timing.class, FhirPropertyNames.PROPERTY_OCCURRENCE_TIMING);
    }

    /**
     * If a CodeableConcept is present, it indicates the pre-condition for
     * performing the service.  For example &quot;pain&quot;, &quot;on flare-up&quot;, etc.
     */
    public Boolean asNeededBoolean() {
        return data.getBoolean(FhirPropertyNames.PROPERTY_AS_NEEDED_BOOLEAN);
    }

    /**
     * If a CodeableConcept is present, it indicates the pre-condition for
     * performing the service.  For example &quot;pain&quot;, &quot;on flare-up&quot;, etc.
     */
    public CodeableConcept asNeededCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_AS_NEEDED_CODEABLE_CONCEPT);
    }

    /**
     * When the request transitioned to being actionable.
     */
    public java.time.Instant authoredOn() {
        return getInstant(FhirPropertyNames.PROPERTY_AUTHORED_ON);
    }

    /**
     * The individual who initiated the request and has responsibility for
     * its activation.
     */
    public Reference requester() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_REQUESTER);
    }

    /**
     * Desired type of performer for doing the requested service.
     */
    public CodeableConcept performerType() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PERFORMER_TYPE);
    }

    /**
     * The desired performer for doing the requested service.  For example,
     * the surgeon, dermatopathologist, endoscopist, etc.
     */
    public java.util.List<Reference> performer() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PERFORMER);
    }

    /**
     * The preferred location(s) where the procedure should actually happen
     * in coded or free text form. E.g. at home or nursing day care center.
     */
    public java.util.List<CodeableConcept> locationCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_LOCATION_CODE);
    }

    /**
     * A reference to the the preferred location(s) where the procedure
     * should actually happen. E.g. at home or nursing day care center.
     */
    public java.util.List<Reference> locationReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_LOCATION_REFERENCE);
    }

    /**
     * An explanation or justification for why this service is being
     * requested in coded or textual form.   This is often for billing
     * purposes.  May relate to the resources referred to in
     * `supportingInfo`.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON_CODE);
    }

    /**
     * Indicates another resource that provides a justification for why this
     * service is being requested.   May relate to the resources referred to
     * in `supportingInfo`.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_REASON_REFERENCE);
    }

    /**
     * Insurance plans, coverage extensions, pre-authorizations and/or
     * pre-determinations that may be needed for delivering the requested
     * service.
     */
    public java.util.List<Reference> insurance() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_INSURANCE);
    }

    /**
     * Additional clinical information about the patient or specimen that may
     * influence the services or their interpretations.     This information
     * includes diagnosis, clinical findings and other observations.  In
     * laboratory ordering these are typically referred to as &quot;ask at order
     * entry questions (AOEs)&quot;.  This includes observations explicitly
     * requested by the producer (filler) to provide context or supporting
     * information needed to complete the order. For example,  reporting the
     * amount of inspired oxygen for blood gas measurements.
     */
    public java.util.List<Reference> supportingInfo() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SUPPORTING_INFO);
    }

    /**
     * One or more specimens that the laboratory procedure will use.
     */
    public java.util.List<Reference> specimen() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SPECIMEN);
    }

    /**
     * Anatomic location where the procedure should be performed. This is the
     * target site.
     */
    public java.util.List<CodeableConcept> bodySite() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_BODY_SITE);
    }

    /**
     * Any other notes and comments made about the service request. For
     * example, internal billing notes.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Instructions in terms that are understood by the patient or consumer.
     */
    public String patientInstruction() {
        return getString(FhirPropertyNames.PROPERTY_PATIENT_INSTRUCTION);
    }

    /**
     * Key events in the history of the request.
     */
    public java.util.List<Reference> relevantHistory() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_RELEVANT_HISTORY);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(FhirPropertyNames.PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(FhirPropertyNames.PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(FhirPropertyNames.PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(FhirPropertyNames.PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(FhirPropertyNames.PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES_CANONICAL, FhirObject.toStringArray(instantiatesCanonical));
            return this;
        }

        public Builder instantiatesUri(final java.util.List<java.net.URI> instantiatesUri) {
            b.add(FhirPropertyNames.PROPERTY_INSTANTIATES_URI, FhirObject.toUriArray(instantiatesUri));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(FhirPropertyNames.PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder replaces(final java.util.List<Reference> replaces) {
            b.add(FhirPropertyNames.PROPERTY_REPLACES, FhirObject.toArray(replaces));
            return this;
        }

        public Builder requisition(final Identifier requisition) {
            b.add(FhirPropertyNames.PROPERTY_REQUISITION, requisition);
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(FhirPropertyNames.PROPERTY_INTENT, intent);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(FhirPropertyNames.PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder priority(final String priority) {
            b.add(FhirPropertyNames.PROPERTY_PRIORITY, priority);
            return this;
        }

        public Builder doNotPerform(final Boolean doNotPerform) {
            b.add(FhirPropertyNames.PROPERTY_DO_NOT_PERFORM, doNotPerform);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(FhirPropertyNames.PROPERTY_CODE, code);
            return this;
        }

        public Builder orderDetail(final java.util.List<CodeableConcept> orderDetail) {
            b.add(FhirPropertyNames.PROPERTY_ORDER_DETAIL, FhirObject.toArray(orderDetail));
            return this;
        }

        public Builder quantityQuantity(final Quantity quantityQuantity) {
            b.add(FhirPropertyNames.PROPERTY_QUANTITY_QUANTITY, quantityQuantity);
            return this;
        }

        public Builder quantityRatio(final Ratio quantityRatio) {
            b.add(FhirPropertyNames.PROPERTY_QUANTITY_RATIO, quantityRatio);
            return this;
        }

        public Builder quantityRange(final Range quantityRange) {
            b.add(FhirPropertyNames.PROPERTY_QUANTITY_RANGE, quantityRange);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(FhirPropertyNames.PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder occurrenceDateTime(final String occurrenceDateTime) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_DATE_TIME, occurrenceDateTime);
            return this;
        }

        public Builder occurrencePeriod(final Period occurrencePeriod) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_PERIOD, occurrencePeriod);
            return this;
        }

        public Builder occurrenceTiming(final Timing occurrenceTiming) {
            b.add(FhirPropertyNames.PROPERTY_OCCURRENCE_TIMING, occurrenceTiming);
            return this;
        }

        public Builder asNeededBoolean(final Boolean asNeededBoolean) {
            b.add(FhirPropertyNames.PROPERTY_AS_NEEDED_BOOLEAN, asNeededBoolean);
            return this;
        }

        public Builder asNeededCodeableConcept(final CodeableConcept asNeededCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_AS_NEEDED_CODEABLE_CONCEPT, asNeededCodeableConcept);
            return this;
        }

        public Builder authoredOn(final java.time.Instant authoredOn) {
            b.add(FhirPropertyNames.PROPERTY_AUTHORED_ON, authoredOn.toString());
            return this;
        }

        public Builder requester(final Reference requester) {
            b.add(FhirPropertyNames.PROPERTY_REQUESTER, requester);
            return this;
        }

        public Builder performerType(final CodeableConcept performerType) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER_TYPE, performerType);
            return this;
        }

        public Builder performer(final java.util.List<Reference> performer) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder locationCode(final java.util.List<CodeableConcept> locationCode) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION_CODE, FhirObject.toArray(locationCode));
            return this;
        }

        public Builder locationReference(final java.util.List<Reference> locationReference) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION_REFERENCE, FhirObject.toArray(locationReference));
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(FhirPropertyNames.PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(FhirPropertyNames.PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder insurance(final java.util.List<Reference> insurance) {
            b.add(FhirPropertyNames.PROPERTY_INSURANCE, FhirObject.toArray(insurance));
            return this;
        }

        public Builder supportingInfo(final java.util.List<Reference> supportingInfo) {
            b.add(FhirPropertyNames.PROPERTY_SUPPORTING_INFO, FhirObject.toArray(supportingInfo));
            return this;
        }

        public Builder specimen(final java.util.List<Reference> specimen) {
            b.add(FhirPropertyNames.PROPERTY_SPECIMEN, FhirObject.toArray(specimen));
            return this;
        }

        public Builder bodySite(final java.util.List<CodeableConcept> bodySite) {
            b.add(FhirPropertyNames.PROPERTY_BODY_SITE, FhirObject.toArray(bodySite));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder patientInstruction(final String patientInstruction) {
            b.add(FhirPropertyNames.PROPERTY_PATIENT_INSTRUCTION, patientInstruction);
            return this;
        }

        public Builder relevantHistory(final java.util.List<Reference> relevantHistory) {
            b.add(FhirPropertyNames.PROPERTY_RELEVANT_HISTORY, FhirObject.toArray(relevantHistory));
            return this;
        }

        public ServiceRequest build() {
            return new ServiceRequest(b.build());
        }
    }
}
