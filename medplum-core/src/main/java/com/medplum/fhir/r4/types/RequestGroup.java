/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

/**
 * A group of related requests that can be used to capture intended
 * activities that have inter-dependencies such as &quot;give this medication
 * after that one&quot;.
 */
public class RequestGroup extends FhirResource {
    public static final String RESOURCE_TYPE = "RequestGroup";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_INSTANTIATES_CANONICAL = "instantiatesCanonical";
    public static final String PROPERTY_INSTANTIATES_URI = "instantiatesUri";
    public static final String PROPERTY_BASED_ON = "basedOn";
    public static final String PROPERTY_REPLACES = "replaces";
    public static final String PROPERTY_GROUP_IDENTIFIER = "groupIdentifier";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_INTENT = "intent";
    public static final String PROPERTY_PRIORITY = "priority";
    public static final String PROPERTY_CODE = "code";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_AUTHORED_ON = "authoredOn";
    public static final String PROPERTY_AUTHOR = "author";
    public static final String PROPERTY_REASON_CODE = "reasonCode";
    public static final String PROPERTY_REASON_REFERENCE = "reasonReference";
    public static final String PROPERTY_NOTE = "note";
    public static final String PROPERTY_ACTION = "action";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public RequestGroup(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Allows a service to provide a unique, business identifier for the
     * request.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * A canonical URL referencing a FHIR-defined protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this request.
     */
    public java.util.List<String> instantiatesCanonical() {
        return getList(String.class, PROPERTY_INSTANTIATES_CANONICAL);
    }

    /**
     * A URL referencing an externally defined protocol, guideline, orderset
     * or other definition that is adhered to in whole or in part by this
     * request.
     */
    public java.util.List<java.net.URI> instantiatesUri() {
        return getList(java.net.URI.class, PROPERTY_INSTANTIATES_URI);
    }

    /**
     * A plan, proposal or order that is fulfilled in whole or in part by
     * this request.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASED_ON);
    }

    /**
     * Completed or terminated request(s) whose function is taken by this new
     * request.
     */
    public java.util.List<Reference> replaces() {
        return getList(Reference.class, PROPERTY_REPLACES);
    }

    /**
     * A shared identifier common to all requests that were authorized more
     * or less simultaneously by a single author, representing the identifier
     * of the requisition, prescription or similar form.
     */
    public Identifier groupIdentifier() {
        return getObject(Identifier.class, PROPERTY_GROUP_IDENTIFIER);
    }

    /**
     * The current state of the request. For request groups, the status
     * reflects the status of all the requests in the group.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Indicates the level of authority/intentionality associated with the
     * request and where the request fits into the workflow chain.
     */
    public String intent() {
        return getString(PROPERTY_INTENT);
    }

    /**
     * Indicates how quickly the request should be addressed with respect to
     * other requests.
     */
    public String priority() {
        return getString(PROPERTY_PRIORITY);
    }

    /**
     * A code that identifies what the overall request group is.
     */
    public CodeableConcept code() {
        return getObject(CodeableConcept.class, PROPERTY_CODE);
    }

    /**
     * The subject for which the request group was created.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * Describes the context of the request group, if any.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * Indicates when the request group was created.
     */
    public java.time.Instant authoredOn() {
        return getInstant(PROPERTY_AUTHORED_ON);
    }

    /**
     * Provides a reference to the author of the request group.
     */
    public Reference author() {
        return getObject(Reference.class, PROPERTY_AUTHOR);
    }

    /**
     * Describes the reason for the request group in coded or textual form.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, PROPERTY_REASON_CODE);
    }

    /**
     * Indicates another resource whose existence justifies this request
     * group.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, PROPERTY_REASON_REFERENCE);
    }

    /**
     * Provides a mechanism to communicate additional information about the
     * response.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    /**
     * The actions, if any, produced by the evaluation of the artifact.
     */
    public java.util.List<RequestGroupAction> action() {
        return getList(RequestGroupAction.class, PROPERTY_ACTION);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
            b.add(PROPERTY_INSTANTIATES_CANONICAL, FhirObject.toStringArray(instantiatesCanonical));
            return this;
        }

        public Builder instantiatesUri(final java.util.List<java.net.URI> instantiatesUri) {
            b.add(PROPERTY_INSTANTIATES_URI, FhirObject.toUriArray(instantiatesUri));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder replaces(final java.util.List<Reference> replaces) {
            b.add(PROPERTY_REPLACES, FhirObject.toArray(replaces));
            return this;
        }

        public Builder groupIdentifier(final Identifier groupIdentifier) {
            b.add(PROPERTY_GROUP_IDENTIFIER, groupIdentifier);
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder intent(final String intent) {
            b.add(PROPERTY_INTENT, intent);
            return this;
        }

        public Builder priority(final String priority) {
            b.add(PROPERTY_PRIORITY, priority);
            return this;
        }

        public Builder code(final CodeableConcept code) {
            b.add(PROPERTY_CODE, code);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder authoredOn(final java.time.Instant authoredOn) {
            b.add(PROPERTY_AUTHORED_ON, authoredOn.toString());
            return this;
        }

        public Builder author(final Reference author) {
            b.add(PROPERTY_AUTHOR, author);
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder action(final java.util.List<RequestGroupAction> action) {
            b.add(PROPERTY_ACTION, FhirObject.toArray(action));
            return this;
        }

        public RequestGroup build() {
            return new RequestGroup(b.build());
        }
    }

    /**
     * A group of related requests that can be used to capture intended
     * activities that have inter-dependencies such as &quot;give this medication
     * after that one&quot;.
     */
    public static class RequestGroupAction extends FhirObject {
        public static final String RESOURCE_TYPE = "RequestGroupAction";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_PREFIX = "prefix";
        public static final String PROPERTY_TITLE = "title";
        public static final String PROPERTY_DESCRIPTION = "description";
        public static final String PROPERTY_TEXT_EQUIVALENT = "textEquivalent";
        public static final String PROPERTY_PRIORITY = "priority";
        public static final String PROPERTY_CODE = "code";
        public static final String PROPERTY_DOCUMENTATION = "documentation";
        public static final String PROPERTY_CONDITION = "condition";
        public static final String PROPERTY_RELATED_ACTION = "relatedAction";
        public static final String PROPERTY_TIMING_DATE_TIME = "timingDateTime";
        public static final String PROPERTY_TIMING_AGE = "timingAge";
        public static final String PROPERTY_TIMING_PERIOD = "timingPeriod";
        public static final String PROPERTY_TIMING_DURATION = "timingDuration";
        public static final String PROPERTY_TIMING_RANGE = "timingRange";
        public static final String PROPERTY_TIMING_TIMING = "timingTiming";
        public static final String PROPERTY_PARTICIPANT = "participant";
        public static final String PROPERTY_TYPE = "type";
        public static final String PROPERTY_GROUPING_BEHAVIOR = "groupingBehavior";
        public static final String PROPERTY_SELECTION_BEHAVIOR = "selectionBehavior";
        public static final String PROPERTY_REQUIRED_BEHAVIOR = "requiredBehavior";
        public static final String PROPERTY_PRECHECK_BEHAVIOR = "precheckBehavior";
        public static final String PROPERTY_CARDINALITY_BEHAVIOR = "cardinalityBehavior";
        public static final String PROPERTY_RESOURCE = "resource";
        public static final String PROPERTY_ACTION = "action";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RequestGroupAction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A user-visible prefix for the action.
         */
        public String prefix() {
            return getString(PROPERTY_PREFIX);
        }

        /**
         * The title of the action displayed to a user.
         */
        public String title() {
            return getString(PROPERTY_TITLE);
        }

        /**
         * A short description of the action used to provide a summary to display
         * to the user.
         */
        public String description() {
            return getString(PROPERTY_DESCRIPTION);
        }

        /**
         * A text equivalent of the action to be performed. This provides a
         * human-interpretable description of the action when the definition is
         * consumed by a system that might not be capable of interpreting it
         * dynamically.
         */
        public String textEquivalent() {
            return getString(PROPERTY_TEXT_EQUIVALENT);
        }

        /**
         * Indicates how quickly the action should be addressed with respect to
         * other actions.
         */
        public String priority() {
            return getString(PROPERTY_PRIORITY);
        }

        /**
         * A code that provides meaning for the action or action group. For
         * example, a section may have a LOINC code for a section of a
         * documentation template.
         */
        public java.util.List<CodeableConcept> code() {
            return getList(CodeableConcept.class, PROPERTY_CODE);
        }

        /**
         * Didactic or other informational resources associated with the action
         * that can be provided to the CDS recipient. Information resources can
         * include inline text commentary and links to web resources.
         */
        public java.util.List<RelatedArtifact> documentation() {
            return getList(RelatedArtifact.class, PROPERTY_DOCUMENTATION);
        }

        /**
         * An expression that describes applicability criteria, or start/stop
         * conditions for the action.
         */
        public java.util.List<RequestGroupCondition> condition() {
            return getList(RequestGroupCondition.class, PROPERTY_CONDITION);
        }

        /**
         * A relationship to another action such as &quot;before&quot; or &quot;30-60 minutes
         * after start of&quot;.
         */
        public java.util.List<RequestGroupRelatedAction> relatedAction() {
            return getList(RequestGroupRelatedAction.class, PROPERTY_RELATED_ACTION);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public String timingDateTime() {
            return getString(PROPERTY_TIMING_DATE_TIME);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Age timingAge() {
            return getObject(Age.class, PROPERTY_TIMING_AGE);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Period timingPeriod() {
            return getObject(Period.class, PROPERTY_TIMING_PERIOD);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Duration timingDuration() {
            return getObject(Duration.class, PROPERTY_TIMING_DURATION);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Range timingRange() {
            return getObject(Range.class, PROPERTY_TIMING_RANGE);
        }

        /**
         * An optional value describing when the action should be performed.
         */
        public Timing timingTiming() {
            return getObject(Timing.class, PROPERTY_TIMING_TIMING);
        }

        /**
         * The participant that should perform or be responsible for this action.
         */
        public java.util.List<Reference> participant() {
            return getList(Reference.class, PROPERTY_PARTICIPANT);
        }

        /**
         * The type of action to perform (create, update, remove).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, PROPERTY_TYPE);
        }

        /**
         * Defines the grouping behavior for the action and its children.
         */
        public String groupingBehavior() {
            return getString(PROPERTY_GROUPING_BEHAVIOR);
        }

        /**
         * Defines the selection behavior for the action and its children.
         */
        public String selectionBehavior() {
            return getString(PROPERTY_SELECTION_BEHAVIOR);
        }

        /**
         * Defines expectations around whether an action is required.
         */
        public String requiredBehavior() {
            return getString(PROPERTY_REQUIRED_BEHAVIOR);
        }

        /**
         * Defines whether the action should usually be preselected.
         */
        public String precheckBehavior() {
            return getString(PROPERTY_PRECHECK_BEHAVIOR);
        }

        /**
         * Defines whether the action can be selected multiple times.
         */
        public String cardinalityBehavior() {
            return getString(PROPERTY_CARDINALITY_BEHAVIOR);
        }

        /**
         * The resource that is the target of the action (e.g.
         * CommunicationRequest).
         */
        public Reference resource() {
            return getObject(Reference.class, PROPERTY_RESOURCE);
        }

        /**
         * Sub actions.
         */
        public java.util.List<RequestGroupAction> action() {
            return getList(RequestGroupAction.class, PROPERTY_ACTION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder prefix(final String prefix) {
                b.add(PROPERTY_PREFIX, prefix);
                return this;
            }

            public Builder title(final String title) {
                b.add(PROPERTY_TITLE, title);
                return this;
            }

            public Builder description(final String description) {
                b.add(PROPERTY_DESCRIPTION, description);
                return this;
            }

            public Builder textEquivalent(final String textEquivalent) {
                b.add(PROPERTY_TEXT_EQUIVALENT, textEquivalent);
                return this;
            }

            public Builder priority(final String priority) {
                b.add(PROPERTY_PRIORITY, priority);
                return this;
            }

            public Builder code(final java.util.List<CodeableConcept> code) {
                b.add(PROPERTY_CODE, FhirObject.toArray(code));
                return this;
            }

            public Builder documentation(final java.util.List<RelatedArtifact> documentation) {
                b.add(PROPERTY_DOCUMENTATION, FhirObject.toArray(documentation));
                return this;
            }

            public Builder condition(final java.util.List<RequestGroupCondition> condition) {
                b.add(PROPERTY_CONDITION, FhirObject.toArray(condition));
                return this;
            }

            public Builder relatedAction(final java.util.List<RequestGroupRelatedAction> relatedAction) {
                b.add(PROPERTY_RELATED_ACTION, FhirObject.toArray(relatedAction));
                return this;
            }

            public Builder timingDateTime(final String timingDateTime) {
                b.add(PROPERTY_TIMING_DATE_TIME, timingDateTime);
                return this;
            }

            public Builder timingAge(final Age timingAge) {
                b.add(PROPERTY_TIMING_AGE, timingAge);
                return this;
            }

            public Builder timingPeriod(final Period timingPeriod) {
                b.add(PROPERTY_TIMING_PERIOD, timingPeriod);
                return this;
            }

            public Builder timingDuration(final Duration timingDuration) {
                b.add(PROPERTY_TIMING_DURATION, timingDuration);
                return this;
            }

            public Builder timingRange(final Range timingRange) {
                b.add(PROPERTY_TIMING_RANGE, timingRange);
                return this;
            }

            public Builder timingTiming(final Timing timingTiming) {
                b.add(PROPERTY_TIMING_TIMING, timingTiming);
                return this;
            }

            public Builder participant(final java.util.List<Reference> participant) {
                b.add(PROPERTY_PARTICIPANT, FhirObject.toArray(participant));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(PROPERTY_TYPE, type);
                return this;
            }

            public Builder groupingBehavior(final String groupingBehavior) {
                b.add(PROPERTY_GROUPING_BEHAVIOR, groupingBehavior);
                return this;
            }

            public Builder selectionBehavior(final String selectionBehavior) {
                b.add(PROPERTY_SELECTION_BEHAVIOR, selectionBehavior);
                return this;
            }

            public Builder requiredBehavior(final String requiredBehavior) {
                b.add(PROPERTY_REQUIRED_BEHAVIOR, requiredBehavior);
                return this;
            }

            public Builder precheckBehavior(final String precheckBehavior) {
                b.add(PROPERTY_PRECHECK_BEHAVIOR, precheckBehavior);
                return this;
            }

            public Builder cardinalityBehavior(final String cardinalityBehavior) {
                b.add(PROPERTY_CARDINALITY_BEHAVIOR, cardinalityBehavior);
                return this;
            }

            public Builder resource(final Reference resource) {
                b.add(PROPERTY_RESOURCE, resource);
                return this;
            }

            public Builder action(final java.util.List<RequestGroupAction> action) {
                b.add(PROPERTY_ACTION, FhirObject.toArray(action));
                return this;
            }

            public RequestGroupAction build() {
                return new RequestGroupAction(b.build());
            }
        }
    }

    /**
     * A group of related requests that can be used to capture intended
     * activities that have inter-dependencies such as &quot;give this medication
     * after that one&quot;.
     */
    public static class RequestGroupCondition extends FhirObject {
        public static final String RESOURCE_TYPE = "RequestGroupCondition";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_KIND = "kind";
        public static final String PROPERTY_EXPRESSION = "expression";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RequestGroupCondition(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The kind of condition.
         */
        public String kind() {
            return getString(PROPERTY_KIND);
        }

        /**
         * An expression that returns true or false, indicating whether or not
         * the condition is satisfied.
         */
        public Expression expression() {
            return getObject(Expression.class, PROPERTY_EXPRESSION);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder kind(final String kind) {
                b.add(PROPERTY_KIND, kind);
                return this;
            }

            public Builder expression(final Expression expression) {
                b.add(PROPERTY_EXPRESSION, expression);
                return this;
            }

            public RequestGroupCondition build() {
                return new RequestGroupCondition(b.build());
            }
        }
    }

    /**
     * A group of related requests that can be used to capture intended
     * activities that have inter-dependencies such as &quot;give this medication
     * after that one&quot;.
     */
    public static class RequestGroupRelatedAction extends FhirObject {
        public static final String RESOURCE_TYPE = "RequestGroupRelatedAction";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_ACTION_ID = "actionId";
        public static final String PROPERTY_RELATIONSHIP = "relationship";
        public static final String PROPERTY_OFFSET_DURATION = "offsetDuration";
        public static final String PROPERTY_OFFSET_RANGE = "offsetRange";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public RequestGroupRelatedAction(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The element id of the action this is related to.
         */
        public String actionId() {
            return getString(PROPERTY_ACTION_ID);
        }

        /**
         * The relationship of this action to the related action.
         */
        public String relationship() {
            return getString(PROPERTY_RELATIONSHIP);
        }

        /**
         * A duration or range of durations to apply to the relationship. For
         * example, 30-60 minutes before.
         */
        public Duration offsetDuration() {
            return getObject(Duration.class, PROPERTY_OFFSET_DURATION);
        }

        /**
         * A duration or range of durations to apply to the relationship. For
         * example, 30-60 minutes before.
         */
        public Range offsetRange() {
            return getObject(Range.class, PROPERTY_OFFSET_RANGE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder actionId(final String actionId) {
                b.add(PROPERTY_ACTION_ID, actionId);
                return this;
            }

            public Builder relationship(final String relationship) {
                b.add(PROPERTY_RELATIONSHIP, relationship);
                return this;
            }

            public Builder offsetDuration(final Duration offsetDuration) {
                b.add(PROPERTY_OFFSET_DURATION, offsetDuration);
                return this;
            }

            public Builder offsetRange(final Range offsetRange) {
                b.add(PROPERTY_OFFSET_RANGE, offsetRange);
                return this;
            }

            public RequestGroupRelatedAction build() {
                return new RequestGroupRelatedAction(b.build());
            }
        }
    }
}
