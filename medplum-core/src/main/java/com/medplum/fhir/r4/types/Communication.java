/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

/**
 * An occurrence of information being transmitted; e.g. an alert that was
 * sent to a responsible provider, a public health agency that was
 * notified about a reportable condition.
 */
public class Communication extends FhirResource {
    public static final String RESOURCE_TYPE = "Communication";
    public static final String PROPERTY_RESOURCE_TYPE = "resourceType";
    public static final String PROPERTY_ID = "id";
    public static final String PROPERTY_META = "meta";
    public static final String PROPERTY_IMPLICIT_RULES = "implicitRules";
    public static final String PROPERTY_LANGUAGE = "language";
    public static final String PROPERTY_TEXT = "text";
    public static final String PROPERTY_CONTAINED = "contained";
    public static final String PROPERTY_EXTENSION = "extension";
    public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
    public static final String PROPERTY_IDENTIFIER = "identifier";
    public static final String PROPERTY_INSTANTIATES_CANONICAL = "instantiatesCanonical";
    public static final String PROPERTY_INSTANTIATES_URI = "instantiatesUri";
    public static final String PROPERTY_BASED_ON = "basedOn";
    public static final String PROPERTY_PART_OF = "partOf";
    public static final String PROPERTY_IN_RESPONSE_TO = "inResponseTo";
    public static final String PROPERTY_STATUS = "status";
    public static final String PROPERTY_STATUS_REASON = "statusReason";
    public static final String PROPERTY_CATEGORY = "category";
    public static final String PROPERTY_PRIORITY = "priority";
    public static final String PROPERTY_MEDIUM = "medium";
    public static final String PROPERTY_SUBJECT = "subject";
    public static final String PROPERTY_TOPIC = "topic";
    public static final String PROPERTY_ABOUT = "about";
    public static final String PROPERTY_ENCOUNTER = "encounter";
    public static final String PROPERTY_SENT = "sent";
    public static final String PROPERTY_RECEIVED = "received";
    public static final String PROPERTY_RECIPIENT = "recipient";
    public static final String PROPERTY_SENDER = "sender";
    public static final String PROPERTY_REASON_CODE = "reasonCode";
    public static final String PROPERTY_REASON_REFERENCE = "reasonReference";
    public static final String PROPERTY_PAYLOAD = "payload";
    public static final String PROPERTY_NOTE = "note";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public Communication(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Business identifiers assigned to this communication by the performer
     * or other systems which remain constant as the resource is updated and
     * propagates from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, PROPERTY_IDENTIFIER);
    }

    /**
     * The URL pointing to a FHIR-defined protocol, guideline, orderset or
     * other definition that is adhered to in whole or in part by this
     * Communication.
     */
    public java.util.List<String> instantiatesCanonical() {
        return getList(String.class, PROPERTY_INSTANTIATES_CANONICAL);
    }

    /**
     * The URL pointing to an externally maintained protocol, guideline,
     * orderset or other definition that is adhered to in whole or in part by
     * this Communication.
     */
    public java.util.List<java.net.URI> instantiatesUri() {
        return getList(java.net.URI.class, PROPERTY_INSTANTIATES_URI);
    }

    /**
     * An order, proposal or plan fulfilled in whole or in part by this
     * Communication.
     */
    public java.util.List<Reference> basedOn() {
        return getList(Reference.class, PROPERTY_BASED_ON);
    }

    /**
     * Part of this action.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, PROPERTY_PART_OF);
    }

    /**
     * Prior communication that this communication is in response to.
     */
    public java.util.List<Reference> inResponseTo() {
        return getList(Reference.class, PROPERTY_IN_RESPONSE_TO);
    }

    /**
     * The status of the transmission.
     */
    public String status() {
        return getString(PROPERTY_STATUS);
    }

    /**
     * Captures the reason for the current state of the Communication.
     */
    public CodeableConcept statusReason() {
        return getObject(CodeableConcept.class, PROPERTY_STATUS_REASON);
    }

    /**
     * The type of message conveyed such as alert, notification, reminder,
     * instruction, etc.
     */
    public java.util.List<CodeableConcept> category() {
        return getList(CodeableConcept.class, PROPERTY_CATEGORY);
    }

    /**
     * Characterizes how quickly the planned or in progress communication
     * must be addressed. Includes concepts such as stat, urgent, routine.
     */
    public String priority() {
        return getString(PROPERTY_PRIORITY);
    }

    /**
     * A channel that was used for this communication (e.g. email, fax).
     */
    public java.util.List<CodeableConcept> medium() {
        return getList(CodeableConcept.class, PROPERTY_MEDIUM);
    }

    /**
     * The patient or group that was the focus of this communication.
     */
    public Reference subject() {
        return getObject(Reference.class, PROPERTY_SUBJECT);
    }

    /**
     * Description of the purpose/content, similar to a subject line in an
     * email.
     */
    public CodeableConcept topic() {
        return getObject(CodeableConcept.class, PROPERTY_TOPIC);
    }

    /**
     * Other resources that pertain to this communication and to which this
     * communication should be associated.
     */
    public java.util.List<Reference> about() {
        return getList(Reference.class, PROPERTY_ABOUT);
    }

    /**
     * The Encounter during which this Communication was created or to which
     * the creation of this record is tightly associated.
     */
    public Reference encounter() {
        return getObject(Reference.class, PROPERTY_ENCOUNTER);
    }

    /**
     * The time when this communication was sent.
     */
    public java.time.Instant sent() {
        return getInstant(PROPERTY_SENT);
    }

    /**
     * The time when this communication arrived at the destination.
     */
    public java.time.Instant received() {
        return getInstant(PROPERTY_RECEIVED);
    }

    /**
     * The entity (e.g. person, organization, clinical information system,
     * care team or device) which was the target of the communication. If
     * receipts need to be tracked by an individual, a separate resource
     * instance will need to be created for each recipient.  Multiple
     * recipient communications are intended where either receipts are not
     * tracked (e.g. a mass mail-out) or a receipt is captured in aggregate
     * (all emails confirmed received by a particular time).
     */
    public java.util.List<Reference> recipient() {
        return getList(Reference.class, PROPERTY_RECIPIENT);
    }

    /**
     * The entity (e.g. person, organization, clinical information system, or
     * device) which was the source of the communication.
     */
    public Reference sender() {
        return getObject(Reference.class, PROPERTY_SENDER);
    }

    /**
     * The reason or justification for the communication.
     */
    public java.util.List<CodeableConcept> reasonCode() {
        return getList(CodeableConcept.class, PROPERTY_REASON_CODE);
    }

    /**
     * Indicates another resource whose existence justifies this
     * communication.
     */
    public java.util.List<Reference> reasonReference() {
        return getList(Reference.class, PROPERTY_REASON_REFERENCE);
    }

    /**
     * Text, attachment(s), or resource(s) that was communicated to the
     * recipient.
     */
    public java.util.List<CommunicationPayload> payload() {
        return getList(CommunicationPayload.class, PROPERTY_PAYLOAD);
    }

    /**
     * Additional notes or commentary about the communication by the sender,
     * receiver or other interested parties.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, PROPERTY_NOTE);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder instantiatesCanonical(final java.util.List<String> instantiatesCanonical) {
            b.add(PROPERTY_INSTANTIATES_CANONICAL, FhirObject.toStringArray(instantiatesCanonical));
            return this;
        }

        public Builder instantiatesUri(final java.util.List<java.net.URI> instantiatesUri) {
            b.add(PROPERTY_INSTANTIATES_URI, FhirObject.toUriArray(instantiatesUri));
            return this;
        }

        public Builder basedOn(final java.util.List<Reference> basedOn) {
            b.add(PROPERTY_BASED_ON, FhirObject.toArray(basedOn));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(PROPERTY_PART_OF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder inResponseTo(final java.util.List<Reference> inResponseTo) {
            b.add(PROPERTY_IN_RESPONSE_TO, FhirObject.toArray(inResponseTo));
            return this;
        }

        public Builder status(final String status) {
            b.add(PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReason(final CodeableConcept statusReason) {
            b.add(PROPERTY_STATUS_REASON, statusReason);
            return this;
        }

        public Builder category(final java.util.List<CodeableConcept> category) {
            b.add(PROPERTY_CATEGORY, FhirObject.toArray(category));
            return this;
        }

        public Builder priority(final String priority) {
            b.add(PROPERTY_PRIORITY, priority);
            return this;
        }

        public Builder medium(final java.util.List<CodeableConcept> medium) {
            b.add(PROPERTY_MEDIUM, FhirObject.toArray(medium));
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder topic(final CodeableConcept topic) {
            b.add(PROPERTY_TOPIC, topic);
            return this;
        }

        public Builder about(final java.util.List<Reference> about) {
            b.add(PROPERTY_ABOUT, FhirObject.toArray(about));
            return this;
        }

        public Builder encounter(final Reference encounter) {
            b.add(PROPERTY_ENCOUNTER, encounter);
            return this;
        }

        public Builder sent(final java.time.Instant sent) {
            b.add(PROPERTY_SENT, sent.toString());
            return this;
        }

        public Builder received(final java.time.Instant received) {
            b.add(PROPERTY_RECEIVED, received.toString());
            return this;
        }

        public Builder recipient(final java.util.List<Reference> recipient) {
            b.add(PROPERTY_RECIPIENT, FhirObject.toArray(recipient));
            return this;
        }

        public Builder sender(final Reference sender) {
            b.add(PROPERTY_SENDER, sender);
            return this;
        }

        public Builder reasonCode(final java.util.List<CodeableConcept> reasonCode) {
            b.add(PROPERTY_REASON_CODE, FhirObject.toArray(reasonCode));
            return this;
        }

        public Builder reasonReference(final java.util.List<Reference> reasonReference) {
            b.add(PROPERTY_REASON_REFERENCE, FhirObject.toArray(reasonReference));
            return this;
        }

        public Builder payload(final java.util.List<CommunicationPayload> payload) {
            b.add(PROPERTY_PAYLOAD, FhirObject.toArray(payload));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Communication build() {
            return new Communication(b.build());
        }
    }

    /**
     * An occurrence of information being transmitted; e.g. an alert that was
     * sent to a responsible provider, a public health agency that was
     * notified about a reportable condition.
     */
    public static class CommunicationPayload extends FhirObject {
        public static final String RESOURCE_TYPE = "CommunicationPayload";
        public static final String PROPERTY_ID = "id";
        public static final String PROPERTY_EXTENSION = "extension";
        public static final String PROPERTY_MODIFIER_EXTENSION = "modifierExtension";
        public static final String PROPERTY_CONTENT_STRING = "contentString";
        public static final String PROPERTY_CONTENT_ATTACHMENT = "contentAttachment";
        public static final String PROPERTY_CONTENT_REFERENCE = "contentReference";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public CommunicationPayload(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * A communicated content (or for multi-part communications, one portion
         * of the communication).
         */
        public String contentString() {
            return getString(PROPERTY_CONTENT_STRING);
        }

        /**
         * A communicated content (or for multi-part communications, one portion
         * of the communication).
         */
        public Attachment contentAttachment() {
            return getObject(Attachment.class, PROPERTY_CONTENT_ATTACHMENT);
        }

        /**
         * A communicated content (or for multi-part communications, one portion
         * of the communication).
         */
        public Reference contentReference() {
            return getObject(Reference.class, PROPERTY_CONTENT_REFERENCE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder contentString(final String contentString) {
                b.add(PROPERTY_CONTENT_STRING, contentString);
                return this;
            }

            public Builder contentAttachment(final Attachment contentAttachment) {
                b.add(PROPERTY_CONTENT_ATTACHMENT, contentAttachment);
                return this;
            }

            public Builder contentReference(final Reference contentReference) {
                b.add(PROPERTY_CONTENT_REFERENCE, contentReference);
                return this;
            }

            public CommunicationPayload build() {
                return new CommunicationPayload(b.build());
            }
        }
    }
}
