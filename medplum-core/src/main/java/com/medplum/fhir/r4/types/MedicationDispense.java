/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Indicates that a medication product is to be or has been dispensed for
 * a named person/patient.  This includes a description of the medication
 * product (supply) provided and the instructions for administering the
 * medication.  The medication dispense is the result of a pharmacy
 * system responding to a medication order.
 */
public class MedicationDispense extends FhirResource {
    public static final String RESOURCE_TYPE = "MedicationDispense";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public MedicationDispense(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(FhirPropertyNames.PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, FhirPropertyNames.PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, FhirPropertyNames.PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Identifiers associated with this Medication Dispense that are defined
     * by business processes and/or used to refer to it when a direct URL
     * reference to the resource itself is not appropriate. They are business
     * identifiers assigned to this resource by the performer or other
     * systems and remain constant as the resource is updated and propagates
     * from server to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The procedure that trigger the dispense.
     */
    public java.util.List<Reference> partOf() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_PART_OF);
    }

    /**
     * A code specifying the state of the set of dispense events.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * Indicates the reason why a dispense was not performed.
     */
    public CodeableConcept statusReasonCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_STATUS_REASON_CODEABLE_CONCEPT);
    }

    /**
     * Indicates the reason why a dispense was not performed.
     */
    public Reference statusReasonReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_STATUS_REASON_REFERENCE);
    }

    /**
     * Indicates the type of medication dispense (for example, where the
     * medication is expected to be consumed or administered (i.e. inpatient
     * or outpatient)).
     */
    public CodeableConcept category() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
    }

    /**
     * Identifies the medication being administered. This is either a link to
     * a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    public CodeableConcept medicationCodeableConcept() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_MEDICATION_CODEABLE_CONCEPT);
    }

    /**
     * Identifies the medication being administered. This is either a link to
     * a resource representing the details of the medication or a simple
     * attribute carrying a code that identifies the medication from a known
     * list of medications.
     */
    public Reference medicationReference() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_MEDICATION_REFERENCE);
    }

    /**
     * A link to a resource representing the person or the group to whom the
     * medication will be given.
     */
    public Reference subject() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_SUBJECT);
    }

    /**
     * The encounter or episode of care that establishes the context for this
     * event.
     */
    public Reference context() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_CONTEXT);
    }

    /**
     * Additional information that supports the medication being dispensed.
     */
    public java.util.List<Reference> supportingInformation() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_SUPPORTING_INFORMATION);
    }

    /**
     * Indicates who or what performed the event.
     */
    public java.util.List<MedicationDispensePerformer> performer() {
        return getList(MedicationDispensePerformer.class, FhirPropertyNames.PROPERTY_PERFORMER);
    }

    /**
     * The principal physical location where the dispense was performed.
     */
    public Reference location() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_LOCATION);
    }

    /**
     * Indicates the medication order that is being dispensed against.
     */
    public java.util.List<Reference> authorizingPrescription() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_AUTHORIZING_PRESCRIPTION);
    }

    /**
     * Indicates the type of dispensing event that is performed. For example,
     * Trial Fill, Completion of Trial, Partial Fill, Emergency Fill,
     * Samples, etc.
     */
    public CodeableConcept type() {
        return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * The amount of medication that has been dispensed. Includes unit of
     * measure.
     */
    public Quantity quantity() {
        return getObject(Quantity.class, FhirPropertyNames.PROPERTY_QUANTITY);
    }

    /**
     * The amount of medication expressed as a timing amount.
     */
    public Quantity daysSupply() {
        return getObject(Quantity.class, FhirPropertyNames.PROPERTY_DAYS_SUPPLY);
    }

    /**
     * The time when the dispensed product was packaged and reviewed.
     */
    public java.time.Instant whenPrepared() {
        return getInstant(FhirPropertyNames.PROPERTY_WHEN_PREPARED);
    }

    /**
     * The time the dispensed product was provided to the patient or their
     * representative.
     */
    public java.time.Instant whenHandedOver() {
        return getInstant(FhirPropertyNames.PROPERTY_WHEN_HANDED_OVER);
    }

    /**
     * Identification of the facility/location where the medication was
     * shipped to, as part of the dispense event.
     */
    public Reference destination() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_DESTINATION);
    }

    /**
     * Identifies the person who picked up the medication.  This will usually
     * be a patient or their caregiver, but some cases exist where it can be
     * a healthcare professional.
     */
    public java.util.List<Reference> receiver() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_RECEIVER);
    }

    /**
     * Extra information about the dispense that could not be conveyed in the
     * other attributes.
     */
    public java.util.List<Annotation> note() {
        return getList(Annotation.class, FhirPropertyNames.PROPERTY_NOTE);
    }

    /**
     * Indicates how the medication is to be used by the patient.
     */
    public java.util.List<Dosage> dosageInstruction() {
        return getList(Dosage.class, FhirPropertyNames.PROPERTY_DOSAGE_INSTRUCTION);
    }

    /**
     * Indicates whether or not substitution was made as part of the
     * dispense.  In some cases, substitution will be expected but does not
     * happen, in other cases substitution is not expected but does happen.
     * This block explains what substitution did or did not happen and why.
     * If nothing is specified, substitution was not done.
     */
    public MedicationDispenseSubstitution substitution() {
        return getObject(MedicationDispenseSubstitution.class, FhirPropertyNames.PROPERTY_SUBSTITUTION);
    }

    /**
     * Indicates an actual or potential clinical issue with or between one or
     * more active or proposed clinical actions for a patient; e.g. drug-drug
     * interaction, duplicate therapy, dosage alert etc.
     */
    public java.util.List<Reference> detectedIssue() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_DETECTED_ISSUE);
    }

    /**
     * A summary of the events of interest that have occurred, such as when
     * the dispense was verified.
     */
    public java.util.List<Reference> eventHistory() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_EVENT_HISTORY);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(FhirPropertyNames.PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(FhirPropertyNames.PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(FhirPropertyNames.PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(FhirPropertyNames.PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(FhirPropertyNames.PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder partOf(final java.util.List<Reference> partOf) {
            b.add(FhirPropertyNames.PROPERTY_PART_OF, FhirObject.toArray(partOf));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder statusReasonCodeableConcept(final CodeableConcept statusReasonCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_REASON_CODEABLE_CONCEPT, statusReasonCodeableConcept);
            return this;
        }

        public Builder statusReasonReference(final Reference statusReasonReference) {
            b.add(FhirPropertyNames.PROPERTY_STATUS_REASON_REFERENCE, statusReasonReference);
            return this;
        }

        public Builder category(final CodeableConcept category) {
            b.add(FhirPropertyNames.PROPERTY_CATEGORY, category);
            return this;
        }

        public Builder medicationCodeableConcept(final CodeableConcept medicationCodeableConcept) {
            b.add(FhirPropertyNames.PROPERTY_MEDICATION_CODEABLE_CONCEPT, medicationCodeableConcept);
            return this;
        }

        public Builder medicationReference(final Reference medicationReference) {
            b.add(FhirPropertyNames.PROPERTY_MEDICATION_REFERENCE, medicationReference);
            return this;
        }

        public Builder subject(final Reference subject) {
            b.add(FhirPropertyNames.PROPERTY_SUBJECT, subject);
            return this;
        }

        public Builder context(final Reference context) {
            b.add(FhirPropertyNames.PROPERTY_CONTEXT, context);
            return this;
        }

        public Builder supportingInformation(final java.util.List<Reference> supportingInformation) {
            b.add(FhirPropertyNames.PROPERTY_SUPPORTING_INFORMATION, FhirObject.toArray(supportingInformation));
            return this;
        }

        public Builder performer(final java.util.List<MedicationDispensePerformer> performer) {
            b.add(FhirPropertyNames.PROPERTY_PERFORMER, FhirObject.toArray(performer));
            return this;
        }

        public Builder location(final Reference location) {
            b.add(FhirPropertyNames.PROPERTY_LOCATION, location);
            return this;
        }

        public Builder authorizingPrescription(final java.util.List<Reference> authorizingPrescription) {
            b.add(FhirPropertyNames.PROPERTY_AUTHORIZING_PRESCRIPTION, FhirObject.toArray(authorizingPrescription));
            return this;
        }

        public Builder type(final CodeableConcept type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, type);
            return this;
        }

        public Builder quantity(final Quantity quantity) {
            b.add(FhirPropertyNames.PROPERTY_QUANTITY, quantity);
            return this;
        }

        public Builder daysSupply(final Quantity daysSupply) {
            b.add(FhirPropertyNames.PROPERTY_DAYS_SUPPLY, daysSupply);
            return this;
        }

        public Builder whenPrepared(final java.time.Instant whenPrepared) {
            b.add(FhirPropertyNames.PROPERTY_WHEN_PREPARED, whenPrepared.toString());
            return this;
        }

        public Builder whenHandedOver(final java.time.Instant whenHandedOver) {
            b.add(FhirPropertyNames.PROPERTY_WHEN_HANDED_OVER, whenHandedOver.toString());
            return this;
        }

        public Builder destination(final Reference destination) {
            b.add(FhirPropertyNames.PROPERTY_DESTINATION, destination);
            return this;
        }

        public Builder receiver(final java.util.List<Reference> receiver) {
            b.add(FhirPropertyNames.PROPERTY_RECEIVER, FhirObject.toArray(receiver));
            return this;
        }

        public Builder note(final java.util.List<Annotation> note) {
            b.add(FhirPropertyNames.PROPERTY_NOTE, FhirObject.toArray(note));
            return this;
        }

        public Builder dosageInstruction(final java.util.List<Dosage> dosageInstruction) {
            b.add(FhirPropertyNames.PROPERTY_DOSAGE_INSTRUCTION, FhirObject.toArray(dosageInstruction));
            return this;
        }

        public Builder substitution(final MedicationDispenseSubstitution substitution) {
            b.add(FhirPropertyNames.PROPERTY_SUBSTITUTION, substitution);
            return this;
        }

        public Builder detectedIssue(final java.util.List<Reference> detectedIssue) {
            b.add(FhirPropertyNames.PROPERTY_DETECTED_ISSUE, FhirObject.toArray(detectedIssue));
            return this;
        }

        public Builder eventHistory(final java.util.List<Reference> eventHistory) {
            b.add(FhirPropertyNames.PROPERTY_EVENT_HISTORY, FhirObject.toArray(eventHistory));
            return this;
        }

        public MedicationDispense build() {
            return new MedicationDispense(b.build());
        }
    }

    /**
     * Indicates that a medication product is to be or has been dispensed for
     * a named person/patient.  This includes a description of the medication
     * product (supply) provided and the instructions for administering the
     * medication.  The medication dispense is the result of a pharmacy
     * system responding to a medication order.
     */
    public static class MedicationDispensePerformer extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationDispensePerformer";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationDispensePerformer(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Distinguishes the type of performer in the dispense.  For example,
         * date enterer, packager, final checker.
         */
        public CodeableConcept function() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_FUNCTION);
        }

        /**
         * The device, practitioner, etc. who performed the action.  It should be
         * assumed that the actor is the dispenser of the medication.
         */
        public Reference actor() {
            return getObject(Reference.class, FhirPropertyNames.PROPERTY_ACTOR);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder function(final CodeableConcept function) {
                b.add(FhirPropertyNames.PROPERTY_FUNCTION, function);
                return this;
            }

            public Builder actor(final Reference actor) {
                b.add(FhirPropertyNames.PROPERTY_ACTOR, actor);
                return this;
            }

            public MedicationDispensePerformer build() {
                return new MedicationDispensePerformer(b.build());
            }
        }
    }

    /**
     * Indicates that a medication product is to be or has been dispensed for
     * a named person/patient.  This includes a description of the medication
     * product (supply) provided and the instructions for administering the
     * medication.  The medication dispense is the result of a pharmacy
     * system responding to a medication order.
     */
    public static class MedicationDispenseSubstitution extends FhirObject {
        public static final String RESOURCE_TYPE = "MedicationDispenseSubstitution";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public MedicationDispenseSubstitution(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * True if the dispenser dispensed a different drug or product from what
         * was prescribed.
         */
        public Boolean wasSubstituted() {
            return data.getBoolean(FhirPropertyNames.PROPERTY_WAS_SUBSTITUTED);
        }

        /**
         * A code signifying whether a different drug was dispensed from what was
         * prescribed.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Indicates the reason for the substitution (or lack of substitution)
         * from what was prescribed.
         */
        public java.util.List<CodeableConcept> reason() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_REASON);
        }

        /**
         * The person or organization that has primary responsibility for the
         * substitution.
         */
        public java.util.List<Reference> responsibleParty() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_RESPONSIBLE_PARTY);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder wasSubstituted(final Boolean wasSubstituted) {
                b.add(FhirPropertyNames.PROPERTY_WAS_SUBSTITUTED, wasSubstituted);
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder reason(final java.util.List<CodeableConcept> reason) {
                b.add(FhirPropertyNames.PROPERTY_REASON, FhirObject.toArray(reason));
                return this;
            }

            public Builder responsibleParty(final java.util.List<Reference> responsibleParty) {
                b.add(FhirPropertyNames.PROPERTY_RESPONSIBLE_PARTY, FhirObject.toArray(responsibleParty));
                return this;
            }

            public MedicationDispenseSubstitution build() {
                return new MedicationDispenseSubstitution(b.build());
            }
        }
    }
}
