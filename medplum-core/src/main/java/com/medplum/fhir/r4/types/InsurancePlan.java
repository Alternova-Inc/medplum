/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.r4.types;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;

import com.medplum.fhir.r4.FhirPropertyNames;

/**
 * Details of a Health Insurance product/plan provided by an
 * organization.
 */
public class InsurancePlan extends FhirResource {
    public static final String RESOURCE_TYPE = "InsurancePlan";

    public static Builder create() {
        return new Builder();
    }

    public static Builder create(final JsonObject data) {
        return new Builder(data);
    }

    public InsurancePlan(final JsonObject data) {
        super(data);
    }

    /**
     * A reference to a set of rules that were followed when the resource was
     * constructed, and which must be understood when processing the content.
     * Often, this is a reference to an implementation guide that defines the
     * special rules along with other profiles etc.
     */
    public java.net.URI implicitRules() {
        return getUri(FhirPropertyNames.PROPERTY_IMPLICIT_RULES);
    }

    /**
     * The base language in which the resource is written.
     */
    public String language() {
        return getString(FhirPropertyNames.PROPERTY_LANGUAGE);
    }

    /**
     * A human-readable narrative that contains a summary of the resource and
     * can be used to represent the content of the resource to a human. The
     * narrative need not encode all the structured data, but is required to
     * contain sufficient detail to make it &quot;clinically safe&quot; for a human to
     * just read the narrative. Resource definitions may define what content
     * should be represented in the narrative to ensure clinical safety.
     */
    public Narrative text() {
        return getObject(Narrative.class, FhirPropertyNames.PROPERTY_TEXT);
    }

    /**
     * These resources do not have an independent existence apart from the
     * resource that contains them - they cannot be identified independently,
     * and nor can they have their own independent transaction scope.
     */
    public java.util.List<FhirResource> contained() {
        return getList(FhirResource.class, FhirPropertyNames.PROPERTY_CONTAINED);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource. To make the use of extensions
     * safe and manageable, there is a strict set of governance  applied to
     * the definition and use of extensions. Though any implementer can
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension.
     */
    public java.util.List<Extension> extension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
    }

    /**
     * May be used to represent additional information that is not part of
     * the basic definition of the resource and that modifies the
     * understanding of the element that contains it and/or the understanding
     * of the containing element's descendants. Usually modifier elements
     * provide negation or qualification. To make the use of extensions safe
     * and manageable, there is a strict set of governance applied to the
     * definition and use of extensions. Though any implementer is allowed to
     * define an extension, there is a set of requirements that SHALL be met
     * as part of the definition of the extension. Applications processing a
     * resource are required to check for modifier extensions.
     *
     * Modifier extensions SHALL NOT change the meaning of any elements on
     * Resource or DomainResource (including cannot change the meaning of
     * modifierExtension itself).
     */
    public java.util.List<Extension> modifierExtension() {
        return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
    }

    /**
     * Business identifiers assigned to this health insurance product which
     * remain constant as the resource is updated and propagates from server
     * to server.
     */
    public java.util.List<Identifier> identifier() {
        return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
    }

    /**
     * The current state of the health insurance product.
     */
    public String status() {
        return getString(FhirPropertyNames.PROPERTY_STATUS);
    }

    /**
     * The kind of health insurance product.
     */
    public java.util.List<CodeableConcept> type() {
        return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
    }

    /**
     * Official name of the health insurance product as designated by the
     * owner.
     */
    public String name() {
        return getString(FhirPropertyNames.PROPERTY_NAME);
    }

    /**
     * A list of alternate names that the product is known as, or was known
     * as in the past.
     */
    public java.util.List<String> alias() {
        return getList(String.class, FhirPropertyNames.PROPERTY_ALIAS);
    }

    /**
     * The period of time that the health insurance product is available.
     */
    public Period period() {
        return getObject(Period.class, FhirPropertyNames.PROPERTY_PERIOD);
    }

    /**
     * The entity that is providing  the health insurance product and
     * underwriting the risk.  This is typically an insurance carriers, other
     * third-party payers, or health plan sponsors comonly referred to as
     * 'payers'.
     */
    public Reference ownedBy() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_OWNED_BY);
    }

    /**
     * An organization which administer other services such as underwriting,
     * customer service and/or claims processing on behalf of the health
     * insurance product owner.
     */
    public Reference administeredBy() {
        return getObject(Reference.class, FhirPropertyNames.PROPERTY_ADMINISTERED_BY);
    }

    /**
     * The geographic region in which a health insurance product's benefits
     * apply.
     */
    public java.util.List<Reference> coverageArea() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_COVERAGE_AREA);
    }

    /**
     * The contact for the health insurance product for a certain purpose.
     */
    public java.util.List<InsurancePlanContact> contact() {
        return getList(InsurancePlanContact.class, FhirPropertyNames.PROPERTY_CONTACT);
    }

    /**
     * The technical endpoints providing access to services operated for the
     * health insurance product.
     */
    public java.util.List<Reference> endpoint() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_ENDPOINT);
    }

    /**
     * Reference to the network included in the health insurance product.
     */
    public java.util.List<Reference> network() {
        return getList(Reference.class, FhirPropertyNames.PROPERTY_NETWORK);
    }

    /**
     * Details about the coverage offered by the insurance product.
     */
    public java.util.List<InsurancePlanCoverage> coverage() {
        return getList(InsurancePlanCoverage.class, FhirPropertyNames.PROPERTY_COVERAGE);
    }

    /**
     * Details about an insurance plan.
     */
    public java.util.List<InsurancePlanPlan> plan() {
        return getList(InsurancePlanPlan.class, FhirPropertyNames.PROPERTY_PLAN);
    }

    public static class Builder extends FhirResource.Builder {

        private Builder() {
            super(RESOURCE_TYPE);
        }

        private Builder(final JsonObject data) {
            super(RESOURCE_TYPE, data);
        }

        public Builder resourceType(final String resourceType) {
            b.add(FhirPropertyNames.PROPERTY_RESOURCE_TYPE, resourceType);
            return this;
        }

        public Builder id(final String id) {
            b.add(FhirPropertyNames.PROPERTY_ID, id);
            return this;
        }

        public Builder meta(final Meta meta) {
            b.add(FhirPropertyNames.PROPERTY_META, meta);
            return this;
        }

        public Builder implicitRules(final java.net.URI implicitRules) {
            b.add(FhirPropertyNames.PROPERTY_IMPLICIT_RULES, implicitRules.toString());
            return this;
        }

        public Builder language(final String language) {
            b.add(FhirPropertyNames.PROPERTY_LANGUAGE, language);
            return this;
        }

        public Builder text(final Narrative text) {
            b.add(FhirPropertyNames.PROPERTY_TEXT, text);
            return this;
        }

        public Builder contained(final java.util.List<FhirResource> contained) {
            b.add(FhirPropertyNames.PROPERTY_CONTAINED, FhirObject.toArray(contained));
            return this;
        }

        public Builder extension(final java.util.List<Extension> extension) {
            b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
            return this;
        }

        public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
            b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
            return this;
        }

        public Builder identifier(final java.util.List<Identifier> identifier) {
            b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
            return this;
        }

        public Builder status(final String status) {
            b.add(FhirPropertyNames.PROPERTY_STATUS, status);
            return this;
        }

        public Builder type(final java.util.List<CodeableConcept> type) {
            b.add(FhirPropertyNames.PROPERTY_TYPE, FhirObject.toArray(type));
            return this;
        }

        public Builder name(final String name) {
            b.add(FhirPropertyNames.PROPERTY_NAME, name);
            return this;
        }

        public Builder alias(final java.util.List<String> alias) {
            b.add(FhirPropertyNames.PROPERTY_ALIAS, FhirObject.toStringArray(alias));
            return this;
        }

        public Builder period(final Period period) {
            b.add(FhirPropertyNames.PROPERTY_PERIOD, period);
            return this;
        }

        public Builder ownedBy(final Reference ownedBy) {
            b.add(FhirPropertyNames.PROPERTY_OWNED_BY, ownedBy);
            return this;
        }

        public Builder administeredBy(final Reference administeredBy) {
            b.add(FhirPropertyNames.PROPERTY_ADMINISTERED_BY, administeredBy);
            return this;
        }

        public Builder coverageArea(final java.util.List<Reference> coverageArea) {
            b.add(FhirPropertyNames.PROPERTY_COVERAGE_AREA, FhirObject.toArray(coverageArea));
            return this;
        }

        public Builder contact(final java.util.List<InsurancePlanContact> contact) {
            b.add(FhirPropertyNames.PROPERTY_CONTACT, FhirObject.toArray(contact));
            return this;
        }

        public Builder endpoint(final java.util.List<Reference> endpoint) {
            b.add(FhirPropertyNames.PROPERTY_ENDPOINT, FhirObject.toArray(endpoint));
            return this;
        }

        public Builder network(final java.util.List<Reference> network) {
            b.add(FhirPropertyNames.PROPERTY_NETWORK, FhirObject.toArray(network));
            return this;
        }

        public Builder coverage(final java.util.List<InsurancePlanCoverage> coverage) {
            b.add(FhirPropertyNames.PROPERTY_COVERAGE, FhirObject.toArray(coverage));
            return this;
        }

        public Builder plan(final java.util.List<InsurancePlanPlan> plan) {
            b.add(FhirPropertyNames.PROPERTY_PLAN, FhirObject.toArray(plan));
            return this;
        }

        public InsurancePlan build() {
            return new InsurancePlan(b.build());
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanBenefit extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanBenefit";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanBenefit(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of benefit (primary care; speciality care; inpatient;
         * outpatient).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The referral requirements to have access/coverage for this benefit.
         */
        public String requirement() {
            return getString(FhirPropertyNames.PROPERTY_REQUIREMENT);
        }

        /**
         * The specific limits on the benefit.
         */
        public java.util.List<InsurancePlanLimit> limit() {
            return getList(InsurancePlanLimit.class, FhirPropertyNames.PROPERTY_LIMIT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder requirement(final String requirement) {
                b.add(FhirPropertyNames.PROPERTY_REQUIREMENT, requirement);
                return this;
            }

            public Builder limit(final java.util.List<InsurancePlanLimit> limit) {
                b.add(FhirPropertyNames.PROPERTY_LIMIT, FhirObject.toArray(limit));
                return this;
            }

            public InsurancePlanBenefit build() {
                return new InsurancePlanBenefit(b.build());
            }
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanBenefit1 extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanBenefit1";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanBenefit1(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of specific benefit (preventative; primary care office visit;
         * speciality office visit; hospitalization; emergency room; urgent
         * care).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * List of the costs associated with a specific benefit.
         */
        public java.util.List<InsurancePlanCost> cost() {
            return getList(InsurancePlanCost.class, FhirPropertyNames.PROPERTY_COST);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder cost(final java.util.List<InsurancePlanCost> cost) {
                b.add(FhirPropertyNames.PROPERTY_COST, FhirObject.toArray(cost));
                return this;
            }

            public InsurancePlanBenefit1 build() {
                return new InsurancePlanBenefit1(b.build());
            }
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanContact extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanContact";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanContact(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Indicates a purpose for which the contact can be reached.
         */
        public CodeableConcept purpose() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_PURPOSE);
        }

        /**
         * A name associated with the contact.
         */
        public HumanName name() {
            return getObject(HumanName.class, FhirPropertyNames.PROPERTY_NAME);
        }

        /**
         * A contact detail (e.g. a telephone number or an email address) by
         * which the party may be contacted.
         */
        public java.util.List<ContactPoint> telecom() {
            return getList(ContactPoint.class, FhirPropertyNames.PROPERTY_TELECOM);
        }

        /**
         * Visiting or postal addresses for the contact.
         */
        public Address address() {
            return getObject(Address.class, FhirPropertyNames.PROPERTY_ADDRESS);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder purpose(final CodeableConcept purpose) {
                b.add(FhirPropertyNames.PROPERTY_PURPOSE, purpose);
                return this;
            }

            public Builder name(final HumanName name) {
                b.add(FhirPropertyNames.PROPERTY_NAME, name);
                return this;
            }

            public Builder telecom(final java.util.List<ContactPoint> telecom) {
                b.add(FhirPropertyNames.PROPERTY_TELECOM, FhirObject.toArray(telecom));
                return this;
            }

            public Builder address(final Address address) {
                b.add(FhirPropertyNames.PROPERTY_ADDRESS, address);
                return this;
            }

            public InsurancePlanContact build() {
                return new InsurancePlanContact(b.build());
            }
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanCost extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanCost";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanCost(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of cost (copay; individual cap; family cap; coinsurance;
         * deductible).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Whether the cost applies to in-network or out-of-network providers
         * (in-network; out-of-network; other).
         */
        public CodeableConcept applicability() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_APPLICABILITY);
        }

        /**
         * Additional information about the cost, such as information about
         * funding sources (e.g. HSA, HRA, FSA, RRA).
         */
        public java.util.List<CodeableConcept> qualifiers() {
            return getList(CodeableConcept.class, FhirPropertyNames.PROPERTY_QUALIFIERS);
        }

        /**
         * The actual cost value. (some of the costs may be represented as
         * percentages rather than currency, e.g. 10% coinsurance).
         */
        public Quantity value() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder applicability(final CodeableConcept applicability) {
                b.add(FhirPropertyNames.PROPERTY_APPLICABILITY, applicability);
                return this;
            }

            public Builder qualifiers(final java.util.List<CodeableConcept> qualifiers) {
                b.add(FhirPropertyNames.PROPERTY_QUALIFIERS, FhirObject.toArray(qualifiers));
                return this;
            }

            public Builder value(final Quantity value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public InsurancePlanCost build() {
                return new InsurancePlanCost(b.build());
            }
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanCoverage extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanCoverage";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanCoverage(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of coverage  (Medical; Dental; Mental Health; Substance Abuse;
         * Vision; Drug; Short Term; Long Term Care; Hospice; Home Health).
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Reference to the network that providing the type of coverage.
         */
        public java.util.List<Reference> network() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_NETWORK);
        }

        /**
         * Specific benefits under this type of coverage.
         */
        public java.util.List<InsurancePlanBenefit> benefit() {
            return getList(InsurancePlanBenefit.class, FhirPropertyNames.PROPERTY_BENEFIT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder network(final java.util.List<Reference> network) {
                b.add(FhirPropertyNames.PROPERTY_NETWORK, FhirObject.toArray(network));
                return this;
            }

            public Builder benefit(final java.util.List<InsurancePlanBenefit> benefit) {
                b.add(FhirPropertyNames.PROPERTY_BENEFIT, FhirObject.toArray(benefit));
                return this;
            }

            public InsurancePlanCoverage build() {
                return new InsurancePlanCoverage(b.build());
            }
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanGeneralCost extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanGeneralCost";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanGeneralCost(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Type of cost.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * Number of participants enrolled in the plan.
         */
        public Integer groupSize() {
            return data.getInt(FhirPropertyNames.PROPERTY_GROUP_SIZE);
        }

        /**
         * Value of the cost.
         */
        public Money cost() {
            return getObject(Money.class, FhirPropertyNames.PROPERTY_COST);
        }

        /**
         * Additional information about the general costs associated with this
         * plan.
         */
        public String comment() {
            return getString(FhirPropertyNames.PROPERTY_COMMENT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder groupSize(final Integer groupSize) {
                b.add(FhirPropertyNames.PROPERTY_GROUP_SIZE, groupSize);
                return this;
            }

            public Builder cost(final Money cost) {
                b.add(FhirPropertyNames.PROPERTY_COST, cost);
                return this;
            }

            public Builder comment(final String comment) {
                b.add(FhirPropertyNames.PROPERTY_COMMENT, comment);
                return this;
            }

            public InsurancePlanGeneralCost build() {
                return new InsurancePlanGeneralCost(b.build());
            }
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanLimit extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanLimit";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanLimit(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * The maximum amount of a service item a plan will pay for a covered
         * benefit.  For examples. wellness visits, or eyeglasses.
         */
        public Quantity value() {
            return getObject(Quantity.class, FhirPropertyNames.PROPERTY_VALUE);
        }

        /**
         * The specific limit on the benefit.
         */
        public CodeableConcept code() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CODE);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder value(final Quantity value) {
                b.add(FhirPropertyNames.PROPERTY_VALUE, value);
                return this;
            }

            public Builder code(final CodeableConcept code) {
                b.add(FhirPropertyNames.PROPERTY_CODE, code);
                return this;
            }

            public InsurancePlanLimit build() {
                return new InsurancePlanLimit(b.build());
            }
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanPlan extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanPlan";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanPlan(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * Business identifiers assigned to this health insurance plan which
         * remain constant as the resource is updated and propagates from server
         * to server.
         */
        public java.util.List<Identifier> identifier() {
            return getList(Identifier.class, FhirPropertyNames.PROPERTY_IDENTIFIER);
        }

        /**
         * Type of plan. For example, &quot;Platinum&quot; or &quot;High Deductable&quot;.
         */
        public CodeableConcept type() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_TYPE);
        }

        /**
         * The geographic region in which a health insurance plan's benefits
         * apply.
         */
        public java.util.List<Reference> coverageArea() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_COVERAGE_AREA);
        }

        /**
         * Reference to the network that providing the type of coverage.
         */
        public java.util.List<Reference> network() {
            return getList(Reference.class, FhirPropertyNames.PROPERTY_NETWORK);
        }

        /**
         * Overall costs associated with the plan.
         */
        public java.util.List<InsurancePlanGeneralCost> generalCost() {
            return getList(InsurancePlanGeneralCost.class, FhirPropertyNames.PROPERTY_GENERAL_COST);
        }

        /**
         * Costs associated with the coverage provided by the product.
         */
        public java.util.List<InsurancePlanSpecificCost> specificCost() {
            return getList(InsurancePlanSpecificCost.class, FhirPropertyNames.PROPERTY_SPECIFIC_COST);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder identifier(final java.util.List<Identifier> identifier) {
                b.add(FhirPropertyNames.PROPERTY_IDENTIFIER, FhirObject.toArray(identifier));
                return this;
            }

            public Builder type(final CodeableConcept type) {
                b.add(FhirPropertyNames.PROPERTY_TYPE, type);
                return this;
            }

            public Builder coverageArea(final java.util.List<Reference> coverageArea) {
                b.add(FhirPropertyNames.PROPERTY_COVERAGE_AREA, FhirObject.toArray(coverageArea));
                return this;
            }

            public Builder network(final java.util.List<Reference> network) {
                b.add(FhirPropertyNames.PROPERTY_NETWORK, FhirObject.toArray(network));
                return this;
            }

            public Builder generalCost(final java.util.List<InsurancePlanGeneralCost> generalCost) {
                b.add(FhirPropertyNames.PROPERTY_GENERAL_COST, FhirObject.toArray(generalCost));
                return this;
            }

            public Builder specificCost(final java.util.List<InsurancePlanSpecificCost> specificCost) {
                b.add(FhirPropertyNames.PROPERTY_SPECIFIC_COST, FhirObject.toArray(specificCost));
                return this;
            }

            public InsurancePlanPlan build() {
                return new InsurancePlanPlan(b.build());
            }
        }
    }

    /**
     * Details of a Health Insurance product/plan provided by an
     * organization.
     */
    public static class InsurancePlanSpecificCost extends FhirObject {
        public static final String RESOURCE_TYPE = "InsurancePlanSpecificCost";

        public static Builder create() {
            return new Builder();
        }

        public static Builder create(final JsonObject data) {
            return new Builder(data);
        }

        public InsurancePlanSpecificCost(final JsonObject data) {
            super(data);
        }

        /**
         * Unique id for the element within a resource (for internal references).
         * This may be any string value that does not contain spaces.
         */
        public String id() {
            return getString(FhirPropertyNames.PROPERTY_ID);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element. To make the use of extensions
         * safe and manageable, there is a strict set of governance  applied to
         * the definition and use of extensions. Though any implementer can
         * define an extension, there is a set of requirements that SHALL be met
         * as part of the definition of the extension.
         */
        public java.util.List<Extension> extension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_EXTENSION);
        }

        /**
         * May be used to represent additional information that is not part of
         * the basic definition of the element and that modifies the
         * understanding of the element in which it is contained and/or the
         * understanding of the containing element's descendants. Usually
         * modifier elements provide negation or qualification. To make the use
         * of extensions safe and manageable, there is a strict set of governance
         * applied to the definition and use of extensions. Though any
         * implementer can define an extension, there is a set of requirements
         * that SHALL be met as part of the definition of the extension.
         * Applications processing a resource are required to check for modifier
         * extensions.
         *
         * Modifier extensions SHALL NOT change the meaning of any elements on
         * Resource or DomainResource (including cannot change the meaning of
         * modifierExtension itself).
         */
        public java.util.List<Extension> modifierExtension() {
            return getList(Extension.class, FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION);
        }

        /**
         * General category of benefit (Medical; Dental; Vision; Drug; Mental
         * Health; Substance Abuse; Hospice, Home Health).
         */
        public CodeableConcept category() {
            return getObject(CodeableConcept.class, FhirPropertyNames.PROPERTY_CATEGORY);
        }

        /**
         * List of the specific benefits under this category of benefit.
         */
        public java.util.List<InsurancePlanBenefit1> benefit() {
            return getList(InsurancePlanBenefit1.class, FhirPropertyNames.PROPERTY_BENEFIT);
        }

        public static class Builder {
            private final JsonObjectBuilder b;

            private Builder() {
                b = Json.createObjectBuilder();
            }

            private Builder(final JsonObject data) {
                b = Json.createObjectBuilder(data);
            }

            public Builder id(final String id) {
                b.add(FhirPropertyNames.PROPERTY_ID, id);
                return this;
            }

            public Builder extension(final java.util.List<Extension> extension) {
                b.add(FhirPropertyNames.PROPERTY_EXTENSION, FhirObject.toArray(extension));
                return this;
            }

            public Builder modifierExtension(final java.util.List<Extension> modifierExtension) {
                b.add(FhirPropertyNames.PROPERTY_MODIFIER_EXTENSION, FhirObject.toArray(modifierExtension));
                return this;
            }

            public Builder category(final CodeableConcept category) {
                b.add(FhirPropertyNames.PROPERTY_CATEGORY, category);
                return this;
            }

            public Builder benefit(final java.util.List<InsurancePlanBenefit1> benefit) {
                b.add(FhirPropertyNames.PROPERTY_BENEFIT, FhirObject.toArray(benefit));
                return this;
            }

            public InsurancePlanSpecificCost build() {
                return new InsurancePlanSpecificCost(b.build());
            }
        }
    }
}
