/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.Test;

public class ImmunizationEvaluationTest {

    @Test
    public void testResourceType() {
        assertEquals("x", ImmunizationEvaluation.create().resourceType("x").build().resourceType());
    }

    @Test
    public void testId() {
        assertEquals("x", ImmunizationEvaluation.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, ImmunizationEvaluation.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        assertEquals("x", ImmunizationEvaluation.create().implicitRules("x").build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", ImmunizationEvaluation.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, ImmunizationEvaluation.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, ImmunizationEvaluation.create().contained(value).build().contained());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, ImmunizationEvaluation.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, ImmunizationEvaluation.create().identifier(value).build().identifier());
    }

    @Test
    public void testStatus() {
        assertEquals("x", ImmunizationEvaluation.create().status("x").build().status());
    }

    @Test
    public void testPatient() {
        final Reference value = Reference.create().build();
        assertEquals(value, ImmunizationEvaluation.create().patient(value).build().patient());
    }

    @Test
    public void testDate() {
        final java.time.Instant value = java.time.Instant.now();
        assertEquals(value, ImmunizationEvaluation.create().date(value).build().date());
    }

    @Test
    public void testAuthority() {
        final Reference value = Reference.create().build();
        assertEquals(value, ImmunizationEvaluation.create().authority(value).build().authority());
    }

    @Test
    public void testTargetDisease() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ImmunizationEvaluation.create().targetDisease(value).build().targetDisease());
    }

    @Test
    public void testImmunizationEvent() {
        final Reference value = Reference.create().build();
        assertEquals(value, ImmunizationEvaluation.create().immunizationEvent(value).build().immunizationEvent());
    }

    @Test
    public void testDoseStatus() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, ImmunizationEvaluation.create().doseStatus(value).build().doseStatus());
    }

    @Test
    public void testDoseStatusReason() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, ImmunizationEvaluation.create().doseStatusReason(value).build().doseStatusReason());
    }

    @Test
    public void testDescription() {
        assertEquals("x", ImmunizationEvaluation.create().description("x").build().description());
    }

    @Test
    public void testSeries() {
        assertEquals("x", ImmunizationEvaluation.create().series("x").build().series());
    }

    @Test
    public void testDoseNumberPositiveInt() {
        assertEquals(1, ImmunizationEvaluation.create().doseNumberPositiveInt(1).build().doseNumberPositiveInt());
    }

    @Test
    public void testDoseNumberString() {
        assertEquals("x", ImmunizationEvaluation.create().doseNumberString("x").build().doseNumberString());
    }

    @Test
    public void testSeriesDosesPositiveInt() {
        assertEquals(1, ImmunizationEvaluation.create().seriesDosesPositiveInt(1).build().seriesDosesPositiveInt());
    }

    @Test
    public void testSeriesDosesString() {
        assertEquals("x", ImmunizationEvaluation.create().seriesDosesString("x").build().seriesDosesString());
    }
}
