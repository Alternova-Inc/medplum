/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.Test;

public class BiologicallyDerivedProductTest {

    @Test
    public void testResourceType() {
        assertEquals("x", BiologicallyDerivedProduct.create().resourceType("x").build().resourceType());
    }

    @Test
    public void testId() {
        assertEquals("x", BiologicallyDerivedProduct.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, BiologicallyDerivedProduct.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        assertEquals("x", BiologicallyDerivedProduct.create().implicitRules("x").build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", BiologicallyDerivedProduct.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, BiologicallyDerivedProduct.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, BiologicallyDerivedProduct.create().contained(value).build().contained());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, BiologicallyDerivedProduct.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIdentifier() {
        final java.util.List<Identifier> value = java.util.Collections.emptyList();
        assertEquals(value, BiologicallyDerivedProduct.create().identifier(value).build().identifier());
    }

    @Test
    public void testProductCategory() {
        assertEquals("x", BiologicallyDerivedProduct.create().productCategory("x").build().productCategory());
    }

    @Test
    public void testProductCode() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, BiologicallyDerivedProduct.create().productCode(value).build().productCode());
    }

    @Test
    public void testStatus() {
        assertEquals("x", BiologicallyDerivedProduct.create().status("x").build().status());
    }

    @Test
    public void testRequest() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, BiologicallyDerivedProduct.create().request(value).build().request());
    }

    @Test
    public void testQuantity() {
        assertEquals(1, BiologicallyDerivedProduct.create().quantity(1).build().quantity());
    }

    @Test
    public void testParent() {
        final java.util.List<Reference> value = java.util.Collections.emptyList();
        assertEquals(value, BiologicallyDerivedProduct.create().parent(value).build().parent());
    }

    @Test
    public void testCollection() {
        final BiologicallyDerivedProduct.BiologicallyDerivedProductCollection value = BiologicallyDerivedProduct.BiologicallyDerivedProductCollection.create().build();
        assertEquals(value, BiologicallyDerivedProduct.create().collection(value).build().collection());
    }

    @Test
    public void testProcessing() {
        final java.util.List<BiologicallyDerivedProduct.BiologicallyDerivedProductProcessing> value = java.util.Collections.emptyList();
        assertEquals(value, BiologicallyDerivedProduct.create().processing(value).build().processing());
    }

    @Test
    public void testManipulation() {
        final BiologicallyDerivedProduct.BiologicallyDerivedProductManipulation value = BiologicallyDerivedProduct.BiologicallyDerivedProductManipulation.create().build();
        assertEquals(value, BiologicallyDerivedProduct.create().manipulation(value).build().manipulation());
    }

    @Test
    public void testStorage() {
        final java.util.List<BiologicallyDerivedProduct.BiologicallyDerivedProductStorage> value = java.util.Collections.emptyList();
        assertEquals(value, BiologicallyDerivedProduct.create().storage(value).build().storage());
    }
}
