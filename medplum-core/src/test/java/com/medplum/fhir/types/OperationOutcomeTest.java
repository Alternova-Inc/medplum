/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import static org.junit.jupiter.api.Assertions.*;

import jakarta.json.Json;

import org.junit.Test;

public class OperationOutcomeTest {

    @Test
    public void testConstructor() {
        assertNotNull(new OperationOutcome(Json.createObjectBuilder().build()));
    }

    @Test
    public void testBuilderFromJsonObject() {
        assertNotNull(OperationOutcome.create(Json.createObjectBuilder().build()).build());
    }

    @Test
    public void testResourceType() {
        assertEquals("x", OperationOutcome.create().resourceType("x").build().resourceType());
    }

    @Test
    public void testId() {
        assertEquals("x", OperationOutcome.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, OperationOutcome.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        assertEquals("x", OperationOutcome.create().implicitRules("x").build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", OperationOutcome.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, OperationOutcome.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, OperationOutcome.create().contained(value).build().contained());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, OperationOutcome.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIssue() {
        final java.util.List<OperationOutcome.OperationOutcomeIssue> value = java.util.Collections.emptyList();
        assertEquals(value, OperationOutcome.create().issue(value).build().issue());
    }

    @Test
    public void testStatus() {
        assertEquals(1, OperationOutcome.create().status(1).build().status());
    }

    @Test
    public void testResource() {
        final Patient p = Patient.create().build();
        assertEquals(p, OperationOutcome.create().resource(p).build().resource());
    }

    @Test
    public void testResourceAsClass() {
        final Patient p = Patient.create().build();
        assertEquals(p, OperationOutcome.create().resource(p).build().resource(Patient.class));
    }
}
