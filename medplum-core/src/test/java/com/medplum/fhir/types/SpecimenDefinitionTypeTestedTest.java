/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.Test;

public class SpecimenDefinitionTypeTestedTest {

    @Test
    public void testId() {
        assertEquals("x", SpecimenDefinition.SpecimenDefinitionTypeTested.create().id("x").build().id());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SpecimenDefinition.SpecimenDefinitionTypeTested.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testIsDerived() {
        assertEquals(true, SpecimenDefinition.SpecimenDefinitionTypeTested.create().isDerived(true).build().isDerived());
    }

    @Test
    public void testType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SpecimenDefinition.SpecimenDefinitionTypeTested.create().type(value).build().type());
    }

    @Test
    public void testPreference() {
        assertEquals("x", SpecimenDefinition.SpecimenDefinitionTypeTested.create().preference("x").build().preference());
    }

    @Test
    public void testContainer() {
        final SpecimenDefinition.SpecimenDefinitionContainer value = SpecimenDefinition.SpecimenDefinitionContainer.create().build();
        assertEquals(value, SpecimenDefinition.SpecimenDefinitionTypeTested.create().container(value).build().container());
    }

    @Test
    public void testRequirement() {
        assertEquals("x", SpecimenDefinition.SpecimenDefinitionTypeTested.create().requirement("x").build().requirement());
    }

    @Test
    public void testRetentionTime() {
        final Duration value = Duration.create().build();
        assertEquals(value, SpecimenDefinition.SpecimenDefinitionTypeTested.create().retentionTime(value).build().retentionTime());
    }

    @Test
    public void testRejectionCriterion() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, SpecimenDefinition.SpecimenDefinitionTypeTested.create().rejectionCriterion(value).build().rejectionCriterion());
    }

    @Test
    public void testHandling() {
        final java.util.List<SpecimenDefinition.SpecimenDefinitionHandling> value = java.util.Collections.emptyList();
        assertEquals(value, SpecimenDefinition.SpecimenDefinitionTypeTested.create().handling(value).build().handling());
    }
}
