/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.Test;

public class SubstanceProteinTest {

    @Test
    public void testResourceType() {
        assertEquals("x", SubstanceProtein.create().resourceType("x").build().resourceType());
    }

    @Test
    public void testId() {
        assertEquals("x", SubstanceProtein.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, SubstanceProtein.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        assertEquals("x", SubstanceProtein.create().implicitRules("x").build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", SubstanceProtein.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, SubstanceProtein.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceProtein.create().contained(value).build().contained());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceProtein.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testSequenceType() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstanceProtein.create().sequenceType(value).build().sequenceType());
    }

    @Test
    public void testNumberOfSubunits() {
        assertEquals(1, SubstanceProtein.create().numberOfSubunits(1).build().numberOfSubunits());
    }

    @Test
    public void testDisulfideLinkage() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceProtein.create().disulfideLinkage(value).build().disulfideLinkage());
    }

    @Test
    public void testSubunit() {
        final java.util.List<SubstanceProtein.SubstanceProteinSubunit> value = java.util.Collections.emptyList();
        assertEquals(value, SubstanceProtein.create().subunit(value).build().subunit());
    }
}
