/*
 * Generated by com.medplum.generator.Generator
 * Do not edit manually.
 */

package com.medplum.fhir.types;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.Test;

public class SubstancePolymerTest {

    @Test
    public void testResourceType() {
        assertEquals("x", SubstancePolymer.create().resourceType("x").build().resourceType());
    }

    @Test
    public void testId() {
        assertEquals("x", SubstancePolymer.create().id("x").build().id());
    }

    @Test
    public void testMeta() {
        final Meta value = Meta.create().build();
        assertEquals(value, SubstancePolymer.create().meta(value).build().meta());
    }

    @Test
    public void testImplicitRules() {
        assertEquals("x", SubstancePolymer.create().implicitRules("x").build().implicitRules());
    }

    @Test
    public void testLanguage() {
        assertEquals("x", SubstancePolymer.create().language("x").build().language());
    }

    @Test
    public void testText() {
        final Narrative value = Narrative.create().build();
        assertEquals(value, SubstancePolymer.create().text(value).build().text());
    }

    @Test
    public void testContained() {
        final java.util.List<FhirResource> value = java.util.Collections.emptyList();
        assertEquals(value, SubstancePolymer.create().contained(value).build().contained());
    }

    @Test
    public void testModifierExtension() {
        final java.util.List<Extension> value = java.util.Collections.emptyList();
        assertEquals(value, SubstancePolymer.create().modifierExtension(value).build().modifierExtension());
    }

    @Test
    public void testClassValue() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstancePolymer.create().classValue(value).build().classValue());
    }

    @Test
    public void testGeometry() {
        final CodeableConcept value = CodeableConcept.create().build();
        assertEquals(value, SubstancePolymer.create().geometry(value).build().geometry());
    }

    @Test
    public void testCopolymerConnectivity() {
        final java.util.List<CodeableConcept> value = java.util.Collections.emptyList();
        assertEquals(value, SubstancePolymer.create().copolymerConnectivity(value).build().copolymerConnectivity());
    }

    @Test
    public void testModification() {
        final java.util.List<String> value = java.util.Collections.emptyList();
        assertEquals(value, SubstancePolymer.create().modification(value).build().modification());
    }

    @Test
    public void testMonomerSet() {
        final java.util.List<SubstancePolymer.SubstancePolymerMonomerSet> value = java.util.Collections.emptyList();
        assertEquals(value, SubstancePolymer.create().monomerSet(value).build().monomerSet());
    }

    @Test
    public void testRepeat() {
        final java.util.List<SubstancePolymer.SubstancePolymerRepeat> value = java.util.Collections.emptyList();
        assertEquals(value, SubstancePolymer.create().repeat(value).build().repeat());
    }
}
